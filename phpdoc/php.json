{"_":{"name":"_","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"abs":{"name":"abs","parameters":[{"type":"mixed","name":"$number","description":"The numeric value to process"}],"return":{"type":"number","values":[]},"short":"Absolute value","examples":[{"title":"Example #1 abs() example","content":"<?php\necho\u00a0abs(-4.2);\u00a0\/\/\u00a04.2\u00a0(double\/float)\necho\u00a0abs(5);\u00a0\u00a0\u00a0\u00a0\/\/\u00a05\u00a0(integer)\necho\u00a0abs(-5);\u00a0\u00a0\u00a0\/\/\u00a05\u00a0(integer)\n?>"}]},"acos":{"name":"acos","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Arc cosine","examples":[]},"acosh":{"name":"acosh","parameters":[{"type":"float","name":"$arg","description":"The value to process"}],"return":{"type":"float","values":[]},"short":"Inverse hyperbolic cosine","examples":[]},"addcslashes":{"name":"addcslashes","parameters":[{"type":"string","name":"$str","description":"The string to be escaped."},{"type":"string","name":"$charlist","description":"A list of characters to be escaped. If charlist contains characters \\n, \\r etc., they are converted in C-like style, while other non-alphanumeric characters with ASCII codes lower than 32 and higher than 126 converted to octal representation.\n\nWhen you define a sequence of characters in the charlist argument make sure that you know what characters come between the characters that you set as the start and end of the range.\n\n<?php echo\u00a0addcslashes('foo[\u00a0]',\u00a0'A..z'); \/\/\u00a0output:\u00a0\u00a0\\f\\o\\o\\[\u00a0\\] \/\/\u00a0All\u00a0upper\u00a0and\u00a0lower-case\u00a0letters\u00a0will\u00a0be\u00a0escaped \/\/\u00a0...\u00a0but\u00a0so\u00a0will\u00a0the\u00a0[\\]^_` ?>\n\nord()\n\n<?php echo\u00a0addcslashes(\"zoo['.']\",\u00a0'z..A'); \/\/\u00a0output:\u00a0\u00a0\\zoo['\\.'] ?>\n\nBe careful if you choose to escape characters 0, a, b, f, n, r, t and v. They will be converted to \\0, \\a, \\b, \\f, \\n, \\r, \\t and \\v, all of which are predefined escape sequences in C. Many of these sequences are also defined in other C-derived languages, including PHP, meaning that you may not get the desired result if you use the output of addcslashes() to generate code in those languages with these characters defined in charlist."}],"return":{"type":"string","values":[]},"short":"Quote string with slashes in a C style","examples":[{"title":"Example #1 addcslashes() example","content":"<?php\n$escaped\u00a0=\u00a0addcslashes($not_escaped,\u00a0\"\\0..\\37!@\\177..\\377\");\n?>"}]},"addslashes":{"name":"addslashes","parameters":[{"type":"string","name":"$str","description":"The string to be escaped."}],"return":{"type":"string","values":[]},"short":"Quote string with slashes","examples":[{"title":"Example #1 An addslashes() example","content":"<?php\n$str\u00a0=\u00a0\"Is\u00a0your\u00a0name\u00a0O'Reilly?\";\n\n\/\/\u00a0Outputs:\u00a0Is\u00a0your\u00a0name\u00a0O\\'Reilly?\necho\u00a0addslashes($str);\n?>"}]},"array_change_key_case":{"name":"array_change_key_case","parameters":[{"type":"array","name":"$array","description":"The array to work on"},{"type":"int","name":"$case","default_value":"CASE_LOWER","description":"Either CASE_UPPER or CASE_LOWER (default)"}],"return":{"type":"array","values":["FALSE"]},"short":"Changes the case of all keys in an array","examples":[{"title":"Example #1 array_change_key_case() example","content":"<?php\n$input_array\u00a0=\u00a0array(\"FirSt\"\u00a0=>\u00a01,\u00a0\"SecOnd\"\u00a0=>\u00a04);\nprint_r(array_change_key_case($input_array,\u00a0CASE_UPPER));\n?>"}]},"array_chunk":{"name":"array_chunk","parameters":[{"type":"array","name":"$array","description":"The array to work on"},{"type":"int","name":"$size","description":"The size of each chunk"},{"type":"bool","name":"$preserve_keys","default_value":"FALSE","description":"When set to TRUE keys will be preserved. Default is FALSE which will reindex the chunk numerically"}],"return":{"type":"array","values":[]},"short":"Split an array into chunks","examples":[{"title":"Example #1 array_chunk() example","content":"<?php\n$input_array\u00a0=\u00a0array('a',\u00a0'b',\u00a0'c',\u00a0'd',\u00a0'e');\nprint_r(array_chunk($input_array,\u00a02));\nprint_r(array_chunk($input_array,\u00a02,\u00a0true));\n?>"}]},"array_column":{"name":"array_column","parameters":[{"type":"array","name":"$input","description":"A multi-dimensional array or an array of objects from which to pull a column of values from. If an array of objects is provided, then public properties can be directly pulled. In order for protected or private properties to be pulled, the class must implement both the __get() and __isset() magic methods."},{"type":"mixed","name":"$column_key","description":"The column of values to return. This value may be an integer key of the column you wish to retrieve, or it may be a string key name for an associative array or property name. It may also be NULL to return complete arrays or objects (this is useful together with index_key to reindex the array)."},{"type":"mixed","name":"$index_key","default_value":"NULL","description":"The column to use as the index\/keys for the returned array. This value may be the integer key of the column, or it may be the string key name."}],"return":{"type":"array","values":[]},"short":"Return the values from a single column in the input array","examples":[{"title":"Example #1 Get the column of first names from a recordset","content":"<?php\n\/\/\u00a0Array\u00a0representing\u00a0a\u00a0possible\u00a0record\u00a0set\u00a0returned\u00a0from\u00a0a\u00a0database\n$records\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'id'\u00a0=>\u00a02135,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'first_name'\u00a0=>\u00a0'John',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'last_name'\u00a0=>\u00a0'Doe',\n\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'id'\u00a0=>\u00a03245,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'first_name'\u00a0=>\u00a0'Sally',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'last_name'\u00a0=>\u00a0'Smith',\n\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'id'\u00a0=>\u00a05342,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'first_name'\u00a0=>\u00a0'Jane',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'last_name'\u00a0=>\u00a0'Jones',\n\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'id'\u00a0=>\u00a05623,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'first_name'\u00a0=>\u00a0'Peter',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'last_name'\u00a0=>\u00a0'Doe',\n\u00a0\u00a0\u00a0\u00a0)\n);\n\u00a0\n$first_names\u00a0=\u00a0array_column($records,\u00a0'first_name');\nprint_r($first_names);\n?>"},{"title":"Example #2 \n     Get the column of last names from a recordset, indexed by the \"id\" column\n    ","content":"<?php\n\/\/\u00a0Using\u00a0the\u00a0$records\u00a0array\u00a0from\u00a0Example\u00a0#1\n$last_names\u00a0=\u00a0array_column($records,\u00a0'last_name',\u00a0'id');\nprint_r($last_names);\n?>"},{"title":"Example #3 \n     Get the column of usernames from the public \"username\" property of an\n     object\n    ","content":"<?php\n\nclass\u00a0User\n{\n\u00a0\u00a0\u00a0\u00a0public\u00a0$username;\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct(string\u00a0$username)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->username\u00a0=\u00a0$username;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$users\u00a0=\u00a0[\n\u00a0\u00a0\u00a0\u00a0new\u00a0User('user\u00a01'),\n\u00a0\u00a0\u00a0\u00a0new\u00a0User('user\u00a02'),\n\u00a0\u00a0\u00a0\u00a0new\u00a0User('user\u00a03'),\n];\n\nprint_r(array_column($users,\u00a0'username'));\n?>"},{"title":"Example #4 \n     Get the column of names from the private \"name\" property of an object\n     using the magic __get() method.\n    ","content":"<?php\n\nclass\u00a0Person\n{\n\u00a0\u00a0\u00a0\u00a0private\u00a0$name;\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct(string\u00a0$name)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->name\u00a0=\u00a0$name;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__get($prop)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0$this->$prop;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__isset($prop)\u00a0:\u00a0bool\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0isset($this->$prop);\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$people\u00a0=\u00a0[\n\u00a0\u00a0\u00a0\u00a0new\u00a0Person('Fred'),\n\u00a0\u00a0\u00a0\u00a0new\u00a0Person('Jane'),\n\u00a0\u00a0\u00a0\u00a0new\u00a0Person('John'),\n];\n\nprint_r(array_column($people,\u00a0'name'));\n?>"}]},"array_combine":{"name":"array_combine","parameters":[{"type":"array","name":"$keys","description":"Array of keys to be used. Illegal values for key will be converted to string."},{"type":"array","name":"$values","description":"Array of values to be used"}],"return":{"type":"array","values":["FALSE"]},"short":"Creates an array by using one array for keys and another for its values","examples":[{"title":"Example #1 A simple array_combine() example","content":"<?php\n$a\u00a0=\u00a0array('green',\u00a0'red',\u00a0'yellow');\n$b\u00a0=\u00a0array('avocado',\u00a0'apple',\u00a0'banana');\n$c\u00a0=\u00a0array_combine($a,\u00a0$b);\n\nprint_r($c);\n?>"}]},"array_count_values":{"name":"array_count_values","parameters":[{"type":"array","name":"$array","description":"The array of values to count"}],"return":{"type":"array","values":[]},"short":"Counts all the values of an array","examples":[{"title":"Example #1 array_count_values() example","content":"<?php\n$array\u00a0=\u00a0array(1,\u00a0\"hello\",\u00a01,\u00a0\"world\",\u00a0\"hello\");\nprint_r(array_count_values($array));\n?>"}]},"array_diff":{"name":"array_diff","parameters":[{"type":"array","name":"$array1","description":"The array to compare from"},{"type":"array","name":"$array2","description":"An array to compare against"},{"type":"array","name":"$...","description":"More arrays to compare against"}],"return":{"type":"array","values":[]},"short":"Computes the difference of arrays","examples":[{"title":"Example #1 array_diff() example","content":"<?php\n$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"red\",\u00a0\"blue\",\u00a0\"red\");\n$array2\u00a0=\u00a0array(\"b\"\u00a0=>\u00a0\"green\",\u00a0\"yellow\",\u00a0\"red\");\n$result\u00a0=\u00a0array_diff($array1,\u00a0$array2);\n\nprint_r($result);\n?>"}]},"array_diff_assoc":{"name":"array_diff_assoc","parameters":[{"type":"array","name":"$array1","description":"The array to compare from"},{"type":"array","name":"$array2","description":"An array to compare against"},{"type":"array","name":"$...","description":"More arrays to compare against"}],"return":{"type":"array","values":[]},"short":"Computes the difference of arrays with additional index check","examples":[{"title":"Example #1 array_diff_assoc() example","content":"In this example you see the \"a\" => \"green\"\n     pair is present in both arrays and thus it is not in the output from the\n     function. Unlike this, the pair 0 => \"red\"\n     is in the output because in the second argument \"red\"\n     has key which is 1."},{"title":"Example #2 array_diff_assoc() example","content":"Two values from key => value pairs are\n     considered equal only if (string) $elem1 === (string)\n     $elem2 . In other words a strict check takes place so\n     the string representations must be the same."}]},"array_diff_key":{"name":"array_diff_key","parameters":[{"type":"array","name":"$array1","description":"The array to compare from"},{"type":"array","name":"$array2","description":"An array to compare against"},{"type":"array","name":"$...","description":"More arrays to compare against"}],"return":{"type":"array","values":[]},"short":"Computes the difference of arrays using keys for comparison","examples":[{"title":"Example #1 array_diff_key() example","content":"The two keys from the key => value pairs are\n     considered equal only if\n     (string) $key1 === (string) $key2 . In other words\n     a strict type check is executed so the string representation must be\n     the same."}]},"array_diff_uassoc":{"name":"array_diff_uassoc","parameters":[{"type":"array","name":"$array1","description":"The array to compare from"},{"type":"array","name":"$array2","description":"An array to compare against"},{"type":"array","name":"$...","description":"More arrays to compare against"},{"type":"callable","name":"$key_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"}],"return":{"type":"array","values":[]},"short":"Computes the difference of arrays with additional index check which is performed by a user supplied callback function","examples":[{"title":"Example #1 array_diff_uassoc() example","content":"The \"a\" => \"green\"\n     pair is present in both arrays and thus it is not in the output from the\n     function. Unlike this, the pair 0 => \"red\"\n     is in the output because in the second argument \"red\"\n     has key which is 1."}]},"array_diff_ukey":{"name":"array_diff_ukey","parameters":[{"type":"array","name":"$array1","description":"The array to compare from"},{"type":"array","name":"$array2","description":"An array to compare against"},{"type":"array","name":"$...","description":"More arrays to compare against"},{"type":"callable","name":"$key_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"}],"return":{"type":"array","values":[]},"short":"Computes the difference of arrays using a callback function on the keys for comparison","examples":[{"title":"Example #1 array_diff_ukey() example","content":"<?php\nfunction\u00a0key_compare_func($key1,\u00a0$key2)\n{\n\u00a0\u00a0\u00a0\u00a0if\u00a0($key1\u00a0==\u00a0$key2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\u00a0\u00a0\u00a0\u00a0else\u00a0if\u00a0($key1\u00a0>\u00a0$key2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a01;\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0-1;\n}\n\n$array1\u00a0=\u00a0array('blue'\u00a0\u00a0=>\u00a01,\u00a0'red'\u00a0\u00a0=>\u00a02,\u00a0'green'\u00a0\u00a0=>\u00a03,\u00a0'purple'\u00a0=>\u00a04);\n$array2\u00a0=\u00a0array('green'\u00a0=>\u00a05,\u00a0'blue'\u00a0=>\u00a06,\u00a0'yellow'\u00a0=>\u00a07,\u00a0'cyan'\u00a0\u00a0\u00a0=>\u00a08);\n\nvar_dump(array_diff_ukey($array1,\u00a0$array2,\u00a0'key_compare_func'));\n?>"}]},"array_fill":{"name":"array_fill","parameters":[{"type":"int","name":"$start_index","description":"The first index of the returned array.\n\nIf start_index is negative, the first index of the returned array will be start_index and the following indices will start from zero (see example)."},{"type":"int","name":"$num","description":"Number of elements to insert. Must be greater than or equal to zero."},{"type":"mixed","name":"$value","description":"Value to use for filling"}],"return":{"type":"array","values":[]},"short":"Fill an array with values","examples":[{"title":"Example #1 array_fill() example","content":"<?php\n$a\u00a0=\u00a0array_fill(5,\u00a06,\u00a0'banana');\n$b\u00a0=\u00a0array_fill(-2,\u00a04,\u00a0'pear');\nprint_r($a);\nprint_r($b);\n?>"}]},"array_fill_keys":{"name":"array_fill_keys","parameters":[{"type":"array","name":"$keys","description":"Array of values that will be used as keys. Illegal values for key will be converted to string."},{"type":"mixed","name":"$value","description":"Value to use for filling"}],"return":{"type":"array","values":[]},"short":"Fill an array with values, specifying keys","examples":[{"title":"Example #1 array_fill_keys() example","content":"<?php\n$keys\u00a0=\u00a0array('foo',\u00a05,\u00a010,\u00a0'bar');\n$a\u00a0=\u00a0array_fill_keys($keys,\u00a0'banana');\nprint_r($a);\n?>"}]},"array_filter":{"name":"array_filter","parameters":[{"type":"array","name":"$array","description":"The array to iterate over"},{"type":"callable","name":"$callback","description":"The callback function to use\n\nIf no callback is supplied, all entries of array equal to FALSE (see converting to boolean) will be removed."},{"type":"int","name":"$flag","default_value":"0","description":"Flag determining what arguments are sent to callback:\n\nARRAY_FILTER_USE_KEY - pass key as the only argument to callback instead of the value\n\n ARRAY_FILTER_USE_BOTH - pass both value and key as arguments to callback instead of the value"}],"return":{"type":"array","values":[]},"short":"Filters elements of an array using a callback function","examples":[{"title":"Example #1 array_filter() example","content":"<?php\nfunction\u00a0odd($var)\n{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0whether\u00a0the\u00a0input\u00a0integer\u00a0is\u00a0odd\n\u00a0\u00a0\u00a0\u00a0return($var\u00a0&\u00a01);\n}\n\nfunction\u00a0even($var)\n{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0whether\u00a0the\u00a0input\u00a0integer\u00a0is\u00a0even\n\u00a0\u00a0\u00a0\u00a0return(!($var\u00a0&\u00a01));\n}\n\n$array1\u00a0=\u00a0array(\"a\"=>1,\u00a0\"b\"=>2,\u00a0\"c\"=>3,\u00a0\"d\"=>4,\u00a0\"e\"=>5);\n$array2\u00a0=\u00a0array(6,\u00a07,\u00a08,\u00a09,\u00a010,\u00a011,\u00a012);\n\necho\u00a0\"Odd\u00a0:\\n\";\nprint_r(array_filter($array1,\u00a0\"odd\"));\necho\u00a0\"Even:\\n\";\nprint_r(array_filter($array2,\u00a0\"even\"));\n?>"},{"title":"Example #2 array_filter() without\n    callback","content":"<?php\n\n$entry\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0=>\u00a0'foo',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\u00a0=>\u00a0false,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\u00a0=>\u00a0-1,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03\u00a0=>\u00a0null,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04\u00a0=>\u00a0''\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n\nprint_r(array_filter($entry));\n?>"},{"title":"Example #3 array_filter() with \n    flag","content":"<?php\n\n$arr\u00a0=\u00a0['a'\u00a0=>\u00a01,\u00a0'b'\u00a0=>\u00a02,\u00a0'c'\u00a0=>\u00a03,\u00a0'd'\u00a0=>\u00a04];\n\nvar_dump(array_filter($arr,\u00a0function($k)\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0$k\u00a0==\u00a0'b';\n},\u00a0ARRAY_FILTER_USE_KEY));\n\nvar_dump(array_filter($arr,\u00a0function($v,\u00a0$k)\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0$k\u00a0==\u00a0'b'\u00a0||\u00a0$v\u00a0==\u00a04;\n},\u00a0ARRAY_FILTER_USE_BOTH));\n?>"}]},"array_flip":{"name":"array_flip","parameters":[{"type":"array","name":"$array","description":"An array of key\/value pairs to be flipped."}],"return":{"type":"array","values":["NULL"]},"short":"Exchanges all keys with their associated values in an array","examples":[{"title":"Example #1 array_flip() example","content":"<?php\n$input\u00a0=\u00a0array(\"oranges\",\u00a0\"apples\",\u00a0\"pears\");\n$flipped\u00a0=\u00a0array_flip($input);\n\nprint_r($flipped);\n?>"},{"title":"Example #2 array_flip() example : collision","content":"<?php\n$input\u00a0=\u00a0array(\"a\"\u00a0=>\u00a01,\u00a0\"b\"\u00a0=>\u00a01,\u00a0\"c\"\u00a0=>\u00a02);\n$flipped\u00a0=\u00a0array_flip($input);\n\nprint_r($flipped);\n?>"}]},"array_intersect":{"name":"array_intersect","parameters":[{"type":"array","name":"$array1","description":"The array with master values to check."},{"type":"array","name":"$array2","description":"An array to compare values against."},{"type":"array","name":"$...","description":"A variable list of arrays to compare."}],"return":{"type":"array","values":[]},"short":"Computes the intersection of arrays","examples":[{"title":"Example #1 array_intersect() example","content":"<?php\n$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"red\",\u00a0\"blue\");\n$array2\u00a0=\u00a0array(\"b\"\u00a0=>\u00a0\"green\",\u00a0\"yellow\",\u00a0\"red\");\n$result\u00a0=\u00a0array_intersect($array1,\u00a0$array2);\nprint_r($result);\n?>"}]},"array_intersect_assoc":{"name":"array_intersect_assoc","parameters":[{"type":"array","name":"$array1","description":"The array with master values to check."},{"type":"array","name":"$array2","description":"An array to compare values against."},{"type":"array","name":"$...","description":"A variable list of arrays to compare."}],"return":{"type":"array","values":[]},"short":"Computes the intersection of arrays with additional index check","examples":[{"title":"Example #1 array_intersect_assoc() example","content":"<?php\n$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");\n$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"yellow\",\u00a0\"blue\",\u00a0\"red\");\n$result_array\u00a0=\u00a0array_intersect_assoc($array1,\u00a0$array2);\nprint_r($result_array);\n?>"}]},"array_intersect_key":{"name":"array_intersect_key","parameters":[{"type":"array","name":"$array1","description":"The array with master keys to check."},{"type":"array","name":"$array2","description":"An array to compare keys against."},{"type":"array","name":"$...","description":"A variable list of arrays to compare."}],"return":{"type":"array","values":[]},"short":"Computes the intersection of arrays using keys for comparison","examples":[{"title":"Example #1 array_intersect_key() example","content":"<?php\n$array1\u00a0=\u00a0array('blue'\u00a0\u00a0=>\u00a01,\u00a0'red'\u00a0\u00a0=>\u00a02,\u00a0'green'\u00a0\u00a0=>\u00a03,\u00a0'purple'\u00a0=>\u00a04);\n$array2\u00a0=\u00a0array('green'\u00a0=>\u00a05,\u00a0'blue'\u00a0=>\u00a06,\u00a0'yellow'\u00a0=>\u00a07,\u00a0'cyan'\u00a0\u00a0\u00a0=>\u00a08);\n\nvar_dump(array_intersect_key($array1,\u00a0$array2));\n?>"}]},"array_intersect_uassoc":{"name":"array_intersect_uassoc","parameters":[{"type":"array","name":"$array1","description":"Initial array for comparison of the arrays."},{"type":"array","name":"$array2","description":"First array to compare keys against."},{"type":"array","name":"$...","description":"Variable list of array arguments to compare values against."},{"type":"callable","name":"$key_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"}],"return":{"type":"array","values":[]},"short":"Computes the intersection of arrays with additional index check, compares indexes by a callback function","examples":[{"title":"Example #1 array_intersect_uassoc() example","content":"<?php\n$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");\n$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"GREEN\",\u00a0\"B\"\u00a0=>\u00a0\"brown\",\u00a0\"yellow\",\u00a0\"red\");\n\nprint_r(array_intersect_uassoc($array1,\u00a0$array2,\u00a0\"strcasecmp\"));\n?>"}]},"array_intersect_ukey":{"name":"array_intersect_ukey","parameters":[{"type":"array","name":"$array1","description":"Initial array for comparison of the arrays."},{"type":"array","name":"$array2","description":"First array to compare keys against."},{"type":"array","name":"$...","description":"Variable list of array arguments to compare keys against."},{"type":"callable","name":"$key_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"}],"return":{"type":"array","values":[]},"short":"Computes the intersection of arrays using a callback function on the keys for comparison","examples":[{"title":"Example #1 array_intersect_ukey() example","content":"<?php\nfunction\u00a0key_compare_func($key1,\u00a0$key2)\n{\n\u00a0\u00a0\u00a0\u00a0if\u00a0($key1\u00a0==\u00a0$key2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\u00a0\u00a0\u00a0\u00a0else\u00a0if\u00a0($key1\u00a0>\u00a0$key2)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a01;\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0-1;\n}\n\n$array1\u00a0=\u00a0array('blue'\u00a0\u00a0=>\u00a01,\u00a0'red'\u00a0\u00a0=>\u00a02,\u00a0'green'\u00a0\u00a0=>\u00a03,\u00a0'purple'\u00a0=>\u00a04);\n$array2\u00a0=\u00a0array('green'\u00a0=>\u00a05,\u00a0'blue'\u00a0=>\u00a06,\u00a0'yellow'\u00a0=>\u00a07,\u00a0'cyan'\u00a0\u00a0\u00a0=>\u00a08);\n\nvar_dump(array_intersect_ukey($array1,\u00a0$array2,\u00a0'key_compare_func'));\n?>"}]},"array_key_exists":{"name":"array_key_exists","parameters":[{"type":"mixed","name":"$key","description":"Value to check."},{"type":"array","name":"$array","description":"An array with keys to check."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if the given key or index exists in the array","examples":[{"title":"Example #1 array_key_exists() example","content":"<?php\n$search_array\u00a0=\u00a0array('first'\u00a0=>\u00a01,\u00a0'second'\u00a0=>\u00a04);\nif\u00a0(array_key_exists('first',\u00a0$search_array))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0'first'\u00a0element\u00a0is\u00a0in\u00a0the\u00a0array\";\n}\n?>"},{"title":"Example #2 array_key_exists() vs isset()","content":"isset() does not return TRUE for array keys\n    that correspond to a NULL value, while\n    array_key_exists() does."}]},"array_keys":{"name":"array_keys","parameters":[{"type":"array","name":"$array","description":"An array containing keys to return."},{"type":"mixed","name":"$search_value","default_value":"NULL","description":"If specified, then only keys containing these values are returned."},{"type":"bool","name":"$strict","default_value":"FALSE","description":"Determines if strict comparison (===) should be used during the search."}],"return":{"type":"array","values":[]},"short":"Return all the keys or a subset of the keys of an array","examples":[{"title":"Example #1 array_keys() example","content":"<?php\n$array\u00a0=\u00a0array(0\u00a0=>\u00a0100,\u00a0\"color\"\u00a0=>\u00a0\"red\");\nprint_r(array_keys($array));\n\n$array\u00a0=\u00a0array(\"blue\",\u00a0\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"blue\");\nprint_r(array_keys($array,\u00a0\"blue\"));\n\n$array\u00a0=\u00a0array(\"color\"\u00a0=>\u00a0array(\"blue\",\u00a0\"red\",\u00a0\"green\"),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"size\"\u00a0\u00a0=>\u00a0array(\"small\",\u00a0\"medium\",\u00a0\"large\"));\nprint_r(array_keys($array));\n?>"}]},"array_map":{"name":"array_map","parameters":[{"type":"callable","name":"$callback","description":"Callback function to run for each element in each array."},{"type":"array","name":"$array1","description":"An array to run through the callback function."},{"type":"array","name":"$...","description":"Variable list of array arguments to run through the callback function."}],"return":{"type":"array","values":[]},"short":"Applies the callback to the elements of the given arrays","examples":[{"title":"Example #1 array_map() example","content":"<?php\nfunction\u00a0cube($n)\n{\n\u00a0\u00a0\u00a0\u00a0return($n\u00a0*\u00a0$n\u00a0*\u00a0$n);\n}\n\n$a\u00a0=\u00a0array(1,\u00a02,\u00a03,\u00a04,\u00a05);\n$b\u00a0=\u00a0array_map(\"cube\",\u00a0$a);\nprint_r($b);\n?>"},{"title":"Example #2 array_map() using a lambda function (as of PHP 5.3.0)","content":"<?php\n$func\u00a0=\u00a0function($value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0$value\u00a0*\u00a02;\n};\n\nprint_r(array_map($func,\u00a0range(1,\u00a05)));\n?>"},{"title":"Example #3 array_map() - using more arrays","content":"<?php\nfunction\u00a0show_Spanish($n,\u00a0$m)\n{\n\u00a0\u00a0\u00a0\u00a0return(\"The\u00a0number\u00a0$n\u00a0is\u00a0called\u00a0$m\u00a0in\u00a0Spanish\");\n}\n\nfunction\u00a0map_Spanish($n,\u00a0$m)\n{\n\u00a0\u00a0\u00a0\u00a0return(array($n\u00a0=>\u00a0$m));\n}\n\n$a\u00a0=\u00a0array(1,\u00a02,\u00a03,\u00a04,\u00a05);\n$b\u00a0=\u00a0array(\"uno\",\u00a0\"dos\",\u00a0\"tres\",\u00a0\"cuatro\",\u00a0\"cinco\");\n\n$c\u00a0=\u00a0array_map(\"show_Spanish\",\u00a0$a,\u00a0$b);\nprint_r($c);\n\n$d\u00a0=\u00a0array_map(\"map_Spanish\",\u00a0$a\u00a0,\u00a0$b);\nprint_r($d);\n?>"},{"title":"Example #4 Creating an array of arrays","content":"<?php\n$a\u00a0=\u00a0array(1,\u00a02,\u00a03,\u00a04,\u00a05);\n$b\u00a0=\u00a0array(\"one\",\u00a0\"two\",\u00a0\"three\",\u00a0\"four\",\u00a0\"five\");\n$c\u00a0=\u00a0array(\"uno\",\u00a0\"dos\",\u00a0\"tres\",\u00a0\"cuatro\",\u00a0\"cinco\");\n\n$d\u00a0=\u00a0array_map(null,\u00a0$a,\u00a0$b,\u00a0$c);\nprint_r($d);\n?>"},{"title":"Example #5 array_map() - with string keys","content":"<?php\n$arr\u00a0=\u00a0array(\"stringkey\"\u00a0=>\u00a0\"value\");\nfunction\u00a0cb1($a)\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0array\u00a0($a);\n}\nfunction\u00a0cb2($a,\u00a0$b)\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0array\u00a0($a,\u00a0$b);\n}\nvar_dump(array_map(\"cb1\",\u00a0$arr));\nvar_dump(array_map(\"cb2\",\u00a0$arr,\u00a0$arr));\nvar_dump(array_map(null,\u00a0\u00a0$arr));\nvar_dump(array_map(null,\u00a0$arr,\u00a0$arr));\n?>"}]},"array_merge":{"name":"array_merge","parameters":[{"type":"array","name":"$array1","description":"Initial array to merge."},{"type":"array","name":"$...","description":"Variable list of arrays to merge."}],"return":{"type":"array","values":[]},"short":"Merge one or more arrays","examples":[{"title":"Example #1 array_merge() example","content":"<?php\n$array1\u00a0=\u00a0array(\"color\"\u00a0=>\u00a0\"red\",\u00a02,\u00a04);\n$array2\u00a0=\u00a0array(\"a\",\u00a0\"b\",\u00a0\"color\"\u00a0=>\u00a0\"green\",\u00a0\"shape\"\u00a0=>\u00a0\"trapezoid\",\u00a04);\n$result\u00a0=\u00a0array_merge($array1,\u00a0$array2);\nprint_r($result);\n?>"},{"title":"Example #2 Simple array_merge() example","content":"<?php\n$array1\u00a0=\u00a0array();\n$array2\u00a0=\u00a0array(1\u00a0=>\u00a0\"data\");\n$result\u00a0=\u00a0array_merge($array1,\u00a0$array2);\n?>"},{"title":"Example #3 array_merge() with non-array types","content":"<?php\n$beginning\u00a0=\u00a0'foo';\n$end\u00a0=\u00a0array(1\u00a0=>\u00a0'bar');\n$result\u00a0=\u00a0array_merge((array)$beginning,\u00a0(array)$end);\nprint_r($result);\n?>"}]},"array_merge_recursive":{"name":"array_merge_recursive","parameters":[{"type":"array","name":"$array1","description":"Initial array to merge."},{"type":"array","name":"$...","description":"Variable list of arrays to recursively merge."}],"return":{"type":"array","values":[]},"short":"Merge two or more arrays recursively","examples":[{"title":"Example #1 array_merge_recursive() example","content":"<?php\n$ar1\u00a0=\u00a0array(\"color\"\u00a0=>\u00a0array(\"favorite\"\u00a0=>\u00a0\"red\"),\u00a05);\n$ar2\u00a0=\u00a0array(10,\u00a0\"color\"\u00a0=>\u00a0array(\"favorite\"\u00a0=>\u00a0\"green\",\u00a0\"blue\"));\n$result\u00a0=\u00a0array_merge_recursive($ar1,\u00a0$ar2);\nprint_r($result);\n?>"}]},"array_multisort":{"name":"array_multisort","parameters":[{"type":"mixed","name":"$array1_sort_order","default_value":"SORT_ASC","description":"The order used to sort the previous array argument. Either SORT_ASC to sort ascendingly or SORT_DESC to sort descendingly.\n\nThis argument can be swapped with array1_sort_flags or omitted entirely, in which case SORT_ASC is assumed."},{"type":"mixed","name":"$array1_sort_flags","default_value":"SORT_REGULAR","description":"Sort options for the previous array argument:\n\nSorting type flags:\n\nSORT_REGULAR - compare items normally (don't change types)\n\n SORT_NUMERIC - compare items numerically\n\n SORT_STRING - compare items as strings\n\n\n SORT_LOCALE_STRING - compare items as strings, based on the current locale. It uses the locale, which can be changed using setlocale()\n\n\n\n SORT_NATURAL - compare items as strings using \"natural ordering\" like natsort()\n\n\n\n SORT_FLAG_CASE - can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively\n\nThis argument can be swapped with array1_sort_order or omitted entirely, in which case SORT_REGULAR is assumed."},{"type":"mixed","name":"$...","description":"More arrays, optionally followed by sort order and flags. Only elements corresponding to equivalent elements in previous arrays are compared. In other words, the sort is lexicographical."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort multiple or multi-dimensional arrays","examples":[{"title":"Example #1 Sorting multiple arrays","content":"<?php\n$ar1\u00a0=\u00a0array(10,\u00a0100,\u00a0100,\u00a00);\n$ar2\u00a0=\u00a0array(1,\u00a03,\u00a02,\u00a04);\narray_multisort($ar1,\u00a0$ar2);\n\nvar_dump($ar1);\nvar_dump($ar2);\n?>"},{"title":"Example #2 Sorting multi-dimensional array","content":"<?php\n$ar\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array(\"10\",\u00a011,\u00a0100,\u00a0100,\u00a0\"a\"),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array(\u00a0\u00a0\u00a01,\u00a0\u00a02,\u00a0\"2\",\u00a0\u00a0\u00a03,\u00a0\u00a0\u00a01)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\narray_multisort($ar[0],\u00a0SORT_ASC,\u00a0SORT_STRING,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$ar[1],\u00a0SORT_NUMERIC,\u00a0SORT_DESC);\nvar_dump($ar);\n?>"},{"title":"Example #3 Sorting database results","content":"For this example, each element in the data\n     array represents one row in a table. This type of dataset is typical\n     of database records."},{"title":"Example #4 Case insensitive sorting","content":"Both SORT_STRING and\n     SORT_REGULAR are case sensitive, strings\n     starting with a capital letter will come before strings starting\n     with a lowercase letter."}]},"array_pad":{"name":"array_pad","parameters":[{"type":"array","name":"$array","description":"Initial array of values to pad."},{"type":"int","name":"$size","description":"New size of the array."},{"type":"mixed","name":"$value","description":"Value to pad if array is less than size."}],"return":{"type":"array","values":[]},"short":"Pad array to the specified length with a value","examples":[{"title":"Example #1 array_pad() example","content":"<?php\n$input\u00a0=\u00a0array(12,\u00a010,\u00a09);\n\n$result\u00a0=\u00a0array_pad($input,\u00a05,\u00a00);\n\/\/\u00a0result\u00a0is\u00a0array(12,\u00a010,\u00a09,\u00a00,\u00a00)\n\n$result\u00a0=\u00a0array_pad($input,\u00a0-7,\u00a0-1);\n\/\/\u00a0result\u00a0is\u00a0array(-1,\u00a0-1,\u00a0-1,\u00a0-1,\u00a012,\u00a010,\u00a09)\n\n$result\u00a0=\u00a0array_pad($input,\u00a02,\u00a0\"noop\");\n\/\/\u00a0not\u00a0padded\n?>"}]},"array_pop":{"name":"array_pop","parameters":[],"return":{"type":"mixed","values":["NULL"]},"short":"Pop the element off the end of array","examples":[{"title":"Example #1 array_pop() example","content":"<?php\n$stack\u00a0=\u00a0array(\"orange\",\u00a0\"banana\",\u00a0\"apple\",\u00a0\"raspberry\");\n$fruit\u00a0=\u00a0array_pop($stack);\nprint_r($stack);\n?>"}]},"array_product":{"name":"array_product","parameters":[{"type":"array","name":"$array","description":"The array."}],"return":{"type":"number","values":[]},"short":"Calculate the product of values in an array","examples":[{"title":"Example #1 array_product() examples","content":"<?php\n\n$a\u00a0=\u00a0array(2,\u00a04,\u00a06,\u00a08);\necho\u00a0\"product(a)\u00a0=\u00a0\"\u00a0.\u00a0array_product($a)\u00a0.\u00a0\"\\n\";\necho\u00a0\"product(array())\u00a0=\u00a0\"\u00a0.\u00a0array_product(array())\u00a0.\u00a0\"\\n\";\n\n?>"}]},"array_push":{"name":"array_push","parameters":[{"type":"mixed","name":"$value1","description":"The first value to push onto the end of the array."},{"type":"mixed","name":"$..."}],"return":{"type":"int","values":[]},"short":"Push one or more elements onto the end of array","examples":[{"title":"Example #1 array_push() example","content":"<?php\n$stack\u00a0=\u00a0array(\"orange\",\u00a0\"banana\");\narray_push($stack,\u00a0\"apple\",\u00a0\"raspberry\");\nprint_r($stack);\n?>"}]},"array_rand":{"name":"array_rand","parameters":[{"type":"array","name":"$array","description":"The input array."},{"type":"int","name":"$num","default_value":"1","description":"Specifies how many entries should be picked."}],"return":{"type":"mixed","values":["E_WARNING"]},"short":"Pick one or more random entries out of an array","examples":[{"title":"Example #1 array_rand() example","content":"<?php\n$input\u00a0=\u00a0array(\"Neo\",\u00a0\"Morpheus\",\u00a0\"Trinity\",\u00a0\"Cypher\",\u00a0\"Tank\");\n$rand_keys\u00a0=\u00a0array_rand($input,\u00a02);\necho\u00a0$input[$rand_keys[0]]\u00a0.\u00a0\"\\n\";\necho\u00a0$input[$rand_keys[1]]\u00a0.\u00a0\"\\n\";\n?>"}]},"array_reduce":{"name":"array_reduce","parameters":[{"type":"array","name":"$array","description":"The input array."},{"type":"callable","name":"$callback","description":"mixed callback ( mixed $carry , mixed $item )\n\ncarry\n\n\n\n Holds the return value of the previous iteration; in the case of the first iteration it instead holds the value of initial.\n\n\n\n\n\n item\n\n\n\n Holds the value of the current iteration."},{"type":"mixed","name":"$initial","default_value":"NULL","description":"If the optional initial is available, it will be used at the beginning of the process, or as a final result in case the array is empty."}],"return":{"type":"mixed","values":["NULL"]},"short":"Iteratively reduce the array to a single value using a callback function","examples":[{"title":"Example #1 array_reduce() example","content":"<?php\nfunction\u00a0sum($carry,\u00a0$item)\n{\n\u00a0\u00a0\u00a0\u00a0$carry\u00a0+=\u00a0$item;\n\u00a0\u00a0\u00a0\u00a0return\u00a0$carry;\n}\n\nfunction\u00a0product($carry,\u00a0$item)\n{\n\u00a0\u00a0\u00a0\u00a0$carry\u00a0*=\u00a0$item;\n\u00a0\u00a0\u00a0\u00a0return\u00a0$carry;\n}\n\n$a\u00a0=\u00a0array(1,\u00a02,\u00a03,\u00a04,\u00a05);\n$x\u00a0=\u00a0array();\n\nvar_dump(array_reduce($a,\u00a0\"sum\"));\u00a0\/\/\u00a0int(15)\nvar_dump(array_reduce($a,\u00a0\"product\",\u00a010));\u00a0\/\/\u00a0int(1200),\u00a0because:\u00a010*1*2*3*4*5\nvar_dump(array_reduce($x,\u00a0\"sum\",\u00a0\"No\u00a0data\u00a0to\u00a0reduce\"));\u00a0\/\/\u00a0string(17)\u00a0\"No\u00a0data\u00a0to\u00a0reduce\"\n?>"}]},"array_replace":{"name":"array_replace","parameters":[{"type":"array","name":"$array1","description":"The array in which elements are replaced."},{"type":"array","name":"$array2","description":"The array from which elements will be extracted."},{"type":"array","name":"$...","description":"More arrays from which elements will be extracted. Values from later arrays overwrite the previous values."}],"return":{"type":"array","values":["NULL"]},"short":"Replaces elements from passed arrays into the first array","examples":[{"title":"Example #1 array_replace() example","content":"<?php\n$base\u00a0=\u00a0array(\"orange\",\u00a0\"banana\",\u00a0\"apple\",\u00a0\"raspberry\");\n$replacements\u00a0=\u00a0array(0\u00a0=>\u00a0\"pineapple\",\u00a04\u00a0=>\u00a0\"cherry\");\n$replacements2\u00a0=\u00a0array(0\u00a0=>\u00a0\"grape\");\n\n$basket\u00a0=\u00a0array_replace($base,\u00a0$replacements,\u00a0$replacements2);\nprint_r($basket);\n?>"}]},"array_replace_recursive":{"name":"array_replace_recursive","parameters":[{"type":"array","name":"$array1","description":"The array in which elements are replaced."},{"type":"array","name":"$array2","description":"The array from which elements will be extracted."},{"type":"array","name":"$...","description":"Optional. More arrays from which elements will be extracted."}],"return":{"type":"array","values":["NULL"]},"short":"Replaces elements from passed arrays into the first array recursively","examples":[{"title":"Example #1 array_replace_recursive() example","content":"<?php\n$base\u00a0=\u00a0array('citrus'\u00a0=>\u00a0array(\u00a0\"orange\")\u00a0,\u00a0'berries'\u00a0=>\u00a0array(\"blackberry\",\u00a0\"raspberry\"),\u00a0);\n$replacements\u00a0=\u00a0array('citrus'\u00a0=>\u00a0array('pineapple'),\u00a0'berries'\u00a0=>\u00a0array('blueberry'));\n\n$basket\u00a0=\u00a0array_replace_recursive($base,\u00a0$replacements);\nprint_r($basket);\n\n$basket\u00a0=\u00a0array_replace($base,\u00a0$replacements);\nprint_r($basket);\n?>"},{"title":"Example #2 array_replace_recursive() and recursive behavior","content":"<?php\n$base\u00a0=\u00a0array('citrus'\u00a0=>\u00a0array(\"orange\")\u00a0,\u00a0'berries'\u00a0=>\u00a0array(\"blackberry\",\u00a0\"raspberry\"),\u00a0'others'\u00a0=>\u00a0'banana'\u00a0);\n$replacements\u00a0=\u00a0array('citrus'\u00a0=>\u00a0'pineapple',\u00a0'berries'\u00a0=>\u00a0array('blueberry'),\u00a0'others'\u00a0=>\u00a0array('litchis'));\n$replacements2\u00a0=\u00a0array('citrus'\u00a0=>\u00a0array('pineapple'),\u00a0'berries'\u00a0=>\u00a0array('blueberry'),\u00a0'others'\u00a0=>\u00a0'litchis');\n\n$basket\u00a0=\u00a0array_replace_recursive($base,\u00a0$replacements,\u00a0$replacements2);\nprint_r($basket);\n\n?>"}]},"array_reverse":{"name":"array_reverse","parameters":[{"type":"array","name":"$array","description":"The input array."},{"type":"bool","name":"$preserve_keys","default_value":"FALSE","description":"If set to TRUE numeric keys are preserved. Non-numeric keys are not affected by this setting and will always be preserved."}],"return":{"type":"array","values":[]},"short":"Return an array with elements in reverse order","examples":[{"title":"Example #1 array_reverse() example","content":"<?php\n$input\u00a0\u00a0=\u00a0array(\"php\",\u00a04.0,\u00a0array(\"green\",\u00a0\"red\"));\n$reversed\u00a0=\u00a0array_reverse($input);\n$preserved\u00a0=\u00a0array_reverse($input,\u00a0true);\n\nprint_r($input);\nprint_r($reversed);\nprint_r($preserved);\n?>"}]},"array_search":{"name":"array_search","parameters":[{"type":"mixed","name":"$needle","description":"The searched value.\n\nNote:\n If needle is a string, the comparison is done in a case-sensitive manner."},{"type":"array","name":"$haystack","description":"The array."},{"type":"bool","name":"$strict","default_value":"FALSE","description":"If the third parameter strict is set to TRUE then the array_search() function will search for identical elements in the haystack. This means it will also perform a strict type comparison of the needle in the haystack, and objects must be the same instance."}],"return":{"type":"mixed","values":["FALSE"]},"short":"Searches the array for a given value and returns the first corresponding key if successful","examples":[{"title":"Example #1 array_search() example","content":"<?php\n$array\u00a0=\u00a0array(0\u00a0=>\u00a0'blue',\u00a01\u00a0=>\u00a0'red',\u00a02\u00a0=>\u00a0'green',\u00a03\u00a0=>\u00a0'red');\n\n$key\u00a0=\u00a0array_search('green',\u00a0$array);\u00a0\/\/\u00a0$key\u00a0=\u00a02;\n$key\u00a0=\u00a0array_search('red',\u00a0$array);\u00a0\u00a0\u00a0\/\/\u00a0$key\u00a0=\u00a01;\n?>"}]},"array_shift":{"name":"array_shift","parameters":[],"return":{"type":"mixed","values":["NULL"]},"short":"Shift an element off the beginning of array","examples":[{"title":"Example #1 array_shift() example","content":"<?php\n$stack\u00a0=\u00a0array(\"orange\",\u00a0\"banana\",\u00a0\"apple\",\u00a0\"raspberry\");\n$fruit\u00a0=\u00a0array_shift($stack);\nprint_r($stack);\n?>"}]},"array_slice":{"name":"array_slice","parameters":[{"type":"array","name":"$array","description":"The input array."},{"type":"int","name":"$offset","description":"If offset is non-negative, the sequence will start at that offset in the array.  If offset is negative, the sequence will start that far from the end of the array."},{"type":"int","name":"$length","default_value":"NULL","description":"If length is given and is positive, then the sequence will have up to that many elements in it. If the array is shorter than the length, then only the available array elements will be present. If length is given and is negative then the sequence will stop that many elements from the end of the array. If it is omitted, then the sequence will have everything from offset up until the end of the array."},{"type":"bool","name":"$preserve_keys","default_value":"FALSE","description":"Note that array_slice() will reorder and reset the numeric array indices by default. You can change this behaviour by setting preserve_keys to TRUE."}],"return":{"type":"array","values":[]},"short":"Extract a slice of the array","examples":[{"title":"Example #1 array_slice() examples","content":"<?php\n$input\u00a0=\u00a0array(\"a\",\u00a0\"b\",\u00a0\"c\",\u00a0\"d\",\u00a0\"e\");\n\n$output\u00a0=\u00a0array_slice($input,\u00a02);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0\"c\",\u00a0\"d\",\u00a0and\u00a0\"e\"\n$output\u00a0=\u00a0array_slice($input,\u00a0-2,\u00a01);\u00a0\u00a0\/\/\u00a0returns\u00a0\"d\"\n$output\u00a0=\u00a0array_slice($input,\u00a00,\u00a03);\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0\"a\",\u00a0\"b\",\u00a0and\u00a0\"c\"\n\n\/\/\u00a0note\u00a0the\u00a0differences\u00a0in\u00a0the\u00a0array\u00a0keys\nprint_r(array_slice($input,\u00a02,\u00a0-1));\nprint_r(array_slice($input,\u00a02,\u00a0-1,\u00a0true));\n?>"}]},"array_splice":{"name":"array_splice","parameters":[{"type":"int","name":"$offset","description":"If offset is positive then the start of removed portion is at that offset from the beginning of the input array.  If offset is negative then it starts that far from the end of the input array."},{"type":"int","name":"$length","default_value":"count($input)","description":"If length is omitted, removes everything from offset to the end of the array. If length is specified and is positive, then that many elements will be removed. If length is specified and is negative then the end of the removed portion will be that many elements from the end of the array. If length is specified and is zero, no elements will be removed. Tip: to remove everything from offset to the end of the array when replacement is also specified, use count($input) for length."},{"type":"mixed","name":"$replacement","default_value":"array()","description":"If replacement array is specified, then the removed elements are replaced with elements from this array.\n\nIf offset and length are such that nothing is removed, then the elements from the replacement array are inserted in the place specified by the offset. Note that keys in replacement array are not preserved.\n\nIf replacement is just one element it is not necessary to put array() around it, unless the element is an array itself, an object or NULL."}],"return":{"type":"array","values":[]},"short":"Remove a portion of the array and replace it with something else","examples":[{"title":"Example #1 array_splice() examples","content":"<?php\n$input\u00a0=\u00a0array(\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"yellow\");\narray_splice($input,\u00a02);\n\/\/\u00a0$input\u00a0is\u00a0now\u00a0array(\"red\",\u00a0\"green\")\n\n$input\u00a0=\u00a0array(\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"yellow\");\narray_splice($input,\u00a01,\u00a0-1);\n\/\/\u00a0$input\u00a0is\u00a0now\u00a0array(\"red\",\u00a0\"yellow\")\n\n$input\u00a0=\u00a0array(\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"yellow\");\narray_splice($input,\u00a01,\u00a0count($input),\u00a0\"orange\");\n\/\/\u00a0$input\u00a0is\u00a0now\u00a0array(\"red\",\u00a0\"orange\")\n\n$input\u00a0=\u00a0array(\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"yellow\");\narray_splice($input,\u00a0-1,\u00a01,\u00a0array(\"black\",\u00a0\"maroon\"));\n\/\/\u00a0$input\u00a0is\u00a0now\u00a0array(\"red\",\u00a0\"green\",\n\/\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"blue\",\u00a0\"black\",\u00a0\"maroon\")\n\n$input\u00a0=\u00a0array(\"red\",\u00a0\"green\",\u00a0\"blue\",\u00a0\"yellow\");\narray_splice($input,\u00a03,\u00a00,\u00a0\"purple\");\n\/\/\u00a0$input\u00a0is\u00a0now\u00a0array(\"red\",\u00a0\"green\",\n\/\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"blue\",\u00a0\"purple\",\u00a0\"yellow\");\n?>"},{"title":"Example #2 array_splice() examples","content":"The following statements change the values of $input\n     the same way:"}]},"array_sum":{"name":"array_sum","parameters":[{"type":"array","name":"$array","description":"The input array."}],"return":{"type":"number","values":[]},"short":"Calculate the sum of values in an array","examples":[{"title":"Example #1 array_sum() examples","content":"<?php\n$a\u00a0=\u00a0array(2,\u00a04,\u00a06,\u00a08);\necho\u00a0\"sum(a)\u00a0=\u00a0\"\u00a0.\u00a0array_sum($a)\u00a0.\u00a0\"\\n\";\n\n$b\u00a0=\u00a0array(\"a\"\u00a0=>\u00a01.2,\u00a0\"b\"\u00a0=>\u00a02.3,\u00a0\"c\"\u00a0=>\u00a03.4);\necho\u00a0\"sum(b)\u00a0=\u00a0\"\u00a0.\u00a0array_sum($b)\u00a0.\u00a0\"\\n\";\n?>"}]},"array_udiff":{"name":"array_udiff","parameters":[{"type":"array","name":"$array1","description":"The first array."},{"type":"array","name":"$array2","description":"The second array."},{"type":"array","name":"$..."},{"type":"callable","name":"$value_compare_func","description":"The callback comparison function.\n\nThe comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"}],"return":{"type":"array","values":[]},"short":"Computes the difference of arrays by using a callback function for data comparison","examples":[{"title":"Example #1 array_udiff() example using stdClass Objects","content":"<?php\n\/\/\u00a0Arrays\u00a0to\u00a0compare\n$array1\u00a0=\u00a0array(new\u00a0stdclass,\u00a0new\u00a0stdclass,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new\u00a0stdclass,\u00a0new\u00a0stdclass,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n\n$array2\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new\u00a0stdclass,\u00a0new\u00a0stdclass,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n\n\/\/\u00a0Set\u00a0some\u00a0properties\u00a0for\u00a0each\u00a0object\n$array1[0]->width\u00a0=\u00a011;\u00a0$array1[0]->height\u00a0=\u00a03;\n$array1[1]->width\u00a0=\u00a07;\u00a0\u00a0$array1[1]->height\u00a0=\u00a01;\n$array1[2]->width\u00a0=\u00a02;\u00a0\u00a0$array1[2]->height\u00a0=\u00a09;\n$array1[3]->width\u00a0=\u00a05;\u00a0\u00a0$array1[3]->height\u00a0=\u00a07;\n\n$array2[0]->width\u00a0=\u00a07;\u00a0\u00a0$array2[0]->height\u00a0=\u00a05;\n$array2[1]->width\u00a0=\u00a09;\u00a0\u00a0$array2[1]->height\u00a0=\u00a02;\n\nfunction\u00a0compare_by_area($a,\u00a0$b)\u00a0{\n\u00a0\u00a0\u00a0\u00a0$areaA\u00a0=\u00a0$a->width\u00a0*\u00a0$a->height;\n\u00a0\u00a0\u00a0\u00a0$areaB\u00a0=\u00a0$b->width\u00a0*\u00a0$b->height;\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0if\u00a0($areaA\u00a0<\u00a0$areaB)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0-1;\n\u00a0\u00a0\u00a0\u00a0}\u00a0elseif\u00a0($areaA\u00a0>\u00a0$areaB)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a01;\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nprint_r(array_udiff($array1,\u00a0$array2,\u00a0'compare_by_area'));\n?>"},{"title":"Example #2 array_udiff() example using DateTime Objects","content":"<?php\nclass\u00a0MyCalendar\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0$free\u00a0=\u00a0array();\n\u00a0\u00a0\u00a0\u00a0public\u00a0$booked\u00a0=\u00a0array();\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct($week\u00a0=\u00a0'now')\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$start\u00a0=\u00a0new\u00a0DateTime($week);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$start->modify('Monday\u00a0this\u00a0week\u00a0midnight');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$end\u00a0=\u00a0clone\u00a0$start;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$end->modify('Friday\u00a0this\u00a0week\u00a0midnight');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$interval\u00a0=\u00a0new\u00a0DateInterval('P1D');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach\u00a0(new\u00a0DatePeriod($start,\u00a0$interval,\u00a0$end)\u00a0as\u00a0$freeTime)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->free[]\u00a0=\u00a0$freeTime;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0bookAppointment(DateTime\u00a0$date,\u00a0$note)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->booked[]\u00a0=\u00a0array('date'\u00a0=>\u00a0$date->modify('midnight'),\u00a0'note'\u00a0=>\u00a0$note);\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0checkAvailability()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0array_udiff($this->free,\u00a0$this->booked,\u00a0array($this,\u00a0'customCompare'));\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0customCompare($free,\u00a0$booked)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(is_array($free))\u00a0$a\u00a0=\u00a0$free['date'];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0$a\u00a0=\u00a0$free;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(is_array($booked))\u00a0$b\u00a0=\u00a0$booked['date'];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0else\u00a0$b\u00a0=\u00a0$booked;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($a\u00a0==\u00a0$b)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0elseif\u00a0($a\u00a0>\u00a0$b)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a01;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0-1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/\u00a0Create\u00a0a\u00a0calendar\u00a0for\u00a0weekly\u00a0appointments\n$myCalendar\u00a0=\u00a0new\u00a0MyCalendar;\n\n\/\/\u00a0Book\u00a0some\u00a0appointments\u00a0for\u00a0this\u00a0week\n$myCalendar->bookAppointment(new\u00a0DateTime('Monday\u00a0this\u00a0week'),\u00a0\"Cleaning\u00a0GoogleGuy's\u00a0apartment.\");\n$myCalendar->bookAppointment(new\u00a0DateTime('Wednesday\u00a0this\u00a0week'),\u00a0\"Going\u00a0on\u00a0a\u00a0snowboarding\u00a0trip.\");\n$myCalendar->bookAppointment(new\u00a0DateTime('Friday\u00a0this\u00a0week'),\u00a0\"Fixing\u00a0buggy\u00a0code.\");\n\n\/\/\u00a0Check\u00a0availability\u00a0of\u00a0days\u00a0by\u00a0comparing\u00a0$booked\u00a0dates\u00a0against\u00a0$free\u00a0dates\necho\u00a0\"I'm\u00a0available\u00a0on\u00a0the\u00a0following\u00a0days\u00a0this\u00a0week...\\n\\n\";\nforeach\u00a0($myCalendar->checkAvailability()\u00a0as\u00a0$free)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$free->format('l'),\u00a0\"\\n\";\u00a0\n}\necho\u00a0\"\\n\\n\";\necho\u00a0\"I'm\u00a0busy\u00a0on\u00a0the\u00a0following\u00a0days\u00a0this\u00a0week...\\n\\n\";\nforeach\u00a0($myCalendar->booked\u00a0as\u00a0$booked)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$booked['date']->format('l'),\u00a0\":\u00a0\",\u00a0$booked['note'],\u00a0\"\\n\";\u00a0\n}\n?>"}]},"array_udiff_assoc":{"name":"array_udiff_assoc","parameters":[{"type":"array","name":"$array1","description":"The first array."},{"type":"array","name":"$array2","description":"The second array."},{"type":"array","name":"$..."},{"type":"callable","name":"$value_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"}],"return":{"type":"array","values":[]},"short":"Computes the difference of arrays with additional index check, compares data by a callback function","examples":[{"title":"Example #1 array_udiff_assoc() example","content":"<?php\nclass\u00a0cr\u00a0{\n\u00a0\u00a0\u00a0\u00a0private\u00a0$priv_member;\n\u00a0\u00a0\u00a0\u00a0function\u00a0cr($val)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->priv_member\u00a0=\u00a0$val;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0comp_func_cr($a,\u00a0$b)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($a->priv_member\u00a0===\u00a0$b->priv_member)\u00a0return\u00a00;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0($a->priv_member\u00a0>\u00a0$b->priv_member)?\u00a01:-1;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$a\u00a0=\u00a0array(\"0.1\"\u00a0=>\u00a0new\u00a0cr(9),\u00a0\"0.5\"\u00a0=>\u00a0new\u00a0cr(12),\u00a00\u00a0=>\u00a0new\u00a0cr(23),\u00a01=>\u00a0new\u00a0cr(4),\u00a02\u00a0=>\u00a0new\u00a0cr(-15),);\n$b\u00a0=\u00a0array(\"0.2\"\u00a0=>\u00a0new\u00a0cr(9),\u00a0\"0.5\"\u00a0=>\u00a0new\u00a0cr(22),\u00a00\u00a0=>\u00a0new\u00a0cr(3),\u00a01=>\u00a0new\u00a0cr(4),\u00a02\u00a0=>\u00a0new\u00a0cr(-15),);\n\n$result\u00a0=\u00a0array_udiff_assoc($a,\u00a0$b,\u00a0array(\"cr\",\u00a0\"comp_func_cr\"));\nprint_r($result);\n?>"}]},"array_udiff_uassoc":{"name":"array_udiff_uassoc","parameters":[{"type":"array","name":"$array1","description":"The first array."},{"type":"array","name":"$array2","description":"The second array."},{"type":"array","name":"$..."},{"type":"callable","name":"$value_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"},{"type":"callable","name":"$key_compare_func","description":"The comparison of keys (indices) is done also by the callback function key_compare_func. This behaviour is unlike what array_udiff_assoc() does, since the latter compares the indices by using an internal function."}],"return":{"type":"array","values":[]},"short":"Computes the difference of arrays with additional index check, compares data and indexes by a callback function","examples":[{"title":"Example #1 array_udiff_uassoc() example","content":"<?php\nclass\u00a0cr\u00a0{\n\u00a0\u00a0\u00a0\u00a0private\u00a0$priv_member;\n\u00a0\u00a0\u00a0\u00a0function\u00a0cr($val)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->priv_member\u00a0=\u00a0$val;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0comp_func_cr($a,\u00a0$b)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($a->priv_member\u00a0===\u00a0$b->priv_member)\u00a0return\u00a00;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0($a->priv_member\u00a0>\u00a0$b->priv_member)?\u00a01:-1;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0comp_func_key($a,\u00a0$b)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($a\u00a0===\u00a0$b)\u00a0return\u00a00;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0($a\u00a0>\u00a0$b)?\u00a01:-1;\n\u00a0\u00a0\u00a0\u00a0}\n}\n$a\u00a0=\u00a0array(\"0.1\"\u00a0=>\u00a0new\u00a0cr(9),\u00a0\"0.5\"\u00a0=>\u00a0new\u00a0cr(12),\u00a00\u00a0=>\u00a0new\u00a0cr(23),\u00a01=>\u00a0new\u00a0cr(4),\u00a02\u00a0=>\u00a0new\u00a0cr(-15),);\n$b\u00a0=\u00a0array(\"0.2\"\u00a0=>\u00a0new\u00a0cr(9),\u00a0\"0.5\"\u00a0=>\u00a0new\u00a0cr(22),\u00a00\u00a0=>\u00a0new\u00a0cr(3),\u00a01=>\u00a0new\u00a0cr(4),\u00a02\u00a0=>\u00a0new\u00a0cr(-15),);\n\n$result\u00a0=\u00a0array_udiff_uassoc($a,\u00a0$b,\u00a0array(\"cr\",\u00a0\"comp_func_cr\"),\u00a0array(\"cr\",\u00a0\"comp_func_key\"));\nprint_r($result);\n?>"}]},"array_uintersect":{"name":"array_uintersect","parameters":[{"type":"array","name":"$array1","description":"The first array."},{"type":"array","name":"$array2","description":"The second array."},{"type":"array","name":"$..."},{"type":"callable","name":"$value_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"}],"return":{"type":"array","values":[]},"short":"Computes the intersection of arrays, compares data by a callback function","examples":[{"title":"Example #1 array_uintersect() example","content":"<?php\n$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");\n$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"GREEN\",\u00a0\"B\"\u00a0=>\u00a0\"brown\",\u00a0\"yellow\",\u00a0\"red\");\n\nprint_r(array_uintersect($array1,\u00a0$array2,\u00a0\"strcasecmp\"));\n?>"}]},"array_uintersect_assoc":{"name":"array_uintersect_assoc","parameters":[{"type":"array","name":"$array1","description":"The first array."},{"type":"array","name":"$array2","description":"The second array."},{"type":"array","name":"$..."},{"type":"callable","name":"$value_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"}],"return":{"type":"array","values":[]},"short":"Computes the intersection of arrays with additional index check, compares data by a callback function","examples":[{"title":"Example #1 array_uintersect_assoc() example","content":"<?php\n$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");\n$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"GREEN\",\u00a0\"B\"\u00a0=>\u00a0\"brown\",\u00a0\"yellow\",\u00a0\"red\");\n\nprint_r(array_uintersect_assoc($array1,\u00a0$array2,\u00a0\"strcasecmp\"));\n?>"}]},"array_uintersect_uassoc":{"name":"array_uintersect_uassoc","parameters":[{"type":"array","name":"$array1","description":"The first array."},{"type":"array","name":"$array2","description":"The second array."},{"type":"array","name":"$..."},{"type":"callable","name":"$value_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"},{"type":"callable","name":"$key_compare_func","description":"Key comparison callback function."}],"return":{"type":"array","values":[]},"short":"Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions","examples":[{"title":"Example #1 array_uintersect_uassoc() example","content":"<?php\n$array1\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"b\"\u00a0=>\u00a0\"brown\",\u00a0\"c\"\u00a0=>\u00a0\"blue\",\u00a0\"red\");\n$array2\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"GREEN\",\u00a0\"B\"\u00a0=>\u00a0\"brown\",\u00a0\"yellow\",\u00a0\"red\");\n\nprint_r(array_uintersect_uassoc($array1,\u00a0$array2,\u00a0\"strcasecmp\",\u00a0\"strcasecmp\"));\n?>"}]},"array_unique":{"name":"array_unique","parameters":[{"type":"array","name":"$array","description":"The input array."},{"type":"int","name":"$sort_flags","default_value":"SORT_STRING","description":"The optional second parameter sort_flags may be used to modify the sorting behavior using these values:\n\nSorting type flags:\n\nSORT_REGULAR - compare items normally (don't change types)\n\n SORT_NUMERIC - compare items numerically\n\n SORT_STRING - compare items as strings\n\n SORT_LOCALE_STRING - compare items as strings, based on the current locale."}],"return":{"type":"array","values":[]},"short":"Removes duplicate values from an array","examples":[{"title":"Example #1 array_unique() example","content":"<?php\n$input\u00a0=\u00a0array(\"a\"\u00a0=>\u00a0\"green\",\u00a0\"red\",\u00a0\"b\"\u00a0=>\u00a0\"green\",\u00a0\"blue\",\u00a0\"red\");\n$result\u00a0=\u00a0array_unique($input);\nprint_r($result);\n?>"},{"title":"Example #2 array_unique() and types","content":"<?php\n$input\u00a0=\u00a0array(4,\u00a0\"4\",\u00a0\"3\",\u00a04,\u00a03,\u00a0\"3\");\n$result\u00a0=\u00a0array_unique($input);\nvar_dump($result);\n?>"}]},"array_unshift":{"name":"array_unshift","parameters":[{"type":"mixed","name":"$value1","description":"First value to prepend."},{"type":"mixed","name":"$..."}],"return":{"type":"int","values":[]},"short":"Prepend one or more elements to the beginning of an array","examples":[{"title":"Example #1 array_unshift() example","content":"<?php\n$queue\u00a0=\u00a0array(\"orange\",\u00a0\"banana\");\narray_unshift($queue,\u00a0\"apple\",\u00a0\"raspberry\");\nprint_r($queue);\n?>"}]},"array_values":{"name":"array_values","parameters":[{"type":"array","name":"$array","description":"The array."}],"return":{"type":"array","values":[]},"short":"Return all the values of an array","examples":[{"title":"Example #1 array_values() example","content":"<?php\n$array\u00a0=\u00a0array(\"size\"\u00a0=>\u00a0\"XL\",\u00a0\"color\"\u00a0=>\u00a0\"gold\");\nprint_r(array_values($array));\n?>"}]},"array_walk":{"name":"array_walk","parameters":[{"type":"callable","name":"$callback","description":"Typically, callback takes on two parameters. The array parameter's value being the first, and the key\/index second.\n\nNote:\n If callback needs to be working with the actual values of the array, specify the first parameter of callback as a reference. Then, any changes made to those elements will be made in the original array itself.\n\nNote:\n Many internal functions (for example strtolower()) will throw a warning if more than the expected number of argument are passed in and are not usable directly as a callback.\n\nOnly the values of the array may potentially be changed; its structure cannot be altered, i.e., the programmer cannot add, unset or reorder elements. If the callback does not respect this requirement, the behavior of this function is undefined, and unpredictable."},{"type":"mixed","name":"$userdata","default_value":"NULL","description":"If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Apply a user supplied function to every member of an array","examples":[{"title":"Example #1 array_walk() example","content":"<?php\n$fruits\u00a0=\u00a0array(\"d\"\u00a0=>\u00a0\"lemon\",\u00a0\"a\"\u00a0=>\u00a0\"orange\",\u00a0\"b\"\u00a0=>\u00a0\"banana\",\u00a0\"c\"\u00a0=>\u00a0\"apple\");\n\nfunction\u00a0test_alter(&$item1,\u00a0$key,\u00a0$prefix)\n{\n\u00a0\u00a0\u00a0\u00a0$item1\u00a0=\u00a0\"$prefix:\u00a0$item1\";\n}\n\nfunction\u00a0test_print($item2,\u00a0$key)\n{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key.\u00a0$item2<br\u00a0\/>\\n\";\n}\n\necho\u00a0\"Before\u00a0...:\\n\";\narray_walk($fruits,\u00a0'test_print');\n\narray_walk($fruits,\u00a0'test_alter',\u00a0'fruit');\necho\u00a0\"...\u00a0and\u00a0after:\\n\";\n\narray_walk($fruits,\u00a0'test_print');\n?>"}]},"array_walk_recursive":{"name":"array_walk_recursive","parameters":[{"type":"callable","name":"$callback","description":"Typically, callback takes on two parameters. The array parameter's value being the first, and the key\/index second.\n\nNote:\n If callback needs to be working with the actual values of the array, specify the first parameter of callback as a reference. Then, any changes made to those elements will be made in the original array itself."},{"type":"mixed","name":"$userdata","default_value":"NULL","description":"If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Apply a user function recursively to every member of an array","examples":[{"title":"Example #1 array_walk_recursive() example","content":"<?php\n$sweet\u00a0=\u00a0array('a'\u00a0=>\u00a0'apple',\u00a0'b'\u00a0=>\u00a0'banana');\n$fruits\u00a0=\u00a0array('sweet'\u00a0=>\u00a0$sweet,\u00a0'sour'\u00a0=>\u00a0'lemon');\n\nfunction\u00a0test_print($item,\u00a0$key)\n{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0holds\u00a0$item\\n\";\n}\n\narray_walk_recursive($fruits,\u00a0'test_print');\n?>"}]},"arsort":{"name":"arsort","parameters":[{"type":"int","name":"$sort_flags","default_value":"SORT_REGULAR","description":"You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array in reverse order and maintain index association","examples":[{"title":"Example #1 arsort() example","content":"<?php\n$fruits\u00a0=\u00a0array(\"d\"\u00a0=>\u00a0\"lemon\",\u00a0\"a\"\u00a0=>\u00a0\"orange\",\u00a0\"b\"\u00a0=>\u00a0\"banana\",\u00a0\"c\"\u00a0=>\u00a0\"apple\");\narsort($fruits);\nforeach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=\u00a0$val\\n\";\n}\n?>"}]},"asin":{"name":"asin","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Arc sine","examples":[]},"asinh":{"name":"asinh","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Inverse hyperbolic sine","examples":[]},"asort":{"name":"asort","parameters":[{"type":"int","name":"$sort_flags","default_value":"SORT_REGULAR","description":"You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array and maintain index association","examples":[{"title":"Example #1 asort() example","content":"<?php\n$fruits\u00a0=\u00a0array(\"d\"\u00a0=>\u00a0\"lemon\",\u00a0\"a\"\u00a0=>\u00a0\"orange\",\u00a0\"b\"\u00a0=>\u00a0\"banana\",\u00a0\"c\"\u00a0=>\u00a0\"apple\");\nasort($fruits);\nforeach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=\u00a0$val\\n\";\n}\n?>"}]},"assert":{"name":"assert","parameters":[{"type":"mixed","name":"$assertion","description":"The assertion. In PHP 5, this must be either a string to be evaluated or a boolean to be tested. In PHP 7, this may also be any expression that returns a value, which will be executed and the result used to indicate whether the assertion succeeded or failed.\n\nWarning\n Using string as the assertion is DEPRECATED as of PHP 7.2."},{"type":"string","name":"$description","description":"An optional description that will be included in the failure message if the assertion fails."},{"type":"Throwable","name":"$exception","description":"In PHP 7, the second parameter can be a Throwable object instead of a descriptive string, in which case this is the object that will be thrown if the assertion fails and the assert.exception configuration directive is enabled."}],"return":{"type":"bool","values":["FALSE","TRUE"]},"short":"Checks if assertion is FALSE","examples":[]},"assert_options":{"name":"assert_options","parameters":[{"type":"int","name":"$what","description":"\n\nAssert Options\n Option INI Setting Default value Description ASSERT_ACTIVE assert.active 1 enable assert() evaluation ASSERT_WARNING assert.warning 1 issue a PHP warning for each failed assertion ASSERT_BAIL assert.bail 0 terminate execution on failed assertions ASSERT_QUIET_EVAL assert.quiet_eval 0\n disable error_reporting during assertion expression evaluation\n ASSERT_CALLBACK assert.callback (NULL) Callback to call on failed assertions"},{"type":"mixed","name":"$value","description":"An optional new value for the option."}],"return":{"type":"mixed","values":["FALSE"]},"short":"Set\/get the various assert flags","examples":[{"title":"Example #1 assert_options() example","content":"<?php\n\/\/\u00a0This\u00a0is\u00a0our\u00a0function\u00a0to\u00a0handle\u00a0\n\/\/\u00a0assert\u00a0failures\nfunction\u00a0assert_failure()\n{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Assert\u00a0failed';\n}\n\n\/\/\u00a0This\u00a0is\u00a0our\u00a0test\u00a0function\nfunction\u00a0test_assert($parameter)\n{\n\u00a0\u00a0\u00a0\u00a0assert(is_bool($parameter));\n}\n\n\/\/\u00a0Set\u00a0our\u00a0assert\u00a0options\nassert_options(ASSERT_ACTIVE,\u00a0\u00a0\u00a0true);\nassert_options(ASSERT_BAIL,\u00a0\u00a0\u00a0\u00a0\u00a0true);\nassert_options(ASSERT_WARNING,\u00a0\u00a0false);\nassert_options(ASSERT_CALLBACK,\u00a0'assert_failure');\n\n\/\/\u00a0Make\u00a0an\u00a0assert\u00a0that\u00a0would\u00a0fail\ntest_assert(1);\n\n\/\/\u00a0This\u00a0is\u00a0never\u00a0reached\u00a0due\u00a0to\u00a0ASSERT_BAIL\u00a0\n\/\/\u00a0being\u00a0true\necho\u00a0'Never\u00a0reached';\n?>"}]},"atan":{"name":"atan","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Arc tangent","examples":[]},"atan2":{"name":"atan2","parameters":[{"type":"float","name":"$y","description":"Dividend parameter"},{"type":"float","name":"$x","description":"Divisor parameter"}],"return":{"type":"float","values":[]},"short":"Arc tangent of two variables","examples":[]},"atanh":{"name":"atanh","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Inverse hyperbolic tangent","examples":[]},"base64_decode":{"name":"base64_decode","parameters":[{"type":"string","name":"$data","description":"The encoded data."},{"type":"bool","name":"$strict","default_value":"FALSE","description":"If the strict parameter is set to TRUE then the base64_decode() function will return FALSE if the input contains character from outside the base64 alphabet. Otherwise invalid characters will be silently discarded."}],"return":{"type":"string","values":["FALSE"]},"short":"Decodes data encoded with MIME base64","examples":[{"title":"Example #1 base64_decode() example","content":"<?php\n$str\u00a0=\u00a0'VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==';\necho\u00a0base64_decode($str);\n?>"}]},"base64_encode":{"name":"base64_encode","parameters":[{"type":"string","name":"$data","description":"The data to encode."}],"return":{"type":"string","values":["FALSE"]},"short":"Encodes data with MIME base64","examples":[{"title":"Example #1 base64_encode() example","content":"<?php\n$str\u00a0=\u00a0'This\u00a0is\u00a0an\u00a0encoded\u00a0string';\necho\u00a0base64_encode($str);\n?>"}]},"base_convert":{"name":"base_convert","parameters":[{"type":"string","name":"$number","description":"The number to convert. Any invalid characters in number are silently ignored."},{"type":"int","name":"$frombase","description":"The base number is in"},{"type":"int","name":"$tobase","description":"The base to convert number to"}],"return":{"type":"string","values":[]},"short":"Convert a number between arbitrary bases","examples":[{"title":"Example #1 base_convert() example","content":"<?php\n$hexadecimal\u00a0=\u00a0'a37334';\necho\u00a0base_convert($hexadecimal,\u00a016,\u00a02);\n?>"}]},"basename":{"name":"basename","parameters":[{"type":"string","name":"$path","description":"A path.\n\nOn Windows, both slash (\/) and backslash (\\) are used as directory separator character. In other environments, it is the forward slash (\/)."},{"type":"string","name":"$suffix","description":"If the name component ends in suffix this will also be cut off."}],"return":{"type":"string","values":[]},"short":"Returns trailing name component of path","examples":[{"title":"Example #1 basename() example","content":"<?php\necho\u00a0\"1)\u00a0\".basename(\"\/etc\/sudoers.d\",\u00a0\".d\").PHP_EOL;\necho\u00a0\"2)\u00a0\".basename(\"\/etc\/sudoers.d\").PHP_EOL;\necho\u00a0\"3)\u00a0\".basename(\"\/etc\/passwd\").PHP_EOL;\necho\u00a0\"4)\u00a0\".basename(\"\/etc\/\").PHP_EOL;\necho\u00a0\"5)\u00a0\".basename(\".\").PHP_EOL;\necho\u00a0\"6)\u00a0\".basename(\"\/\");\n?>"}]},"bin2hex":{"name":"bin2hex","parameters":[{"type":"string","name":"$str","description":"A string."}],"return":{"type":"string","values":[]},"short":"Convert binary data into hexadecimal representation","examples":[]},"bind_textdomain_codeset":{"name":"bind_textdomain_codeset","parameters":[{"type":"string","name":"$domain","description":"The domain"},{"type":"string","name":"$codeset","description":"The code set"}],"return":{"type":"string","values":[]},"short":"Specify the character encoding in which the messages from the DOMAIN message catalog will be returned","examples":[]},"bindec":{"name":"bindec","parameters":[{"type":"string","name":"$binary_string","description":"The binary string to convert"}],"return":{"type":"number","values":[]},"short":"Binary to decimal","examples":[{"title":"Example #1 bindec() example","content":"<?php\necho\u00a0bindec('110011')\u00a0.\u00a0\"\\n\";\necho\u00a0bindec('000110011')\u00a0.\u00a0\"\\n\";\n\necho\u00a0bindec('111');\n?>"},{"title":"Example #2 bindec() interprets input as unsigned integers","content":"<?php\n\/*\n\u00a0*\u00a0The\u00a0lesson\u00a0from\u00a0this\u00a0example\u00a0is\u00a0in\u00a0the\u00a0output\n\u00a0*\u00a0rather\u00a0than\u00a0the\u00a0PHP\u00a0code\u00a0itself.\n\u00a0*\/\n\n$magnitude_lower\u00a0=\u00a0pow(2,\u00a0(PHP_INT_SIZE\u00a0*\u00a08)\u00a0-\u00a02);\np($magnitude_lower\u00a0-\u00a01);\np($magnitude_lower,\u00a0'See\u00a0the\u00a0rollover?\u00a0\u00a0Watch\u00a0it\u00a0next\u00a0time\u00a0around...');\n\np(PHP_INT_MAX,\u00a0'PHP_INT_MAX');\np(~PHP_INT_MAX,\u00a0'interpreted\u00a0to\u00a0be\u00a0one\u00a0more\u00a0than\u00a0PHP_INT_MAX');\n\nif\u00a0(PHP_INT_SIZE\u00a0==\u00a04)\u00a0{\n\u00a0\u00a0\u00a0\u00a0$note\u00a0=\u00a0'interpreted\u00a0to\u00a0be\u00a0the\u00a0largest\u00a0unsigned\u00a0integer';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0$note\u00a0=\u00a0'interpreted\u00a0to\u00a0be\u00a0the\u00a0largest\u00a0unsigned\u00a0integer\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(18446744073709551615)\u00a0but\u00a0skewed\u00a0by\u00a0float\u00a0precision';\n}\np(-1,\u00a0$note);\n\n\nfunction\u00a0p($input,\u00a0$note\u00a0=\u00a0'')\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"input:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$input\\n\";\n\n\u00a0\u00a0\u00a0\u00a0$format\u00a0=\u00a0'%0'\u00a0.\u00a0(PHP_INT_SIZE\u00a0*\u00a08)\u00a0.\u00a0'b';\n\u00a0\u00a0\u00a0\u00a0$bin\u00a0=\u00a0sprintf($format,\u00a0$input);\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"binary:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bin\\n\";\n\n\u00a0\u00a0\u00a0\u00a0ini_set('precision',\u00a020);\u00a0\u00a0\/\/\u00a0For\u00a0readability\u00a0on\u00a064\u00a0bit\u00a0boxes.\n\u00a0\u00a0\u00a0\u00a0$dec\u00a0=\u00a0bindec($bin);\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'bindec():\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0.\u00a0$dec\u00a0.\u00a0\"\\n\";\n\n\u00a0\u00a0\u00a0\u00a0if\u00a0($note)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"NOTE:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$note\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\\n\";\n}\n?>"}]},"bindtextdomain":{"name":"bindtextdomain","parameters":[{"type":"string","name":"$domain","description":"The domain"},{"type":"string","name":"$directory","description":"The directory path"}],"return":{"type":"string","values":[]},"short":"Sets the path for a domain","examples":[{"title":"Example #1 bindtextdomain() example","content":"<?php\n\n$domain\u00a0=\u00a0'myapp';\necho\u00a0bindtextdomain($domain,\u00a0'\/usr\/share\/myapp\/locale');\n\n?>"}]},"boolval":{"name":"boolval","parameters":[{"type":"mixed","name":"$var","description":"The scalar value being converted to a boolean."}],"return":{"type":"bool","values":[]},"short":"Get the boolean value of a variable","examples":[{"title":"Example #1 boolval() examples","content":"<?php\necho\u00a0'0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'.(boolval(0)\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\necho\u00a0'42:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'.(boolval(42)\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\necho\u00a0'0.0:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'.(boolval(0.0)\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\necho\u00a0'4.2:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'.(boolval(4.2)\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\necho\u00a0'\"\":\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'.(boolval(\"\")\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\necho\u00a0'\"string\":\u00a0'.(boolval(\"string\")\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\necho\u00a0'\"0\":\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'.(boolval(\"0\")\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\necho\u00a0'\"1\":\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'.(boolval(\"1\")\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\necho\u00a0'[1,\u00a02]:\u00a0\u00a0\u00a0'.(boolval([1,\u00a02])\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\necho\u00a0'[]:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'.(boolval([])\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\necho\u00a0'stdClass:\u00a0'.(boolval(new\u00a0stdClass)\u00a0?\u00a0'true'\u00a0:\u00a0'false').\"\\n\";\n?>"}]},"cal_days_in_month":{"name":"cal_days_in_month","parameters":[{"type":"int","name":"$calendar","description":"Calendar to use for calculation"},{"type":"int","name":"$month","description":"Month in the selected calendar"},{"type":"int","name":"$year","description":"Year in the selected calendar"}],"return":{"type":"int","values":[]},"short":"Return the number of days in a month for a given year and calendar","examples":[{"title":"Example #1 cal_days_in_month() example","content":"<?php\n$number\u00a0=\u00a0cal_days_in_month(CAL_GREGORIAN,\u00a08,\u00a02003);\u00a0\/\/\u00a031\necho\u00a0\"There\u00a0were\u00a0{$number}\u00a0days\u00a0in\u00a0August\u00a02003\";\n?>"}]},"cal_from_jd":{"name":"cal_from_jd","parameters":[{"type":"int","name":"$jd","description":"Julian day as integer"},{"type":"int","name":"$calendar","description":"Calendar to convert to"}],"return":{"type":"array","values":[]},"short":"Converts from Julian Day Count to a supported calendar","examples":[{"title":"Example #1 cal_from_jd() example","content":"<?php\n$today\u00a0=\u00a0unixtojd(mktime(0,\u00a00,\u00a00,\u00a08,\u00a016,\u00a02003));\nprint_r(cal_from_jd($today,\u00a0CAL_GREGORIAN));\n?>"}]},"cal_info":{"name":"cal_info","parameters":[{"type":"int","name":"$calendar","default_value":"-1","description":"Calendar to return information for. If no calendar is specified information about all calendars is returned."}],"return":{"type":"array","values":[]},"short":"Returns information about a particular calendar","examples":[{"title":"Example #1 cal_info() example","content":"<?php\n$info\u00a0=\u00a0cal_info(0);\nprint_r($info);\n?>"}]},"cal_to_jd":{"name":"cal_to_jd","parameters":[{"type":"int","name":"$calendar","description":"Calendar to convert from, one of CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH or CAL_FRENCH."},{"type":"int","name":"$month","description":"The month as a number, the valid range depends on the calendar"},{"type":"int","name":"$day","description":"The day as a number, the valid range depends on the calendar"},{"type":"int","name":"$year","description":"The year as a number, the valid range depends on the calendar"}],"return":{"type":"int","values":[]},"short":"Converts from a supported calendar to Julian Day Count","examples":[]},"call_user_func":{"name":"call_user_func","parameters":[{"type":"callable","name":"$callback","description":"The callable to be called."},{"type":"mixed","name":"$parameter","description":"Zero or more parameters to be passed to the callback.\n\nNote:\n Note that the parameters for call_user_func() are not passed by reference.\n Example #1 call_user_func() example and references\n\n <?php error_reporting(E_ALL); function\u00a0increment(&$var) { \u00a0\u00a0\u00a0\u00a0$var++; }\n $a\u00a0=\u00a00; call_user_func('increment',\u00a0$a); echo\u00a0$a.\"\\n\";\n \/\/\u00a0You\u00a0can\u00a0use\u00a0this\u00a0instead call_user_func_array('increment',\u00a0array(&$a)); echo\u00a0$a.\"\\n\"; ?>\n\n\n\n The above example will output:\n\n 0 1"},{"type":"mixed","name":"$..."}],"return":{"type":"mixed","values":[]},"short":"Call the callback given by the first parameter","examples":[{"title":"Example #2 call_user_func() example","content":"<?php\nfunction\u00a0barber($type)\n{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"You\u00a0wanted\u00a0a\u00a0$type\u00a0haircut,\u00a0no\u00a0problem\\n\";\n}\ncall_user_func('barber',\u00a0\"mushroom\");\ncall_user_func('barber',\u00a0\"shave\");\n?>"},{"title":"Example #3 call_user_func() using namespace name","content":"<?php\n\nnamespace\u00a0Foobar;\n\nclass\u00a0Foo\u00a0{\n\u00a0\u00a0\u00a0\u00a0static\u00a0public\u00a0function\u00a0test()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print\u00a0\"Hello\u00a0world!\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\ncall_user_func(__NAMESPACE__\u00a0.'\\Foo::test');\u00a0\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0\ncall_user_func(array(__NAMESPACE__\u00a0.'\\Foo',\u00a0'test'));\u00a0\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0\n\n?>"},{"title":"Example #4 Using a class method with call_user_func()","content":"<?php\n\nclass\u00a0myclass\u00a0{\n\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0say_hello()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Hello!\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$classname\u00a0=\u00a0\"myclass\";\n\ncall_user_func(array($classname,\u00a0'say_hello'));\ncall_user_func($classname\u00a0.'::say_hello');\u00a0\/\/\u00a0As\u00a0of\u00a05.2.3\n\n$myobject\u00a0=\u00a0new\u00a0myclass();\n\ncall_user_func(array($myobject,\u00a0'say_hello'));\n\n?>"},{"title":"Example #5 Using lambda function with call_user_func()","content":"<?php\ncall_user_func(function($arg)\u00a0{\u00a0print\u00a0\"[$arg]\\n\";\u00a0},\u00a0'test');\u00a0\/*\u00a0As\u00a0of\u00a0PHP\u00a05.3.0\u00a0*\/\n?>"}]},"call_user_func_array":{"name":"call_user_func_array","parameters":[{"type":"callable","name":"$callback","description":"The callable to be called."},{"type":"array","name":"$param_arr","description":"The parameters to be passed to the callback, as an indexed array."}],"return":{"type":"mixed","values":["FALSE"]},"short":"Call a callback with an array of parameters","examples":[{"title":"Example #1 call_user_func_array() example","content":"<?php\nfunction\u00a0foobar($arg,\u00a0$arg2)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0__FUNCTION__,\u00a0\"\u00a0got\u00a0$arg\u00a0and\u00a0$arg2\\n\";\n}\nclass\u00a0foo\u00a0{\n\u00a0\u00a0\u00a0\u00a0function\u00a0bar($arg,\u00a0$arg2)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0__METHOD__,\u00a0\"\u00a0got\u00a0$arg\u00a0and\u00a0$arg2\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\n\/\/\u00a0Call\u00a0the\u00a0foobar()\u00a0function\u00a0with\u00a02\u00a0arguments\ncall_user_func_array(\"foobar\",\u00a0array(\"one\",\u00a0\"two\"));\n\n\/\/\u00a0Call\u00a0the\u00a0$foo->bar()\u00a0method\u00a0with\u00a02\u00a0arguments\n$foo\u00a0=\u00a0new\u00a0foo;\ncall_user_func_array(array($foo,\u00a0\"bar\"),\u00a0array(\"three\",\u00a0\"four\"));\n?>"},{"title":"Example #2 call_user_func_array() using namespace name","content":"<?php\n\nnamespace\u00a0Foobar;\n\nclass\u00a0Foo\u00a0{\n\u00a0\u00a0\u00a0\u00a0static\u00a0public\u00a0function\u00a0test($name)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print\u00a0\"Hello\u00a0{$name}!\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0\ncall_user_func_array(__NAMESPACE__\u00a0.'\\Foo::test',\u00a0array('Hannes'));\n\n\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0\ncall_user_func_array(array(__NAMESPACE__\u00a0.'\\Foo',\u00a0'test'),\u00a0array('Philip'));\n\n?>"},{"title":"Example #3 Using lambda function","content":"<?php\n\n$func\u00a0=\u00a0function($arg1,\u00a0$arg2)\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0$arg1\u00a0*\u00a0$arg2;\n};\n\nvar_dump(call_user_func_array($func,\u00a0array(2,\u00a04)));\u00a0\/*\u00a0As\u00a0of\u00a0PHP\u00a05.3.0\u00a0*\/\n\n?>"},{"title":"Example #4 Passing values by reference","content":"<?php\n\nfunction\u00a0mega(&$a){\n\u00a0\u00a0\u00a0\u00a0$a\u00a0=\u00a055;\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"function\u00a0mega\u00a0\\$a=$a\\n\";\n}\n$bar\u00a0=\u00a077;\ncall_user_func_array('mega',array(&$bar));\necho\u00a0\"global\u00a0\\$bar=$bar\\n\";\n\n?>"}]},"ceil":{"name":"ceil","parameters":[{"type":"float","name":"$value","description":"The value to round"}],"return":{"type":"float","values":[]},"short":"Round fractions up","examples":[{"title":"Example #1 ceil() example","content":"<?php\necho\u00a0ceil(4.3);\u00a0\u00a0\u00a0\u00a0\/\/\u00a05\necho\u00a0ceil(9.999);\u00a0\u00a0\/\/\u00a010\necho\u00a0ceil(-3.14);\u00a0\u00a0\/\/\u00a0-3\n?>"}]},"chdir":{"name":"chdir","parameters":[{"type":"string","name":"$directory","description":"The new current directory"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Change directory","examples":[{"title":"Example #1 chdir() example","content":"<?php\n\n\/\/\u00a0current\u00a0directory\necho\u00a0getcwd()\u00a0.\u00a0\"\\n\";\n\nchdir('public_html');\n\n\/\/\u00a0current\u00a0directory\necho\u00a0getcwd()\u00a0.\u00a0\"\\n\";\n\n?>"}]},"checkdate":{"name":"checkdate","parameters":[{"type":"int","name":"$month","description":"The month is between 1 and 12 inclusive."},{"type":"int","name":"$day","description":"The day is within the allowed number of days for the given month.  Leap years are taken into consideration."},{"type":"int","name":"$year","description":"The year is between 1 and 32767 inclusive."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Validate a Gregorian date","examples":[{"title":"Example #1 checkdate() example","content":"<?php\nvar_dump(checkdate(12,\u00a031,\u00a02000));\nvar_dump(checkdate(2,\u00a029,\u00a02001));\n?>"}]},"checkdnsrr":{"name":"checkdnsrr","parameters":[{"type":"string","name":"$host","description":"host may either be the IP address in dotted-quad notation or the host name."},{"type":"string","name":"$type","default_value":"\"MX\"","description":"type may be any one of: A, MX, NS, SOA, PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check DNS records corresponding to a given Internet host name or IP address","examples":[]},"chgrp":{"name":"chgrp","parameters":[{"type":"string","name":"$filename","description":"Path to the file."},{"type":"mixed","name":"$group","description":"A group name or number."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Changes file group","examples":[{"title":"Example #1 Changing a file's group","content":"<?php\n$filename\u00a0=\u00a0'shared_file.txt';\n$format\u00a0=\u00a0\"%s's\u00a0Group\u00a0ID\u00a0@\u00a0%s:\u00a0%d\\n\";\nprintf($format,\u00a0$filename,\u00a0date('r'),\u00a0filegroup($filename));\nchgrp($filename,\u00a08);\nclearstatcache();\u00a0\/\/\u00a0do\u00a0not\u00a0cache\u00a0filegroup()\u00a0results\nprintf($format,\u00a0$filename,\u00a0date('r'),\u00a0filegroup($filename));\n?>"}]},"chmod":{"name":"chmod","parameters":[{"type":"string","name":"$filename","description":"Path to the file."},{"type":"int","name":"$mode","description":"Note that mode is not automatically assumed to be an octal value, so to ensure the expected operation, you need to prefix mode with a zero (0). Strings such as \"g+w\" will not work properly.\n\n\n\n<?php chmod(\"\/somedir\/somefile\",\u00a0755);\u00a0\u00a0\u00a0\/\/\u00a0decimal;\u00a0probably\u00a0incorrect chmod(\"\/somedir\/somefile\",\u00a0\"u+rwx,go+rx\");\u00a0\/\/\u00a0string;\u00a0incorrect chmod(\"\/somedir\/somefile\",\u00a00755);\u00a0\u00a0\/\/\u00a0octal;\u00a0correct\u00a0value\u00a0of\u00a0mode ?>\n\nThe mode parameter consists of three octal number components specifying access restrictions for the owner, the user group in which the owner is in, and to everybody else in this order. One component can be computed by adding up the needed permissions for that target user base. Number 1 means that you grant execute rights, number 2 means that you make the file writeable, number 4 means that you make the file readable. Add up these numbers to specify needed rights. You can also read more about modes on Unix systems with 'man 1 chmod' and 'man 2 chmod'.\n\n\n\n<?php \/\/\u00a0Read\u00a0and\u00a0write\u00a0for\u00a0owner,\u00a0nothing\u00a0for\u00a0everybody\u00a0else chmod(\"\/somedir\/somefile\",\u00a00600);\n \/\/\u00a0Read\u00a0and\u00a0write\u00a0for\u00a0owner,\u00a0read\u00a0for\u00a0everybody\u00a0else chmod(\"\/somedir\/somefile\",\u00a00644);\n \/\/\u00a0Everything\u00a0for\u00a0owner,\u00a0read\u00a0and\u00a0execute\u00a0for\u00a0others chmod(\"\/somedir\/somefile\",\u00a00755);\n \/\/\u00a0Everything\u00a0for\u00a0owner,\u00a0read\u00a0and\u00a0execute\u00a0for\u00a0owner's\u00a0group chmod(\"\/somedir\/somefile\",\u00a00750); ?>"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Changes file mode","examples":[]},"chop":{"name":"chop","parameters":[],"return":{"type":"","values":[]},"short":"Alias of rtrim()","examples":[]},"chown":{"name":"chown","parameters":[{"type":"string","name":"$filename","description":"Path to the file."},{"type":"mixed","name":"$user","description":"A user name or number."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Changes file owner","examples":[{"title":"Example #1 Simple chown() usage","content":"<?php\n\n\/\/\u00a0File\u00a0name\u00a0and\u00a0username\u00a0to\u00a0use\n$file_name=\u00a0\"foo.php\";\n$path\u00a0=\u00a0\"\/home\/sites\/php.net\/public_html\/sandbox\/\"\u00a0.\u00a0$file_name\u00a0;\n$user_name\u00a0=\u00a0\"root\";\n\n\/\/\u00a0Set\u00a0the\u00a0user\nchown($path,\u00a0$user_name);\n\n\/\/\u00a0Check\u00a0the\u00a0result\n$stat\u00a0=\u00a0stat($path);\nprint_r(posix_getpwuid($stat['uid']));\n\n?>"}]},"chr":{"name":"chr","parameters":[{"type":"int","name":"$ascii","description":"The extended ASCII code.\n\nValues outside the valid range (0..255) will be bitwise and'ed with 255, which is equivalent to the following algorithm:\n\nwhile\u00a0($ascii\u00a0<\u00a00)\u00a0{ \u00a0\u00a0\u00a0\u00a0$ascii\u00a0+=\u00a0256; } $ascii\u00a0%=\u00a0256;"}],"return":{"type":"string","values":[]},"short":"Return a specific character","examples":[{"title":"Example #1 chr() example","content":"<?php\n$str\u00a0=\u00a0\"The\u00a0string\u00a0ends\u00a0in\u00a0escape:\u00a0\";\n$str\u00a0.=\u00a0chr(27);\u00a0\/*\u00a0add\u00a0an\u00a0escape\u00a0character\u00a0at\u00a0the\u00a0end\u00a0of\u00a0$str\u00a0*\/\n\n\/*\u00a0Often\u00a0this\u00a0is\u00a0more\u00a0useful\u00a0*\/\n\n$str\u00a0=\u00a0sprintf(\"The\u00a0string\u00a0ends\u00a0in\u00a0escape:\u00a0%c\",\u00a027);\n?>"},{"title":"Example #2 Overflow behavior","content":"<?php\necho\u00a0chr(-159),\u00a0chr(833),\u00a0PHP_EOL;\n?>"}]},"chroot":{"name":"chroot","parameters":[{"type":"string","name":"$directory","description":"The path to change the root directory to."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Change the root directory","examples":[{"title":"Example #1 chroot() example","content":"<?php\nchroot(\"\/path\/to\/your\/chroot\/\");\necho\u00a0getcwd();\n?>"}]},"chunk_split":{"name":"chunk_split","parameters":[{"type":"string","name":"$body","description":"The string to be chunked."},{"type":"int","name":"$chunklen","default_value":"76","description":"The chunk length."},{"type":"string","name":"$end","default_value":"\"\\r\\n\"","description":"The line ending sequence."}],"return":{"type":"string","values":[]},"short":"Split a string into smaller chunks","examples":[{"title":"Example #1 chunk_split() example","content":"<?php\n\/\/\u00a0format\u00a0$data\u00a0using\u00a0RFC\u00a02045\u00a0semantics\n$new_string\u00a0=\u00a0chunk_split(base64_encode($data));\n?>"}]},"class_alias":{"name":"class_alias","parameters":[{"type":"string","name":"$original","description":"The original class."},{"type":"string","name":"$alias","description":"The alias name for the class."},{"type":"bool","name":"$autoload","default_value":"TRUE","description":"Whether to autoload if the original class is not found."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Creates an alias for a class","examples":[{"title":"Example #1 class_alias() example","content":"<?php\n\nclass\u00a0foo\u00a0{\u00a0}\n\nclass_alias('foo',\u00a0'bar');\n\n$a\u00a0=\u00a0new\u00a0foo;\n$b\u00a0=\u00a0new\u00a0bar;\n\n\/\/\u00a0the\u00a0objects\u00a0are\u00a0the\u00a0same\nvar_dump($a\u00a0==\u00a0$b,\u00a0$a\u00a0===\u00a0$b);\nvar_dump($a\u00a0instanceof\u00a0$b);\n\n\/\/\u00a0the\u00a0classes\u00a0are\u00a0the\u00a0same\nvar_dump($a\u00a0instanceof\u00a0foo);\nvar_dump($a\u00a0instanceof\u00a0bar);\n\nvar_dump($b\u00a0instanceof\u00a0foo);\nvar_dump($b\u00a0instanceof\u00a0bar);\n\n?>"}]},"class_exists":{"name":"class_exists","parameters":[{"type":"string","name":"$class_name","description":"The class name. The name is matched in a case-insensitive manner."},{"type":"bool","name":"$autoload","default_value":"TRUE","description":"Whether or not to call __autoload by default."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if the class has been defined","examples":[{"title":"Example #1 class_exists() example","content":"<?php\n\/\/\u00a0Check\u00a0that\u00a0the\u00a0class\u00a0exists\u00a0before\u00a0trying\u00a0to\u00a0use\u00a0it\nif\u00a0(class_exists('MyClass'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$myclass\u00a0=\u00a0new\u00a0MyClass();\n}\n\n?>"},{"title":"Example #2 autoload parameter example","content":"<?php\nfunction\u00a0__autoload($class)\n{\n\u00a0\u00a0\u00a0\u00a0include($class\u00a0.\u00a0'.php');\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Check\u00a0to\u00a0see\u00a0whether\u00a0the\u00a0include\u00a0declared\u00a0the\u00a0class\n\u00a0\u00a0\u00a0\u00a0if\u00a0(!class_exists($class,\u00a0false))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0trigger_error(\"Unable\u00a0to\u00a0load\u00a0class:\u00a0$class\",\u00a0E_USER_WARNING);\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nif\u00a0(class_exists('MyClass'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$myclass\u00a0=\u00a0new\u00a0MyClass();\n}\n\n?>"}]},"class_implements":{"name":"class_implements","parameters":[{"type":"mixed","name":"$class","description":"An object (class instance) or a string (class or interface name)."},{"type":"bool","name":"$autoload","default_value":"TRUE","description":"Whether to allow this function to load the class automatically through the __autoload() magic method."}],"return":{"type":"array","values":["FALSE"]},"short":"\n   Return the interfaces which are implemented by the given class or interface\n  ","examples":[{"title":"Example #1 class_implements() example","content":"<?php\n\ninterface\u00a0foo\u00a0{\u00a0}\nclass\u00a0bar\u00a0implements\u00a0foo\u00a0{}\n\nprint_r(class_implements(new\u00a0bar));\n\n\/\/\u00a0since\u00a0PHP\u00a05.1.0\u00a0you\u00a0may\u00a0also\u00a0specify\u00a0the\u00a0parameter\u00a0as\u00a0a\u00a0string\nprint_r(class_implements('bar'));\n\n\nfunction\u00a0__autoload($class_name)\u00a0{\n\u00a0\u00a0\u00a0require_once\u00a0$class_name\u00a0.\u00a0'.php';\n}\n\n\/\/\u00a0use\u00a0__autoload\u00a0to\u00a0load\u00a0the\u00a0'not_loaded'\u00a0class\nprint_r(class_implements('not_loaded',\u00a0true));\n\n?>"}]},"class_parents":{"name":"class_parents","parameters":[{"type":"mixed","name":"$class","description":"An object (class instance) or a string (class name)."},{"type":"bool","name":"$autoload","default_value":"TRUE","description":"Whether to allow this function to load the class automatically through the __autoload() magic method."}],"return":{"type":"array","values":["FALSE"]},"short":"\n   Return the parent classes of the given class\n  ","examples":[{"title":"Example #1 class_parents() example","content":"<?php\n\nclass\u00a0foo\u00a0{\u00a0}\nclass\u00a0bar\u00a0extends\u00a0foo\u00a0{}\n\nprint_r(class_parents(new\u00a0bar));\n\n\/\/\u00a0since\u00a0PHP\u00a05.1.0\u00a0you\u00a0may\u00a0also\u00a0specify\u00a0the\u00a0parameter\u00a0as\u00a0a\u00a0string\nprint_r(class_parents('bar'));\n\n\nfunction\u00a0__autoload($class_name)\u00a0{\n\u00a0\u00a0\u00a0require_once\u00a0$class_name\u00a0.\u00a0'.php';\n}\n\n\/\/\u00a0use\u00a0__autoload\u00a0to\u00a0load\u00a0the\u00a0'not_loaded'\u00a0class\nprint_r(class_parents('not_loaded',\u00a0true));\n?>"}]},"class_uses":{"name":"class_uses","parameters":[{"type":"mixed","name":"$class","description":"An object (class instance) or a string (class name)."},{"type":"bool","name":"$autoload","default_value":"TRUE","description":"Whether to allow this function to load the class automatically through the __autoload() magic method."}],"return":{"type":"array","values":["FALSE"]},"short":"\n   Return the traits used by the given class\n  ","examples":[{"title":"Example #1 class_uses() example","content":"<?php\n\ntrait\u00a0foo\u00a0{\u00a0}\nclass\u00a0bar\u00a0{\n\u00a0\u00a0use\u00a0foo;\n}\n\nprint_r(class_uses(new\u00a0bar));\n\nprint_r(class_uses('bar'));\n\nfunction\u00a0__autoload($class_name)\u00a0{\n\u00a0\u00a0\u00a0require_once\u00a0$class_name\u00a0.\u00a0'.php';\n}\n\n\/\/\u00a0use\u00a0__autoload\u00a0to\u00a0load\u00a0the\u00a0'not_loaded'\u00a0class\nprint_r(class_uses('not_loaded',\u00a0true));\n\n?>"}]},"clearstatcache":{"name":"clearstatcache","parameters":[{"type":"bool","name":"$clear_realpath_cache","default_value":"FALSE","description":"Whether to clear the realpath cache or not."},{"type":"string","name":"$filename","description":"Clear the realpath and the stat cache for a specific filename only; only used if clear_realpath_cache is TRUE."}],"return":{"type":"void","values":[]},"short":"Clears file status cache","examples":[{"title":"Example #1 clearstatcache() example","content":"<?php\n$file\u00a0=\u00a0'output_log.txt';\n\nfunction\u00a0get_owner($file)\n{\n\u00a0\u00a0\u00a0\u00a0$stat\u00a0=\u00a0stat($file);\n\u00a0\u00a0\u00a0\u00a0$user\u00a0=\u00a0posix_getpwuid($stat['uid']);\n\u00a0\u00a0\u00a0\u00a0return\u00a0$user['name'];\n}\n\n$format\u00a0=\u00a0\"UID\u00a0@\u00a0%s:\u00a0%s\\n\";\n\nprintf($format,\u00a0date('r'),\u00a0get_owner($file));\n\nchown($file,\u00a0'ross');\nprintf($format,\u00a0date('r'),\u00a0get_owner($file));\n\nclearstatcache();\nprintf($format,\u00a0date('r'),\u00a0get_owner($file));\n?>"}]},"cli_get_process_title":{"name":"cli_get_process_title","parameters":[],"return":{"type":"string","values":["NULL"]},"short":"Returns the current process title","examples":[{"title":"Example #1 cli_get_process_title() example","content":"<?php\necho\u00a0\"Process\u00a0title:\u00a0\"\u00a0.\u00a0cli_get_process_title()\u00a0.\u00a0\"\\n\";\n?>"}]},"cli_set_process_title":{"name":"cli_set_process_title","parameters":[{"type":"string","name":"$title","description":"The new title."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sets the process title","examples":[{"title":"Example #1 cli_set_process_title() example","content":"<?php\n$title\u00a0=\u00a0\"My\u00a0Amazing\u00a0PHP\u00a0Script\";\n$pid\u00a0=\u00a0getmypid();\u00a0\/\/\u00a0you\u00a0can\u00a0use\u00a0this\u00a0to\u00a0see\u00a0your\u00a0process\u00a0title\u00a0in\u00a0ps\n\nif\u00a0(!cli_set_process_title($title))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0set\u00a0process\u00a0title\u00a0for\u00a0PID\u00a0$pid...\\n\";\n\u00a0\u00a0\u00a0\u00a0exit(1);\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0process\u00a0title\u00a0'$title'\u00a0for\u00a0PID\u00a0$pid\u00a0has\u00a0been\u00a0set\u00a0for\u00a0your\u00a0process!\\n\";\n\u00a0\u00a0\u00a0\u00a0sleep(5);\n}\n?>"}]},"closedir":{"name":"closedir","parameters":[{"type":"resource","name":"$dir_handle","description":"The directory handle resource previously opened with opendir(). If the directory handle is not specified, the last link opened by opendir() is assumed."}],"return":{"type":"void","values":[]},"short":"Close directory handle","examples":[{"title":"Example #1 closedir() example","content":"<?php\n$dir\u00a0=\u00a0\"\/etc\/php5\/\";\n\n\/\/\u00a0Open\u00a0a\u00a0known\u00a0directory,\u00a0read\u00a0directory\u00a0into\u00a0variable\u00a0and\u00a0then\u00a0close\nif\u00a0(is_dir($dir))\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0($dh\u00a0=\u00a0opendir($dir))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$directory\u00a0=\u00a0readdir($dh);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0closedir($dh);\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"closelog":{"name":"closelog","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Close connection to system logger","examples":[]},"compact":{"name":"compact","parameters":[{"type":"mixed","name":"$varname1","description":"compact() takes a variable number of parameters. Each parameter can be either a string containing the name of the variable, or an array of variable names.  The array can contain other arrays of variable names inside it; compact() handles it recursively."},{"type":"mixed","name":"$..."}],"return":{"type":"array","values":[]},"short":"Create array containing variables and their values","examples":[{"title":"Example #1 compact() example","content":"<?php\n$city\u00a0\u00a0=\u00a0\"San\u00a0Francisco\";\n$state\u00a0=\u00a0\"CA\";\n$event\u00a0=\u00a0\"SIGGRAPH\";\n\n$location_vars\u00a0=\u00a0array(\"city\",\u00a0\"state\");\n\n$result\u00a0=\u00a0compact(\"event\",\u00a0\"nothing_here\",\u00a0$location_vars);\nprint_r($result);\n?>"}]},"connection_aborted":{"name":"connection_aborted","parameters":[],"return":{"type":"int","values":[]},"short":"Check whether client disconnected","examples":[]},"connection_status":{"name":"connection_status","parameters":[],"return":{"type":"int","values":[]},"short":"Returns connection status bitfield","examples":[]},"constant":{"name":"constant","parameters":[{"type":"string","name":"$name","description":"The constant name."}],"return":{"type":"mixed","values":["NULL"]},"short":"Returns the value of a constant","examples":[{"title":"Example #1 constant() example","content":"<?php\n\ndefine(\"MAXSIZE\",\u00a0100);\n\necho\u00a0MAXSIZE;\necho\u00a0constant(\"MAXSIZE\");\u00a0\/\/\u00a0same\u00a0thing\u00a0as\u00a0the\u00a0previous\u00a0line\n\n\ninterface\u00a0bar\u00a0{\n\u00a0\u00a0\u00a0\u00a0const\u00a0test\u00a0=\u00a0'foobar!';\n}\n\nclass\u00a0foo\u00a0{\n\u00a0\u00a0\u00a0\u00a0const\u00a0test\u00a0=\u00a0'foobar!';\n}\n\n$const\u00a0=\u00a0'test';\n\nvar_dump(constant('bar::'.\u00a0$const));\u00a0\/\/\u00a0string(7)\u00a0\"foobar!\"\nvar_dump(constant('foo::'.\u00a0$const));\u00a0\/\/\u00a0string(7)\u00a0\"foobar!\"\n\n?>"}]},"convert_cyr_string":{"name":"convert_cyr_string","parameters":[{"type":"string","name":"$str","description":"The string to be converted."},{"type":"string","name":"$from","description":"The source Cyrillic character set, as a single character."},{"type":"string","name":"$to","description":"The target Cyrillic character set, as a single character."}],"return":{"type":"string","values":[]},"short":"Convert from one Cyrillic character set to another","examples":[]},"convert_uudecode":{"name":"convert_uudecode","parameters":[{"type":"string","name":"$data","description":"The uuencoded data."}],"return":{"type":"string","values":["FALSE"]},"short":"Decode a uuencoded string","examples":[{"title":"Example #1 convert_uudecode() example","content":"<?php\n\/*\u00a0Can\u00a0you\u00a0imagine\u00a0what\u00a0this\u00a0will\u00a0print?\u00a0:)\u00a0*\/\necho\u00a0convert_uudecode(\"+22!L;W9E(%!(4\\\"$`\\n`\");\n?>"}]},"convert_uuencode":{"name":"convert_uuencode","parameters":[{"type":"string","name":"$data","description":"The data to be encoded."}],"return":{"type":"string","values":["FALSE"]},"short":"Uuencode a string","examples":[{"title":"Example #1 convert_uuencode() example","content":"<?php\n$some_string\u00a0=\u00a0\"test\\ntext\u00a0text\\r\\n\";\n\necho\u00a0convert_uuencode($some_string);\n?>"}]},"copy":{"name":"copy","parameters":[{"type":"string","name":"$source","description":"Path to the source file."},{"type":"string","name":"$dest","description":"The destination path. If dest is a URL, the copy operation may fail if the wrapper does not support overwriting of existing files.\n\nWarning\n If the destination file already exists, it will be overwritten."},{"type":"resource","name":"$context","description":"A valid context resource created with stream_context_create()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Copies file","examples":[{"title":"Example #1 copy() example","content":"<?php\n$file\u00a0=\u00a0'example.txt';\n$newfile\u00a0=\u00a0'example.txt.bak';\n\nif\u00a0(!copy($file,\u00a0$newfile))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"failed\u00a0to\u00a0copy\u00a0$file...\\n\";\n}\n?>"}]},"cos":{"name":"cos","parameters":[{"type":"float","name":"$arg","description":"An angle in radians"}],"return":{"type":"float","values":[]},"short":"Cosine","examples":[{"title":"Example #1 cos() example","content":"<?php\n\necho\u00a0cos(M_PI);\u00a0\/\/\u00a0-1\n\n?>"}]},"cosh":{"name":"cosh","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Hyperbolic cosine","examples":[]},"count":{"name":"count","parameters":[{"type":"mixed","name":"$array_or_countable","description":"An array or Countable object."},{"type":"int","name":"$mode","default_value":"COUNT_NORMAL","description":"If the optional mode parameter is set to COUNT_RECURSIVE (or 1), count() will recursively count the array.  This is particularly useful for counting all the elements of a multidimensional array.\n\nCaution\n count() can detect recursion to avoid an infinite loop, but will emit an E_WARNING every time it does (in case the array contains itself more than once) and return a count higher than may be expected."}],"return":{"type":"int","values":["NULL"]},"short":"Count all elements in an array, or something in an object","examples":[{"title":"Example #1 count() example","content":"<?php\n$a[0]\u00a0=\u00a01;\n$a[1]\u00a0=\u00a03;\n$a[2]\u00a0=\u00a05;\nvar_dump(count($a));\n\n$b[0]\u00a0\u00a0=\u00a07;\n$b[5]\u00a0\u00a0=\u00a09;\n$b[10]\u00a0=\u00a011;\nvar_dump(count($b));\n\nvar_dump(count(null));\n\nvar_dump(count(false));\n?>"},{"title":"Example #2 Recursive count() example","content":"<?php\n$food\u00a0=\u00a0array('fruits'\u00a0=>\u00a0array('orange',\u00a0'banana',\u00a0'apple'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'veggie'\u00a0=>\u00a0array('carrot',\u00a0'collard',\u00a0'pea'));\n\n\/\/\u00a0recursive\u00a0count\necho\u00a0count($food,\u00a0COUNT_RECURSIVE);\u00a0\/\/\u00a0output\u00a08\n\n\/\/\u00a0normal\u00a0count\necho\u00a0count($food);\u00a0\/\/\u00a0output\u00a02\n\n?>"}]},"count_chars":{"name":"count_chars","parameters":[{"type":"string","name":"$string","description":"The examined string."},{"type":"int","name":"$mode","default_value":"0","description":"See return values."}],"return":{"type":"mixed","values":[]},"short":"Return information about characters used in a string","examples":[{"title":"Example #1 count_chars() example","content":"<?php\n$data\u00a0=\u00a0\"Two\u00a0Ts\u00a0and\u00a0one\u00a0F.\";\n\nforeach\u00a0(count_chars($data,\u00a01)\u00a0as\u00a0$i\u00a0=>\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0were\u00a0$val\u00a0instance(s)\u00a0of\u00a0\\\"\"\u00a0,\u00a0chr($i)\u00a0,\u00a0\"\\\"\u00a0in\u00a0the\u00a0string.\\n\";\n}\n?>"}]},"crc32":{"name":"crc32","parameters":[{"type":"string","name":"$str","description":"The data."}],"return":{"type":"int","values":[]},"short":"Calculates the crc32 polynomial of a string","examples":[{"title":"Example #1 Displaying a crc32 checksum","content":"This example shows how to print a converted checksum with the\n     printf() function:"}]},"create_function":{"name":"create_function","parameters":[{"type":"string","name":"$args","description":"The function arguments."},{"type":"string","name":"$code","description":"The function code."}],"return":{"type":"string","values":["FALSE"]},"short":"Create an anonymous (lambda-style) function","examples":[{"title":"Example #1 \n     Creating an anonymous function with create_function()\n    ","content":"You can use this function, to (for example) create a function from\n     information gathered at run time:"},{"title":"Example #2 \n     Making a general processing function with\n     create_function()\n    ","content":"<?php\nfunction\u00a0process($var1,\u00a0$var2,\u00a0$farr)\n{\n\u00a0\u00a0\u00a0\u00a0foreach\u00a0($farr\u00a0as\u00a0$f)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$f($var1,\u00a0$var2)\u00a0.\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/\u00a0create\u00a0a\u00a0bunch\u00a0of\u00a0math\u00a0functions\n$f1\u00a0=\u00a0'if\u00a0($a\u00a0>=0)\u00a0{return\u00a0\"b*a^2\u00a0=\u00a0\".$b*sqrt($a);}\u00a0else\u00a0{return\u00a0false;}';\n$f2\u00a0=\u00a0\"return\u00a0\\\"min(b^2+a,\u00a0a^2,b)\u00a0=\u00a0\\\".min(\\$a*\\$a+\\$b,\\$b*\\$b+\\$a);\";\n$f3\u00a0=\u00a0'if\u00a0($a\u00a0>\u00a00\u00a0&&\u00a0$b\u00a0!=\u00a00)\u00a0{return\u00a0\"ln(a)\/b\u00a0=\u00a0\".log($a)\/$b;\u00a0}\u00a0else\u00a0{\u00a0return\u00a0false;\u00a0}';\n$farr\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0create_function('$x,$y',\u00a0'return\u00a0\"some\u00a0trig:\u00a0\".(sin($x)\u00a0+\u00a0$x*cos($y));'),\n\u00a0\u00a0\u00a0\u00a0create_function('$x,$y',\u00a0'return\u00a0\"a\u00a0hypotenuse:\u00a0\".sqrt($x*$x\u00a0+\u00a0$y*$y);'),\n\u00a0\u00a0\u00a0\u00a0create_function('$a,$b',\u00a0$f1),\n\u00a0\u00a0\u00a0\u00a0create_function('$a,$b',\u00a0$f2),\n\u00a0\u00a0\u00a0\u00a0create_function('$a,$b',\u00a0$f3)\n\u00a0\u00a0\u00a0\u00a0);\n\necho\u00a0\"\\nUsing\u00a0the\u00a0first\u00a0array\u00a0of\u00a0anonymous\u00a0functions\\n\";\necho\u00a0\"parameters:\u00a02.3445,\u00a0M_PI\\n\";\nprocess(2.3445,\u00a0M_PI,\u00a0$farr);\n\n\/\/\u00a0now\u00a0make\u00a0a\u00a0bunch\u00a0of\u00a0string\u00a0processing\u00a0functions\n$garr\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0create_function('$b,$a',\u00a0'if\u00a0(strncmp($a,\u00a0$b,\u00a03)\u00a0==\u00a00)\u00a0return\u00a0\"**\u00a0\\\"$a\\\"\u00a0'.\n\u00a0\u00a0\u00a0\u00a0'and\u00a0\\\"$b\\\"\\n**\u00a0Look\u00a0the\u00a0same\u00a0to\u00a0me!\u00a0(looking\u00a0at\u00a0the\u00a0first\u00a03\u00a0chars)\";'),\n\u00a0\u00a0\u00a0\u00a0create_function('$a,$b',\u00a0';\u00a0return\u00a0\"CRCs:\u00a0\"\u00a0.\u00a0crc32($a)\u00a0.\u00a0\",\u00a0\".crc32($b);'),\n\u00a0\u00a0\u00a0\u00a0create_function('$a,$b',\u00a0';\u00a0return\u00a0\"similar(a,b)\u00a0=\u00a0\"\u00a0.\u00a0similar_text($a,\u00a0$b,\u00a0&$p)\u00a0.\u00a0\"($p%)\";')\n\u00a0\u00a0\u00a0\u00a0);\necho\u00a0\"\\nUsing\u00a0the\u00a0second\u00a0array\u00a0of\u00a0anonymous\u00a0functions\\n\";\nprocess(\"Twas\u00a0brilling\u00a0and\u00a0the\u00a0slithy\u00a0toves\",\u00a0\"Twas\u00a0the\u00a0night\",\u00a0$garr);\n?>"},{"title":"Example #3 Using anonymous functions as callback functions","content":"<?php\n$av\u00a0=\u00a0array(\"the\u00a0\",\u00a0\"a\u00a0\",\u00a0\"that\u00a0\",\u00a0\"this\u00a0\");\narray_walk($av,\u00a0create_function('&$v,$k',\u00a0'$v\u00a0=\u00a0$v\u00a0.\u00a0\"mango\";'));\nprint_r($av);\n?>"}]},"crypt":{"name":"crypt","parameters":[{"type":"string","name":"$str","description":"The string to be hashed.\n\nCaution\n Using the CRYPT_BLOWFISH algorithm, will result in the str parameter being truncated to a maximum length of 72 characters."},{"type":"string","name":"$salt","description":"An optional salt string to base the hashing on. If not provided, the behaviour is defined by the algorithm implementation and can lead to unexpected results."}],"return":{"type":"string","values":[]},"short":"One-way string hashing","examples":[{"title":"Example #1 crypt() examples","content":"<?php\n$hashed_password\u00a0=\u00a0crypt('mypassword');\u00a0\/\/\u00a0let\u00a0the\u00a0salt\u00a0be\u00a0automatically\u00a0generated\n\n\/*\u00a0You\u00a0should\u00a0pass\u00a0the\u00a0entire\u00a0results\u00a0of\u00a0crypt()\u00a0as\u00a0the\u00a0salt\u00a0for\u00a0comparing\u00a0a\n\u00a0\u00a0\u00a0password,\u00a0to\u00a0avoid\u00a0problems\u00a0when\u00a0different\u00a0hashing\u00a0algorithms\u00a0are\u00a0used.\u00a0(As\n\u00a0\u00a0\u00a0it\u00a0says\u00a0above,\u00a0standard\u00a0DES-based\u00a0password\u00a0hashing\u00a0uses\u00a0a\u00a02-character\u00a0salt,\n\u00a0\u00a0\u00a0but\u00a0MD5-based\u00a0hashing\u00a0uses\u00a012.)\u00a0*\/\nif\u00a0(hash_equals($hashed_password,\u00a0crypt($user_input,\u00a0$hashed_password)))\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"Password\u00a0verified!\";\n}\n?>"},{"title":"Example #2 Using crypt() with htpasswd","content":"<?php\n\/\/\u00a0Set\u00a0the\u00a0password\n$password\u00a0=\u00a0'mypassword';\n\n\/\/\u00a0Get\u00a0the\u00a0hash,\u00a0letting\u00a0the\u00a0salt\u00a0be\u00a0automatically\u00a0generated\n$hash\u00a0=\u00a0crypt($password);\n?>"},{"title":"Example #3 Using crypt() with different hash types","content":"<?php\n\/*\u00a0These\u00a0salts\u00a0are\u00a0examples\u00a0only,\u00a0and\u00a0should\u00a0not\u00a0be\u00a0used\u00a0verbatim\u00a0in\u00a0your\u00a0code.\n\u00a0\u00a0\u00a0You\u00a0should\u00a0generate\u00a0a\u00a0distinct,\u00a0correctly-formatted\u00a0salt\u00a0for\u00a0each\u00a0password.\n*\/\nif\u00a0(CRYPT_STD_DES\u00a0==\u00a01)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Standard\u00a0DES:\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'rl')\u00a0.\u00a0\"\\n\";\n}\n\nif\u00a0(CRYPT_EXT_DES\u00a0==\u00a01)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Extended\u00a0DES:\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'_J9..rasm')\u00a0.\u00a0\"\\n\";\n}\n\nif\u00a0(CRYPT_MD5\u00a0==\u00a01)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'MD5:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'$1$rasmusle$')\u00a0.\u00a0\"\\n\";\n}\n\nif\u00a0(CRYPT_BLOWFISH\u00a0==\u00a01)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Blowfish:\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'$2a$07$usesomesillystringforsalt$')\u00a0.\u00a0\"\\n\";\n}\n\nif\u00a0(CRYPT_SHA256\u00a0==\u00a01)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'SHA-256:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'$5$rounds=5000$usesomesillystringforsalt$')\u00a0.\u00a0\"\\n\";\n}\n\nif\u00a0(CRYPT_SHA512\u00a0==\u00a01)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'SHA-512:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\u00a0.\u00a0crypt('rasmuslerdorf',\u00a0'$6$rounds=5000$usesomesillystringforsalt$')\u00a0.\u00a0\"\\n\";\n}\n?>"}]},"ctype_alnum":{"name":"ctype_alnum","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check for alphanumeric character(s)","examples":[{"title":"Example #1 A ctype_alnum() example (using the default locale)","content":"<?php\n$strings\u00a0=\u00a0array('AbCd1zyZ9',\u00a0'foo!#$bar');\nforeach\u00a0($strings\u00a0as\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_alnum($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0consists\u00a0of\u00a0all\u00a0letters\u00a0or\u00a0digits.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0does\u00a0not\u00a0consist\u00a0of\u00a0all\u00a0letters\u00a0or\u00a0digits.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"ctype_alpha":{"name":"ctype_alpha","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check for alphabetic character(s)","examples":[{"title":"Example #1 A ctype_alpha() example (using the default locale)","content":"<?php\n$strings\u00a0=\u00a0array('KjgWZC',\u00a0'arf12');\nforeach\u00a0($strings\u00a0as\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_alpha($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0consists\u00a0of\u00a0all\u00a0letters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0does\u00a0not\u00a0consist\u00a0of\u00a0all\u00a0letters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"ctype_cntrl":{"name":"ctype_cntrl","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check for control character(s)","examples":[{"title":"Example #1 A ctype_cntrl() example","content":"<?php\n$strings\u00a0=\u00a0array('string1'\u00a0=>\u00a0\"\\n\\r\\t\",\u00a0'string2'\u00a0=>\u00a0'arf12');\nforeach\u00a0($strings\u00a0as\u00a0$name\u00a0=>\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_cntrl($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$name'\u00a0consists\u00a0of\u00a0all\u00a0control\u00a0characters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$name'\u00a0does\u00a0not\u00a0consist\u00a0of\u00a0all\u00a0control\u00a0characters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"ctype_digit":{"name":"ctype_digit","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check for numeric character(s)","examples":[{"title":"Example #1 A ctype_digit() example","content":"<?php\n$strings\u00a0=\u00a0array('1820.20',\u00a0'10002',\u00a0'wsl!12');\nforeach\u00a0($strings\u00a0as\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_digit($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0consists\u00a0of\u00a0all\u00a0digits.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0does\u00a0not\u00a0consist\u00a0of\u00a0all\u00a0digits.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"},{"title":"Example #2 A ctype_digit() example comparing strings with integers","content":"<?php\n\n$numeric_string\u00a0=\u00a0'42';\n$integer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a042;\n\nctype_digit($numeric_string);\u00a0\u00a0\/\/\u00a0true\nctype_digit($integer);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0false\u00a0(ASCII\u00a042\u00a0is\u00a0the\u00a0*\u00a0character)\n\nis_numeric($numeric_string);\u00a0\u00a0\u00a0\/\/\u00a0true\nis_numeric($integer);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0true\n?>"}]},"ctype_graph":{"name":"ctype_graph","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check for any printable character(s) except space","examples":[{"title":"Example #1 A ctype_graph() example","content":"<?php\n$strings\u00a0=\u00a0array('string1'\u00a0=>\u00a0\"asdf\\n\\r\\t\",\u00a0'string2'\u00a0=>\u00a0'arf12',\u00a0'string3'\u00a0=>\u00a0'LKA#@%.54');\nforeach\u00a0($strings\u00a0as\u00a0$name\u00a0=>\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_graph($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$name'\u00a0consists\u00a0of\u00a0all\u00a0(visibly)\u00a0printable\u00a0characters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$name'\u00a0does\u00a0not\u00a0consist\u00a0of\u00a0all\u00a0(visibly)\u00a0printable\u00a0characters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"ctype_lower":{"name":"ctype_lower","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE"]},"short":"Check for lowercase character(s)","examples":[{"title":"Example #1 A ctype_lower() example (using the default locale)","content":"<?php\n$strings\u00a0=\u00a0array('aac123',\u00a0'qiutoas',\u00a0'QASsdks');\nforeach\u00a0($strings\u00a0as\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_lower($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0consists\u00a0of\u00a0all\u00a0lowercase\u00a0letters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0does\u00a0not\u00a0consist\u00a0of\u00a0all\u00a0lowercase\u00a0letters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"ctype_print":{"name":"ctype_print","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check for printable character(s)","examples":[{"title":"Example #1 A ctype_print() example","content":"<?php\n$strings\u00a0=\u00a0array('string1'\u00a0=>\u00a0\"asdf\\n\\r\\t\",\u00a0'string2'\u00a0=>\u00a0'arf12',\u00a0'string3'\u00a0=>\u00a0'LKA#@%.54');\nforeach\u00a0($strings\u00a0as\u00a0$name\u00a0=>\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_print($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$name'\u00a0consists\u00a0of\u00a0all\u00a0printable\u00a0characters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$name'\u00a0does\u00a0not\u00a0consist\u00a0of\u00a0all\u00a0printable\u00a0characters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"ctype_punct":{"name":"ctype_punct","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Check for any printable character which is not whitespace or an\n   alphanumeric character\n  ","examples":[{"title":"Example #1 A ctype_punct() example","content":"<?php\n$strings\u00a0=\u00a0array('ABasdk!@!$#',\u00a0'!@\u00a0#\u00a0$',\u00a0'*&$()');\nforeach\u00a0($strings\u00a0as\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_punct($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0consists\u00a0of\u00a0all\u00a0punctuation.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0does\u00a0not\u00a0consist\u00a0of\u00a0all\u00a0punctuation.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"ctype_space":{"name":"ctype_space","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check for whitespace character(s)","examples":[{"title":"Example #1 A ctype_space() example","content":"<?php\n$strings\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'string1'\u00a0=>\u00a0\"\\n\\r\\t\",\n\u00a0\u00a0\u00a0\u00a0'string2'\u00a0=>\u00a0\"\\narf12\",\n\u00a0\u00a0\u00a0\u00a0'string3'\u00a0=>\u00a0'\\n\\r\\t'\u00a0\/\/\u00a0note\u00a0the\u00a0single\u00a0quotes\n);\nforeach\u00a0($strings\u00a0as\u00a0$name\u00a0=>\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_space($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$name'\u00a0consists\u00a0of\u00a0whitespace\u00a0characters\u00a0only.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$name'\u00a0contains\u00a0non-whitespace\u00a0characters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"ctype_upper":{"name":"ctype_upper","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE"]},"short":"Check for uppercase character(s)","examples":[{"title":"Example #1 A ctype_upper() example (using the default locale)","content":"<?php\n$strings\u00a0=\u00a0array('AKLWC139',\u00a0'LMNSDO',\u00a0'akwSKWsm');\nforeach\u00a0($strings\u00a0as\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_upper($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0consists\u00a0of\u00a0all\u00a0uppercase\u00a0letters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0does\u00a0not\u00a0consist\u00a0of\u00a0all\u00a0uppercase\u00a0letters.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"ctype_xdigit":{"name":"ctype_xdigit","parameters":[{"type":"string","name":"$text","description":"The tested string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Check for character(s) representing a hexadecimal digit\n  ","examples":[{"title":"Example #1 A ctype_xdigit() example","content":"<?php\n$strings\u00a0=\u00a0array('AB10BC99',\u00a0'AR1012',\u00a0'ab12bc99');\nforeach\u00a0($strings\u00a0as\u00a0$testcase)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(ctype_xdigit($testcase))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0consists\u00a0of\u00a0all\u00a0hexadecimal\u00a0digits.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0$testcase\u00a0does\u00a0not\u00a0consist\u00a0of\u00a0all\u00a0hexadecimal\u00a0digits.\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"curl_close":{"name":"curl_close","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."}],"return":{"type":"void","values":[]},"short":"Close a cURL session","examples":[{"title":"Example #1 Initializing a new cURL session and fetching a web page","content":"<?php\n\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource\n$ch\u00a0=\u00a0curl_init();\n\n\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0options\ncurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.example.com\/\");\ncurl_setopt($ch,\u00a0CURLOPT_HEADER,\u00a00);\n\n\/\/\u00a0grab\u00a0URL\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browser\ncurl_exec($ch);\n\n\/\/\u00a0close\u00a0cURL\u00a0resource,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resources\ncurl_close($ch);\n?>"}]},"curl_copy_handle":{"name":"curl_copy_handle","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."}],"return":{"type":"resource","values":[]},"short":"Copy a cURL handle along with all of its preferences","examples":[{"title":"Example #1 Copying a cURL handle","content":"<?php\n\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource\n$ch\u00a0=\u00a0curl_init();\n\n\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0options\ncurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0'http:\/\/www.example.com\/');\ncurl_setopt($ch,\u00a0CURLOPT_HEADER,\u00a00);\n\n\/\/\u00a0copy\u00a0the\u00a0handle\n$ch2\u00a0=\u00a0curl_copy_handle($ch);\n\n\/\/\u00a0grab\u00a0URL\u00a0(http:\/\/www.example.com\/)\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browser\ncurl_exec($ch2);\n\n\/\/\u00a0close\u00a0cURL\u00a0resources,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resources\ncurl_close($ch2);\ncurl_close($ch);\n?>"}]},"curl_errno":{"name":"curl_errno","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."}],"return":{"type":"int","values":[]},"short":"Return the last error number","examples":[{"title":"Example #1 curl_errno() example","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0curl\u00a0handle\u00a0to\u00a0a\u00a0non-existing\u00a0location\n$ch\u00a0=\u00a0curl_init('http:\/\/404.php.net\/');\n\n\/\/\u00a0Execute\ncurl_setopt($ch,\u00a0CURLOPT_RETURNTRANSFER,\u00a0true);\ncurl_exec($ch);\n\n\/\/\u00a0Check\u00a0if\u00a0any\u00a0error\u00a0occurred\nif(curl_errno($ch))\n{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Curl\u00a0error:\u00a0'\u00a0.\u00a0curl_error($ch);\n}\n\n\/\/\u00a0Close\u00a0handle\ncurl_close($ch);\n?>"}]},"curl_error":{"name":"curl_error","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."}],"return":{"type":"string","values":[]},"short":"Return a string containing the last error for the current session","examples":[{"title":"Example #1 curl_error() example","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0curl\u00a0handle\u00a0to\u00a0a\u00a0non-existing\u00a0location\n$ch\u00a0=\u00a0curl_init('http:\/\/404.php.net\/');\ncurl_setopt($ch,\u00a0CURLOPT_RETURNTRANSFER,\u00a0true);\n\nif(curl_exec($ch)\u00a0===\u00a0false)\n{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Curl\u00a0error:\u00a0'\u00a0.\u00a0curl_error($ch);\n}\nelse\n{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Operation\u00a0completed\u00a0without\u00a0any\u00a0errors';\n}\n\n\/\/\u00a0Close\u00a0handle\ncurl_close($ch);\n?>"}]},"curl_escape":{"name":"curl_escape","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."},{"type":"string","name":"$str","description":"The string to be encoded."}],"return":{"type":"string","values":["FALSE"]},"short":"URL encodes the given string","examples":[{"title":"Example #1 curl_escape() example","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0curl\u00a0handle\n$ch\u00a0=\u00a0curl_init();\n\n\/\/\u00a0Escape\u00a0a\u00a0string\u00a0used\u00a0as\u00a0a\u00a0GET\u00a0parameter\n$location\u00a0=\u00a0curl_escape($ch,\u00a0'Hofbr\u00e4uhaus\u00a0\/\u00a0M\u00fcnchen');\n\/\/\u00a0Result:\u00a0Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen\n\n\/\/\u00a0Compose\u00a0an\u00a0URL\u00a0with\u00a0the\u00a0escaped\u00a0string\n$url\u00a0=\u00a0\"http:\/\/example.com\/add_location.php?location={$location}\";\n\/\/\u00a0Result:\u00a0http:\/\/example.com\/add_location.php?location=Hofbr%C3%A4uhaus%20%2F%20M%C3%BCnchen\n\n\/\/\u00a0Send\u00a0HTTP\u00a0request\u00a0and\u00a0close\u00a0the\u00a0handle\ncurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0$url);\ncurl_setopt($ch,\u00a0CURLOPT_RETURNTRANSFER,\u00a0true);\ncurl_exec($ch);\ncurl_close($ch);\n?>"}]},"curl_exec":{"name":"curl_exec","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."}],"return":{"type":"mixed","values":["TRUE","FALSE","CURLOPT_RETURNTRANSFER"]},"short":"Perform a cURL session","examples":[{"title":"Example #1 Fetching a web page","content":"<?php\n\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource\n$ch\u00a0=\u00a0curl_init();\n\n\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0options\ncurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.example.com\/\");\ncurl_setopt($ch,\u00a0CURLOPT_HEADER,\u00a00);\n\n\/\/\u00a0grab\u00a0URL\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browser\ncurl_exec($ch);\n\n\/\/\u00a0close\u00a0cURL\u00a0resource,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resources\ncurl_close($ch);\n?>"}]},"curl_file_create":{"name":"curl_file_create","parameters":[],"return":{"type":"","values":[]},"short":"Create a CURLFile object","examples":[]},"curl_getinfo":{"name":"curl_getinfo","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."},{"type":"int","name":"$opt","description":"This may be one of the following constants:\n\nCURLINFO_EFFECTIVE_URL - Last effective URL\n\n\n\n CURLINFO_HTTP_CODE - Last received HTTP code\n\n\n\n CURLINFO_FILETIME - Remote time of the retrieved document, with the CURLOPT_FILETIME enabled; if -1 is returned the time of the document is unknown\n\n\n\n CURLINFO_TOTAL_TIME - Total transaction time in seconds for last transfer\n\n\n\n CURLINFO_NAMELOOKUP_TIME - Time in seconds until name resolving was complete\n\n\n\n CURLINFO_CONNECT_TIME - Time in seconds it took to establish the connection\n\n\n\n CURLINFO_PRETRANSFER_TIME - Time in seconds from start until just before file transfer begins\n\n\n\n CURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte is about to be transferred\n\n\n\n CURLINFO_REDIRECT_COUNT - Number of redirects, with the CURLOPT_FOLLOWLOCATION option enabled\n\n\n\n CURLINFO_REDIRECT_TIME - Time in seconds of all redirection steps before final transaction was started, with the CURLOPT_FOLLOWLOCATION option enabled\n\n\n\n CURLINFO_REDIRECT_URL - With the CURLOPT_FOLLOWLOCATION option disabled: redirect URL found in the last transaction, that should be requested manually next. With the CURLOPT_FOLLOWLOCATION option enabled: this is empty. The redirect URL in this case is available in CURLINFO_EFFECTIVE_URL\n\n\n\n CURLINFO_PRIMARY_IP - IP address of the most recent connection\n\n\n\n CURLINFO_PRIMARY_PORT - Destination port of the most recent connection\n\n\n\n CURLINFO_LOCAL_IP - Local (source) IP address of the most recent connection\n\n\n\n CURLINFO_LOCAL_PORT - Local (source) port of the most recent connection\n\n\n\n CURLINFO_SIZE_UPLOAD - Total number of bytes uploaded\n\n\n\n CURLINFO_SIZE_DOWNLOAD - Total number of bytes downloaded\n\n\n\n CURLINFO_SPEED_DOWNLOAD - Average download speed\n\n\n\n CURLINFO_SPEED_UPLOAD - Average upload speed\n\n\n\n CURLINFO_HEADER_SIZE - Total size of all headers received\n\n\n\n CURLINFO_HEADER_OUT - The request string sent. For this to work, add the CURLINFO_HEADER_OUT option to the handle by calling curl_setopt()\n\n\n\n CURLINFO_REQUEST_SIZE - Total size of issued requests, currently only for HTTP requests\n\n\n\n CURLINFO_SSL_VERIFYRESULT - Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER\n\n\n\n CURLINFO_CONTENT_LENGTH_DOWNLOAD - Content length of download, read from Content-Length: field\n\n\n\n CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of upload\n\n\n\n CURLINFO_CONTENT_TYPE - Content-Type: of the requested document. NULL indicates server did not send valid Content-Type: header\n\n\n\n CURLINFO_PRIVATE - Private data associated with this cURL handle, previously set with the CURLOPT_PRIVATE option of curl_setopt()\n\n\n\n CURLINFO_RESPONSE_CODE - The last response code\n\n\n\n CURLINFO_HTTP_CONNECTCODE - The CONNECT response code\n\n\n\n CURLINFO_HTTPAUTH_AVAIL - Bitmask indicating the authentication method(s) available according to the previous response\n\n\n\n CURLINFO_PROXYAUTH_AVAIL - Bitmask indicating the proxy authentication method(s) available according to the previous response\n\n\n\n CURLINFO_OS_ERRNO - Errno from a connect failure. The number is OS and system specific.\n\n\n\n CURLINFO_NUM_CONNECTS - Number of connections curl had to create to achieve the previous transfer\n\n\n\n CURLINFO_SSL_ENGINES - OpenSSL crypto-engines supported\n\n\n\n CURLINFO_COOKIELIST - All known cookies\n\n\n\n CURLINFO_FTP_ENTRY_PATH - Entry path in FTP server\n\n\n\n CURLINFO_APPCONNECT_TIME - Time in seconds it took from the start until the SSL\/SSH connect\/handshake to the remote host was completed\n\n\n\n CURLINFO_CERTINFO - TLS certificate chain\n\n\n\n CURLINFO_CONDITION_UNMET - Info on unmet time conditional\n\n\n\n CURLINFO_RTSP_CLIENT_CSEQ - Next RTSP client CSeq\n\n\n\n CURLINFO_RTSP_CSEQ_RECV - Recently received CSeq\n\n\n\n CURLINFO_RTSP_SERVER_CSEQ - Next RTSP server CSeq\n\n\n\n CURLINFO_RTSP_SESSION_ID - RTSP session ID"}],"return":{"type":"mixed","values":["FALSE"]},"short":"Get information regarding a specific transfer","examples":[{"title":"Example #1 curl_getinfo() example","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0cURL\u00a0handle\n$ch\u00a0=\u00a0curl_init('http:\/\/www.example.com\/');\n\n\/\/\u00a0Execute\ncurl_exec($ch);\n\n\/\/\u00a0Check\u00a0if\u00a0any\u00a0error\u00a0occurred\nif\u00a0(!curl_errno($ch))\u00a0{\n\u00a0\u00a0$info\u00a0=\u00a0curl_getinfo($ch);\n\u00a0\u00a0echo\u00a0'Took\u00a0',\u00a0$info['total_time'],\u00a0'\u00a0seconds\u00a0to\u00a0send\u00a0a\u00a0request\u00a0to\u00a0',\u00a0$info['url'],\u00a0\"\\n\";\n}\n\n\/\/\u00a0Close\u00a0handle\ncurl_close($ch);\n?>"},{"title":"Example #2 curl_getinfo() example with opt parameter","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0cURL\u00a0handle\n$ch\u00a0=\u00a0curl_init('http:\/\/www.example.com\/');\n\n\/\/\u00a0Execute\ncurl_exec($ch);\n\n\/\/\u00a0Check\u00a0HTTP\u00a0status\u00a0code\nif\u00a0(!curl_errno($ch))\u00a0{\n\u00a0\u00a0switch\u00a0($http_code\u00a0=\u00a0curl_getinfo($ch,\u00a0CURLINFO_HTTP_CODE))\u00a0{\n\u00a0\u00a0\u00a0\u00a0case\u00a0200:\u00a0\u00a0#\u00a0OK\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Unexpected\u00a0HTTP\u00a0code:\u00a0',\u00a0$http_code,\u00a0\"\\n\";\n\u00a0\u00a0}\n}\n\n\/\/\u00a0Close\u00a0handle\ncurl_close($ch);\n?>"}]},"curl_init":{"name":"curl_init","parameters":[{"type":"string","name":"$url","default_value":"NULL","description":"If provided, the CURLOPT_URL option will be set to its value. You can manually set this using the curl_setopt() function.\n\nNote:\n The file protocol is disabled by cURL if open_basedir is set."}],"return":{"type":"resource","values":["FALSE"]},"short":"Initialize a cURL session","examples":[{"title":"Example #1 \n     Initializing a new cURL session and fetching a web page\n    ","content":"<?php\n\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource\n$ch\u00a0=\u00a0curl_init();\n\n\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0options\ncurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.example.com\/\");\ncurl_setopt($ch,\u00a0CURLOPT_HEADER,\u00a00);\n\n\/\/\u00a0grab\u00a0URL\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browser\ncurl_exec($ch);\n\n\/\/\u00a0close\u00a0cURL\u00a0resource,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resources\ncurl_close($ch);\n?>"}]},"curl_multi_add_handle":{"name":"curl_multi_add_handle","parameters":[{"type":"resource","name":"$mh","description":"A cURL multi handle returned by curl_multi_init()."},{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."}],"return":{"type":"int","values":["CURLM_XXX"]},"short":"Add a normal cURL handle to a cURL multi handle","examples":[{"title":"Example #1 curl_multi_add_handle() example","content":"This example will create two cURL handles, add them to a multi\n     handle, and process them asynchronously."}]},"curl_multi_close":{"name":"curl_multi_close","parameters":[{"type":"resource","name":"$mh","description":"A cURL multi handle returned by curl_multi_init()."}],"return":{"type":"void","values":[]},"short":"Close a set of cURL handles","examples":[{"title":"Example #1 curl_multi_close() example","content":"This example will create two cURL handles, add them to a multi\n     handle, and process them asynchronously."}]},"curl_multi_errno":{"name":"curl_multi_errno","parameters":[{"type":"resource","name":"$mh","description":"A cURL multi handle returned by curl_multi_init()."}],"return":{"type":"int","values":["FALSE"]},"short":"Return the last multi curl error number","examples":[]},"curl_multi_exec":{"name":"curl_multi_exec","parameters":[{"type":"resource","name":"$mh","description":"A cURL multi handle returned by curl_multi_init()."}],"return":{"type":"int","values":[]},"short":"Run the sub-connections of the current cURL handle","examples":[{"title":"Example #1 curl_multi_exec() example","content":"This example will create two cURL handles, add them to a multi\n     handle, and process them asynchronously."}]},"curl_multi_getcontent":{"name":"curl_multi_getcontent","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."}],"return":{"type":"string","values":["CURLOPT_RETURNTRANSFER"]},"short":"Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set","examples":[]},"curl_multi_info_read":{"name":"curl_multi_info_read","parameters":[{"type":"resource","name":"$mh","description":"A cURL multi handle returned by curl_multi_init()."}],"return":{"type":"array","values":["FALSE"]},"short":"Get information about the current transfers","examples":[{"title":"Example #1 A curl_multi_info_read() example","content":"<?php\n\n$urls\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\"http:\/\/www.cnn.com\/\",\n\u00a0\u00a0\u00a0\"http:\/\/www.bbc.co.uk\/\",\n\u00a0\u00a0\u00a0\"http:\/\/www.yahoo.com\/\"\n);\n\n$mh\u00a0=\u00a0curl_multi_init();\n\nforeach\u00a0($urls\u00a0as\u00a0$i\u00a0=>\u00a0$url)\u00a0{\n\u00a0\u00a0\u00a0\u00a0$conn[$i]\u00a0=\u00a0curl_init($url);\n\u00a0\u00a0\u00a0\u00a0curl_setopt($conn[$i],\u00a0CURLOPT_RETURNTRANSFER,\u00a01);\n\u00a0\u00a0\u00a0\u00a0curl_multi_add_handle($mh,\u00a0$conn[$i]);\n}\n\ndo\u00a0{\n\u00a0\u00a0\u00a0\u00a0$status\u00a0=\u00a0curl_multi_exec($mh,\u00a0$active);\n\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0curl_multi_info_read($mh);\n\u00a0\u00a0\u00a0\u00a0if\u00a0(false\u00a0!==\u00a0$info)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($info);\n\u00a0\u00a0\u00a0\u00a0}\n}\u00a0while\u00a0($status\u00a0===\u00a0CURLM_CALL_MULTI_PERFORM\u00a0||\u00a0$active);\n\nforeach\u00a0($urls\u00a0as\u00a0$i\u00a0=>\u00a0$url)\u00a0{\n\u00a0\u00a0\u00a0\u00a0$res[$i]\u00a0=\u00a0curl_multi_getcontent($conn[$i]);\n\u00a0\u00a0\u00a0\u00a0curl_close($conn[$i]);\n}\n\nvar_dump(curl_multi_info_read($mh));\n\n?>"}]},"curl_multi_init":{"name":"curl_multi_init","parameters":[],"return":{"type":"resource","values":["FALSE"]},"short":"Returns a new cURL multi handle","examples":[{"title":"Example #1 curl_multi_init() example","content":"This example will create two cURL handles, add them to a multi\n     handle, and process them asynchronously."}]},"curl_multi_remove_handle":{"name":"curl_multi_remove_handle","parameters":[{"type":"resource","name":"$mh","description":"A cURL multi handle returned by curl_multi_init()."},{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."}],"return":{"type":"int","values":["CURLM_XXX"]},"short":"Remove a multi handle from a set of cURL handles","examples":[]},"curl_multi_select":{"name":"curl_multi_select","parameters":[{"type":"resource","name":"$mh","description":"A cURL multi handle returned by curl_multi_init()."},{"type":"float","name":"$timeout","default_value":"1.0","description":"Time, in seconds, to wait for a response."}],"return":{"type":"int","values":[]},"short":"Wait for activity on any curl_multi connection","examples":[]},"curl_multi_setopt":{"name":"curl_multi_setopt","parameters":[{"type":"resource","name":"$mh","description":""},{"type":"int","name":"$option","description":"One of the CURLMOPT_* constants."},{"type":"mixed","name":"$value","description":"The value to be set on option.\n\nvalue should be an int for the following values of the option parameter:\n\nOption Set value to CURLMOPT_PIPELINING\n Pass 1 to enable or 0 to disable. Enabling pipelining on a multi handle will make it attempt to perform HTTP Pipelining as far as possible for transfers using this handle. This means that if you add a second request that can use an already existing connection, the second request will be \"piped\" on the same connection. As of cURL 7.43.0 you can also pass 2 to try to multiplex the new transfer over an existing HTTP\/2 connection if possible. Instead of integer literals, you can also use the CURLPIPE_* constants if available.\n CURLMOPT_MAXCONNECTS\n Pass a number that will be used as the maximum amount of simultaneously open connections that libcurl may cache. By default the size will be enlarged to fit four times the number of handles added via curl_multi_add_handle(). When the cache is full, curl closes the oldest one in the cache to prevent the number of open connections from increasing.\n CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE\n Pass a number that specifies the chunk length threshold for pipelining in bytes.\n CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE\n Pass a number that specifies the size threshold for pipelining penalty in bytes.\n CURLMOPT_MAX_HOST_CONNECTIONS\n Pass a number that specifies the maximum number of connections to a single host.\n CURLMOPT_MAX_PIPELINE_LENGTH\n Pass a number that specifies the maximum number of requests in a pipeline.\n CURLMOPT_MAX_TOTAL_CONNECTIONS\n Pass a number that specifies the maximum number of simultaneously open connections.\n CURLMOPT_PUSHFUNCTION\n Pass a callable that will be registered to handle server pushes and should have the following signature:\n int pushfunction ( resource $parent_ch , resource $pushed_ch , array $headers )\n\n parent_ch\n\n\n\n The parent cURL handle (the request the client made).\n\n\n\n\n\n pushed_ch\n\n\n\n A new cURL handle for the pushed request.\n\n\n\n\n\n headers\n\n\n\n The push promise headers.\n\n\n\n\n\n The push function is supposed to return either CURL_PUSH_OK if it can handle the push, or CURL_PUSH_DENY to reject it."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set an option for the cURL multi handle","examples":[]},"curl_multi_strerror":{"name":"curl_multi_strerror","parameters":[{"type":"int","name":"$errornum","description":"One of the \u00bb\u00a0CURLM error codes constants."}],"return":{"type":"string","values":["NULL"]},"short":"Return string describing error code","examples":[{"title":"Example #1 curl_multi_strerror() example","content":"<?php\n\/\/\u00a0Create\u00a0cURL\u00a0handles\n$ch1\u00a0=\u00a0curl_init(\"http:\/\/example.com\"\/);\n$ch2\u00a0=\u00a0curl_init(\"http:\/\/php.net\/\");\n\n\/\/\u00a0Create\u00a0a\u00a0cURL\u00a0multi\u00a0handle\n$mh\u00a0=\u00a0curl_multi_init();\n\n\/\/\u00a0Add\u00a0the\u00a0handles\u00a0to\u00a0the\u00a0multi\u00a0handle\ncurl_multi_add_handle($mh,\u00a0$ch1);\ncurl_multi_add_handle($mh,\u00a0$ch2);\n\n\/\/\u00a0Execute\u00a0the\u00a0multi\u00a0handle\ndo\u00a0{\n\u00a0\u00a0\u00a0\u00a0$status\u00a0=\u00a0curl_multi_exec($mh,\u00a0$active);\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Check\u00a0for\u00a0errors\n\u00a0\u00a0\u00a0\u00a0if($status\u00a0>\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Display\u00a0error\u00a0message\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"ERROR!\\n\u00a0\"\u00a0.\u00a0curl_multi_strerror($status);\n\u00a0\u00a0\u00a0\u00a0}\n}\u00a0while\u00a0($status\u00a0===\u00a0CURLM_CALL_MULTI_PERFORM\u00a0||\u00a0$active);\n?>"}]},"curl_pause":{"name":"curl_pause","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."},{"type":"int","name":"$bitmask","description":"One of CURLPAUSE_* constants."}],"return":{"type":"int","values":["CURLE_OK"]},"short":"Pause and unpause a connection","examples":[]},"curl_reset":{"name":"curl_reset","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."}],"return":{"type":"void","values":[]},"short":"Reset all options of a libcurl session handle","examples":[{"title":"Example #1 curl_reset() example","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0curl\u00a0handle\n$ch\u00a0=\u00a0curl_init();\n\n\/\/\u00a0Set\u00a0CURLOPT_USERAGENT\u00a0option\ncurl_setopt($ch,\u00a0CURLOPT_USERAGENT,\u00a0\"My\u00a0test\u00a0user-agent\");\n\n\/\/\u00a0Reset\u00a0all\u00a0previously\u00a0set\u00a0options\ncurl_reset($ch);\n\n\/\/\u00a0Send\u00a0HTTP\u00a0request\ncurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0'http:\/\/example.com\/');\ncurl_exec($ch);\u00a0\/\/\u00a0the\u00a0previously\u00a0set\u00a0user-agent\u00a0will\u00a0be\u00a0not\u00a0sent,\u00a0it\u00a0has\u00a0been\u00a0reset\u00a0by\u00a0curl_reset\n\n\/\/\u00a0Close\u00a0the\u00a0handle\ncurl_close($ch);\n?>"}]},"curl_setopt":{"name":"curl_setopt","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."},{"type":"int","name":"$option","description":"The CURLOPT_XXX option to set."},{"type":"mixed","name":"$value","description":"The value to be set on option.\n\nvalue should be a bool for the following values of the option parameter:\n\nOption Set value to Notes CURLOPT_AUTOREFERER\n TRUE to automatically set the Referer: field in requests where it follows a Location: redirect.\n\n\n CURLOPT_BINARYTRANSFER\n TRUE to return the raw output when CURLOPT_RETURNTRANSFER is used.\n\n From PHP 5.1.3, this option has no effect: the raw output will always be returned when CURLOPT_RETURNTRANSFER is used.\n CURLOPT_COOKIESESSION\n TRUE to mark this as a new cookie \"session\". It will force libcurl to ignore all cookies it is about to load that are \"session cookies\" from the previous session. By default, libcurl always stores and loads all cookies, independent if they are session cookies or not. Session cookies are cookies without expiry date and they are meant to be alive and existing for this \"session\" only.\n\n\n CURLOPT_CERTINFO\n TRUE to output SSL certification information to STDERR on secure transfers.\n\n Added in cURL 7.19.1. Available since PHP 5.3.2. Requires CURLOPT_VERBOSE to be on to have an effect.\n CURLOPT_CONNECT_ONLY\n TRUE tells the library to perform all the required proxy authentication and connection setup, but no data transfer. This option is implemented for HTTP, SMTP and POP3.\n\n Added in 7.15.2. Available since PHP 5.5.0.\n CURLOPT_CRLF\n TRUE to convert Unix newlines to CRLF newlines on transfers.\n\n\n CURLOPT_DNS_USE_GLOBAL_CACHE\n TRUE to use a global DNS cache. This option is not thread-safe and is enabled by default.\n\n\n CURLOPT_FAILONERROR\n TRUE to fail verbosely if the HTTP code returned is greater than or equal to 400. The default behavior is to return the page normally, ignoring the code.\n\n\n CURLOPT_SSL_FALSESTART\n TRUE to enable TLS false start.\n\n Added in cURL 7.42.0. Available since PHP 7.0.7.\n CURLOPT_FILETIME\n TRUE to attempt to retrieve the modification date of the remote document. This value can be retrieved using the CURLINFO_FILETIME option with curl_getinfo().\n\n\n CURLOPT_FOLLOWLOCATION\n TRUE to follow any \"Location: \" header that the server sends as part of the HTTP header (note this is recursive, PHP will follow as many \"Location: \" headers that it is sent, unless CURLOPT_MAXREDIRS is set).\n\n\n CURLOPT_FORBID_REUSE\n TRUE to force the connection to explicitly close when it has finished processing, and not be pooled for reuse.\n\n\n CURLOPT_FRESH_CONNECT\n TRUE to force the use of a new connection instead of a cached one.\n\n\n CURLOPT_FTP_USE_EPRT\n TRUE to use EPRT (and LPRT) when doing active FTP downloads. Use FALSE to disable EPRT and LPRT and use PORT only.\n\n\n CURLOPT_FTP_USE_EPSV\n TRUE to first try an EPSV command for FTP transfers before reverting back to PASV. Set to FALSE to disable EPSV.\n\n\n CURLOPT_FTP_CREATE_MISSING_DIRS\n TRUE to create missing directories when an FTP operation encounters a path that currently doesn't exist.\n\n\n CURLOPT_FTPAPPEND\n TRUE to append to the remote file instead of overwriting it.\n\n\n CURLOPT_TCP_NODELAY\n TRUE to disable TCP's Nagle algorithm, which tries to minimize the number of small packets on the network.\n\n Available since PHP 5.2.1 for versions compiled with libcurl 7.11.2 or greater.\n CURLOPT_FTPASCII\n An alias of CURLOPT_TRANSFERTEXT. Use that instead.\n\n\n CURLOPT_FTPLISTONLY\n TRUE to only list the names of an FTP directory.\n\n\n CURLOPT_HEADER\n TRUE to include the header in the output.\n\n\n CURLINFO_HEADER_OUT\n TRUE to track the handle's request string.\n\n Available since PHP 5.1.3. The CURLINFO_ prefix is intentional.\n CURLOPT_HTTPGET\n TRUE to reset the HTTP request method to GET. Since GET is the default, this is only necessary if the request method has been changed.\n\n\n CURLOPT_HTTPPROXYTUNNEL\n TRUE to tunnel through a given HTTP proxy.\n\n\n CURLOPT_MUTE\n TRUE to be completely silent with regards to the cURL functions.\n\n Removed in cURL 7.15.5 (You can use CURLOPT_RETURNTRANSFER instead)\n CURLOPT_NETRC\n TRUE to scan the ~\/.netrc file to find a username and password for the remote site that a connection is being established with.\n\n\n CURLOPT_NOBODY\n TRUE to exclude the body from the output. Request method is then set to HEAD. Changing this to FALSE does not change it to GET.\n\n\n CURLOPT_NOPROGRESS\n TRUE to disable the progress meter for cURL transfers. Note:\n PHP automatically sets this option to TRUE, this should only be changed for debugging purposes.\n\n\n\n\n CURLOPT_NOSIGNAL\n TRUE to ignore any cURL function that causes a signal to be sent to the PHP process. This is turned on by default in multi-threaded SAPIs so timeout options can still be used.\n\n Added in cURL 7.10.\n CURLOPT_PATH_AS_IS\n TRUE to not handle dot dot sequences.\n\n Added in cURL 7.42.0. Available since PHP 7.0.7.\n CURLOPT_PIPEWAIT\n TRUE to wait for pipelining\/multiplexing.\n\n Added in cURL 7.43.0. Available since PHP 7.0.7.\n CURLOPT_POST\n TRUE to do a regular HTTP POST. This POST is the normal application\/x-www-form-urlencoded kind, most commonly used by HTML forms.\n\n\n CURLOPT_PUT\n TRUE to HTTP PUT a file. The file to PUT must be set with CURLOPT_INFILE and CURLOPT_INFILESIZE.\n\n\n CURLOPT_RETURNTRANSFER\n TRUE to return the transfer as a string of the return value of curl_exec() instead of outputting it out directly.\n\n\n CURLOPT_SAFE_UPLOAD\n TRUE to disable support for the @ prefix for uploading files in CURLOPT_POSTFIELDS, which means that values starting with @ can be safely passed as fields. CURLFile may be used for uploads instead.\n\n Added in PHP 5.5.0 with FALSE as the default value. PHP 5.6.0 changes the default value to TRUE. PHP 7 removes this option; the CURLFile interface must be used to upload files.\n CURLOPT_SASL_IR\n TRUE to enable sending the initial response in the first packet.\n\n Added in cURL 7.31.10. Available since PHP 7.0.7.\n CURLOPT_SSL_ENABLE_ALPN\n FALSE to disable ALPN in the SSL handshake (if the SSL backend libcurl is built to use supports it), which can be used to negotiate http2.\n\n Added in cURL 7.36.0. Available since PHP 7.0.7.\n CURLOPT_SSL_ENABLE_NPN\n FALSE to disable NPN in the SSL handshake (if the SSL backend libcurl is built to use supports it), which can be used to negotiate http2.\n\n Added in cURL 7.36.0. Available since PHP 7.0.7.\n CURLOPT_SSL_VERIFYPEER\n FALSE to stop cURL from verifying the peer's certificate. Alternate certificates to verify against can be specified with the CURLOPT_CAINFO option or a certificate directory can be specified with the CURLOPT_CAPATH option.\n\n TRUE by default as of cURL 7.10. Default bundle installed as of cURL 7.10.\n CURLOPT_SSL_VERIFYSTATUS\n TRUE to verify the certificate's status.\n\n Added in cURL 7.41.0. Available since PHP 7.0.7.\n CURLOPT_TCP_FASTOPEN\n TRUE to enable TCP Fast Open.\n\n Added in cURL 7.49.0. Available since PHP 7.0.7.\n CURLOPT_TFTP_NO_OPTIONS\n TRUE to not send TFTP options requests.\n\n Added in cURL 7.48.0. Available since PHP 7.0.7.\n CURLOPT_TRANSFERTEXT\n TRUE to use ASCII mode for FTP transfers. For LDAP, it retrieves data in plain text instead of HTML. On Windows systems, it will not set STDOUT to binary mode.\n\n\n CURLOPT_UNRESTRICTED_AUTH\n TRUE to keep sending the username and password when following locations (using CURLOPT_FOLLOWLOCATION), even when the hostname has changed.\n\n\n CURLOPT_UPLOAD\n TRUE to prepare for an upload.\n\n\n CURLOPT_VERBOSE\n TRUE to output verbose information. Writes output to STDERR, or the file specified using CURLOPT_STDERR.\n\nvalue should be an integer for the following values of the option parameter:\n\nOption Set value to Notes CURLOPT_BUFFERSIZE\n The size of the buffer to use for each read. There is no guarantee this request will be fulfilled, however.\n\n Added in cURL 7.10.\n CURLOPT_CLOSEPOLICY\n One of the CURLCLOSEPOLICY_* values. Note:\n This option is deprecated, as it was never implemented in cURL and never had any effect.\n\n\n\n Removed in PHP 5.6.0.\n CURLOPT_CONNECTTIMEOUT\n The number of seconds to wait while trying to connect. Use 0 to wait indefinitely.\n\n\n CURLOPT_CONNECTTIMEOUT_MS\n The number of milliseconds to wait while trying to connect. Use 0 to wait indefinitely.\n If libcurl is built to use the standard system name resolver, that portion of the connect will still use full-second resolution for timeouts with a minimum timeout allowed of one second.\n\n Added in cURL 7.16.2. Available since PHP 5.2.3.\n CURLOPT_DNS_CACHE_TIMEOUT\n The number of seconds to keep DNS entries in memory. This option is set to 120 (2 minutes) by default.\n\n\n CURLOPT_EXPECT_100_TIMEOUT_MS\n The timeout for Expect: 100-continue responses in milliseconds. Defaults to 1000 milliseconds.\n\n Added in cURL 7.36.0. Available since PHP 7.0.7.\n CURLOPT_FTPSSLAUTH\n The FTP authentication method (when is activated): CURLFTPAUTH_SSL (try SSL first), CURLFTPAUTH_TLS (try TLS first), or CURLFTPAUTH_DEFAULT (let cURL decide).\n\n Added in cURL 7.12.2.\n CURLOPT_HEADEROPT\n How to deal with headers. One of the following constants:\n CURLHEADER_UNIFIED: the headers specified in CURLOPT_HTTPHEADER will be used in requests both to servers and proxies. With this option enabled, CURLOPT_PROXYHEADER will not have any effect.\n\n CURLHEADER_SEPARATE: makes CURLOPT_HTTPHEADER headers only get sent to a server and not to a proxy. Proxy headers must be set with CURLOPT_PROXYHEADER to get used. Note that if a non-CONNECT request is sent to a proxy, libcurl will send both server headers and proxy headers. When doing CONNECT, libcurl will send CURLOPT_PROXYHEADER headers only to the proxy and then CURLOPT_HTTPHEADER headers only to the server.\n\n Defaults to CURLHEADER_SEPARATE as of cURL 7.42.1, and CURLHEADER_UNIFIED before.\n\n\n Added in cURL 7.37.0. Available since PHP 7.0.7.\n CURLOPT_HTTP_VERSION\n CURL_HTTP_VERSION_NONE (default, lets CURL decide which version to use), CURL_HTTP_VERSION_1_0 (forces HTTP\/1.0), or CURL_HTTP_VERSION_1_1 (forces HTTP\/1.1).\n\n\n CURLOPT_HTTPAUTH\n\n The HTTP authentication method(s) to use. The options are: CURLAUTH_BASIC, CURLAUTH_DIGEST, CURLAUTH_GSSNEGOTIATE, CURLAUTH_NTLM, CURLAUTH_ANY, and CURLAUTH_ANYSAFE.\n\n The bitwise | (or) operator can be used to combine more than one method. If this is done, cURL will poll the server to see what methods it supports and pick the best one.\n\n CURLAUTH_ANY is an alias for CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.\n\n CURLAUTH_ANYSAFE is an alias for CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.\n\n\n\n CURLOPT_INFILESIZE\n The expected size, in bytes, of the file when uploading a file to a remote site. Note that using this option will not stop libcurl from sending more data, as exactly what is sent depends on CURLOPT_READFUNCTION.\n\n\n CURLOPT_LOW_SPEED_LIMIT\n The transfer speed, in bytes per second, that the transfer should be below during the count of CURLOPT_LOW_SPEED_TIME seconds before PHP considers the transfer too slow and aborts.\n\n\n CURLOPT_LOW_SPEED_TIME\n The number of seconds the transfer speed should be below CURLOPT_LOW_SPEED_LIMIT before PHP considers the transfer too slow and aborts.\n\n\n CURLOPT_MAXCONNECTS\n The maximum amount of persistent connections that are allowed. When the limit is reached, CURLOPT_CLOSEPOLICY is used to determine which connection to close.\n\n\n CURLOPT_MAXREDIRS\n The maximum amount of HTTP redirections to follow. Use this option alongside CURLOPT_FOLLOWLOCATION.\n\n\n CURLOPT_PORT\n An alternative port number to connect to.\n\n\n CURLOPT_POSTREDIR\n A bitmask of 1 (301 Moved Permanently), 2 (302 Found) and 4 (303 See Other) if the HTTP POST method should be maintained when CURLOPT_FOLLOWLOCATION is set and a specific type of redirect occurs.\n\n Added in cURL 7.19.1. Available since PHP 5.3.2.\n CURLOPT_PROTOCOLS\n\n Bitmask of CURLPROTO_* values. If used, this bitmask limits what protocols libcurl may use in the transfer. This allows you to have a libcurl built to support a wide range of protocols but still limit specific transfers to only be allowed to use a subset of them. By default libcurl will accept all protocols it supports. See also CURLOPT_REDIR_PROTOCOLS.\n\n Valid protocol options are: CURLPROTO_HTTP, CURLPROTO_HTTPS, CURLPROTO_FTP, CURLPROTO_FTPS, CURLPROTO_SCP, CURLPROTO_SFTP, CURLPROTO_TELNET, CURLPROTO_LDAP, CURLPROTO_LDAPS, CURLPROTO_DICT, CURLPROTO_FILE, CURLPROTO_TFTP, CURLPROTO_ALL\n\n\n Added in cURL 7.19.4.\n CURLOPT_PROXYAUTH\n The HTTP authentication method(s) to use for the proxy connection. Use the same bitmasks as described in CURLOPT_HTTPAUTH. For proxy authentication, only CURLAUTH_BASIC and CURLAUTH_NTLM are currently supported.\n\n Added in cURL 7.10.7.\n CURLOPT_PROXYPORT\n The port number of the proxy to connect to. This port number can also be set in CURLOPT_PROXY.\n\n\n CURLOPT_PROXYTYPE\n Either CURLPROXY_HTTP (default), CURLPROXY_SOCKS4, CURLPROXY_SOCKS5, CURLPROXY_SOCKS4A or CURLPROXY_SOCKS5_HOSTNAME.\n\n Added in cURL 7.10.\n CURLOPT_REDIR_PROTOCOLS\n Bitmask of CURLPROTO_* values. If used, this bitmask limits what protocols libcurl may use in a transfer that it follows to in a redirect when CURLOPT_FOLLOWLOCATION is enabled. This allows you to limit specific transfers to only be allowed to use a subset of protocols in redirections. By default libcurl will allow all protocols except for FILE and SCP. This is a difference compared to pre-7.19.4 versions which unconditionally would follow to all protocols supported. See also CURLOPT_PROTOCOLS for protocol constant values.\n\n Added in cURL 7.19.4.\n CURLOPT_RESUME_FROM\n The offset, in bytes, to resume a transfer from.\n\n\n CURLOPT_SSL_OPTIONS\n Set SSL behavior options, which is a bitmask of any of the following constants:\n CURLSSLOPT_ALLOW_BEAST: do not attempt to use any workarounds for a security flaw in the SSL3 and TLS1.0 protocols.\n\n CURLSSLOPT_NO_REVOKE: disable certificate revocation checks for those SSL backends where such behavior is present.\n\n\n Added in cURL 7.25.0. Available since PHP 7.0.7.\n CURLOPT_SSL_VERIFYHOST\n 1 to check the existence of a common name in the SSL peer certificate. 2 to check the existence of a common name and also verify that it matches the hostname provided. 0 to not check the names. In production environments the value of this option should be kept at 2 (default value).\n\n Support for value 1 removed in cURL 7.28.1.\n CURLOPT_SSLVERSION\n One of CURL_SSLVERSION_DEFAULT (0), CURL_SSLVERSION_TLSv1 (1), CURL_SSLVERSION_SSLv2 (2), CURL_SSLVERSION_SSLv3 (3), CURL_SSLVERSION_TLSv1_0 (4), CURL_SSLVERSION_TLSv1_1 (5) or CURL_SSLVERSION_TLSv1_2 (6). Note:\n Your best bet is to not set this and let it use the default. Setting it to 2 or 3 is very dangerous given the known vulnerabilities in SSLv2 and SSLv3.\n\n\n\n\n CURLOPT_STREAM_WEIGHT\n Set the numerical stream weight (a number between 1 and 256).\n\n Added in cURL 7.46.0. Available since PHP 7.0.7.\n CURLOPT_TIMECONDITION\n How CURLOPT_TIMEVALUE is treated. Use CURL_TIMECOND_IFMODSINCE to return the page only if it has been modified since the time specified in CURLOPT_TIMEVALUE. If it hasn't been modified, a \"304 Not Modified\" header will be returned assuming CURLOPT_HEADER is TRUE. Use CURL_TIMECOND_IFUNMODSINCE for the reverse effect. CURL_TIMECOND_IFMODSINCE is the default.\n\n\n CURLOPT_TIMEOUT\n The maximum number of seconds to allow cURL functions to execute.\n\n\n CURLOPT_TIMEOUT_MS\n The maximum number of milliseconds to allow cURL functions to execute.\n If libcurl is built to use the standard system name resolver, that portion of the connect will still use full-second resolution for timeouts with a minimum timeout allowed of one second.\n\n Added in cURL 7.16.2. Available since PHP 5.2.3.\n CURLOPT_TIMEVALUE\n The time in seconds since January 1st, 1970. The time will be used by CURLOPT_TIMECONDITION. By default, CURL_TIMECOND_IFMODSINCE is used.\n\n\n CURLOPT_MAX_RECV_SPEED_LARGE\n If a download exceeds this speed (counted in bytes per second) on cumulative average during the transfer, the transfer will pause to keep the average rate less than or equal to the parameter value. Defaults to unlimited speed.\n\n Added in cURL 7.15.5. Available since PHP 5.4.0.\n CURLOPT_MAX_SEND_SPEED_LARGE\n If an upload exceeds this speed (counted in bytes per second) on cumulative average during the transfer, the transfer will pause to keep the average rate less than or equal to the parameter value. Defaults to unlimited speed.\n\n Added in cURL 7.15.5. Available since PHP 5.4.0.\n CURLOPT_SSH_AUTH_TYPES\n A bitmask consisting of one or more of CURLSSH_AUTH_PUBLICKEY, CURLSSH_AUTH_PASSWORD, CURLSSH_AUTH_HOST, CURLSSH_AUTH_KEYBOARD. Set to CURLSSH_AUTH_ANY to let libcurl pick one.\n\n Added in cURL 7.16.1.\n CURLOPT_IPRESOLVE\n Allows an application to select what kind of IP addresses to use when resolving host names. This is only interesting when using host names that resolve addresses using more than one version of IP, possible values are CURL_IPRESOLVE_WHATEVER, CURL_IPRESOLVE_V4, CURL_IPRESOLVE_V6, by default CURL_IPRESOLVE_WHATEVER.\n\n Added in cURL 7.10.8.\n CURLOPT_FTP_FILEMETHOD\n Tell curl which method to use to reach a file on a FTP(S) server. Possible values are CURLFTPMETHOD_MULTICWD, CURLFTPMETHOD_NOCWD and CURLFTPMETHOD_SINGLECWD.\n\n Added in cURL 7.15.1. Available since PHP 5.3.0.\n\nvalue should be a string for the following values of the option parameter:\n\nOption Set value to Notes CURLOPT_CAINFO\n The name of a file holding one or more certificates to verify the peer with. This only makes sense when used in combination with CURLOPT_SSL_VERIFYPEER.\n\n Might require an absolute path.\n CURLOPT_CAPATH\n A directory that holds multiple CA certificates. Use this option alongside CURLOPT_SSL_VERIFYPEER.\n\n\n CURLOPT_COOKIE\n The contents of the \"Cookie: \" header to be used in the HTTP request. Note that multiple cookies are separated with a semicolon followed by a space (e.g., \"fruit=apple; colour=red\")\n\n\n CURLOPT_COOKIEFILE\n The name of the file containing the cookie data. The cookie file can be in Netscape format, or just plain HTTP-style headers dumped into a file. If the name is an empty string, no cookies are loaded, but cookie handling is still enabled.\n\n\n CURLOPT_COOKIEJAR\n The name of a file to save all internal cookies to when the handle is closed, e.g. after a call to curl_close.\n\n\n CURLOPT_CUSTOMREQUEST\n A custom request method to use instead of \"GET\" or \"HEAD\" when doing a HTTP request. This is useful for doing \"DELETE\" or other, more obscure HTTP requests. Valid values are things like \"GET\", \"POST\", \"CONNECT\" and so on; i.e. Do not enter a whole HTTP request line here. For instance, entering \"GET \/index.html HTTP\/1.0\\r\\n\\r\\n\" would be incorrect. Note:\n Don't do this without making sure the server supports the custom request method first.\n\n\n\n\n CURLOPT_DEFAULT_PROTOCOL\n The default protocol to use if the URL is missing a scheme name.\n\n Added in cURL 7.45.0. Available since PHP 7.0.7.\n CURLOPT_DNS_INTERFACE\n Set the name of the network interface that the DNS resolver should bind to. This must be an interface name (not an address).\n\n Added in cURL 7.33.0. Available since PHP 7.0.7.\n CURLOPT_DNS_LOCAL_IP4\n Set the local IPv4 address that the resolver should bind to. The argument should contain a single numerical IPv4 address as a string.\n\n Added in cURL 7.33.0. Available since PHP 7.0.7.\n CURLOPT_DNS_LOCAL_IP6\n Set the local IPv6 address that the resolver should bind to. The argument should contain a single numerical IPv6 address as a string.\n\n Added in cURL 7.33.0. Available since PHP 7.0.7.\n CURLOPT_EGDSOCKET\n Like CURLOPT_RANDOM_FILE, except a filename to an Entropy Gathering Daemon socket.\n\n\n CURLOPT_ENCODING\n The contents of the \"Accept-Encoding: \" header. This enables decoding of the response. Supported encodings are \"identity\", \"deflate\", and \"gzip\". If an empty string, \"\", is set, a header containing all supported encoding types is sent.\n\n Added in cURL 7.10.\n CURLOPT_FTPPORT\n The value which will be used to get the IP address to use for the FTP \"PORT\" instruction. The \"PORT\" instruction tells the remote server to connect to our specified IP address.  The string may be a plain IP address, a hostname, a network interface name (under Unix), or just a plain '-' to use the systems default IP address.\n\n\n CURLOPT_INTERFACE\n The name of the outgoing network interface to use. This can be an interface name, an IP address or a host name.\n\n\n CURLOPT_KEYPASSWD\n The password required to use the CURLOPT_SSLKEY or CURLOPT_SSH_PRIVATE_KEYFILE private key.\n\n Added in cURL 7.16.1.\n CURLOPT_KRB4LEVEL\n The KRB4 (Kerberos 4) security level. Any of the following values (in order from least to most powerful) are valid: \"clear\", \"safe\", \"confidential\", \"private\".. If the string does not match one of these, \"private\" is used. Setting this option to NULL will disable KRB4 security. Currently KRB4 security only works with FTP transactions.\n\n\n CURLOPT_LOGIN_OPTIONS\n Can be used to set protocol specific login options, such as the preferred authentication mechanism via \"AUTH=NTLM\" or \"AUTH=*\", and should be used in conjunction with the CURLOPT_USERNAME option.\n\n Added in cURL 7.34.0. Available since PHP 7.0.7.\n CURLOPT_PINNEDPUBLICKEY\n Set the pinned public key. The string can be the file name of your pinned public key. The file format expected is \"PEM\" or \"DER\". The string can also be any number of base64 encoded sha256 hashes preceded by \"sha256\/\/\" and separated by \";\".\n\n Added in cURL 7.39.0. Available since PHP 7.0.7.\n CURLOPT_POSTFIELDS\n\n The full data to post in a HTTP \"POST\" operation. To post a file, prepend a filename with @ and use the full path. The filetype can be explicitly specified by following the filename with the type in the format ';type=mimetype'. This parameter can either be passed as a urlencoded string like 'para1=val1&para2=val2&...' or as an array with the field name as key and field data as value. If value is an array, the Content-Type header will be set to multipart\/form-data.\n\n As of PHP 5.2.0, value must be an array if files are passed to this option with the @ prefix.\n\n As of PHP 5.5.0, the @ prefix is deprecated and files can be sent using CURLFile. The @ prefix can be disabled for safe passing of values beginning with @ by setting the CURLOPT_SAFE_UPLOAD option to TRUE.\n\n\n\n CURLOPT_PRIVATE\n Any data that should be associated with this cURL handle. This data can subsequently be retrieved with the CURLINFO_PRIVATE option of curl_getinfo(). cURL does nothing with this data. When using a cURL multi handle, this private data is typically a unique key to identify a standard cURL handle.\n\n Added in cURL 7.10.3.\n CURLOPT_PROXY\n The HTTP proxy to tunnel requests through.\n\n\n CURLOPT_PROXY_SERVICE_NAME\n The proxy authentication service name.\n\n Added in cURL 7.34.0. Available since PHP 7.0.7.\n CURLOPT_PROXYUSERPWD\n A username and password formatted as \"[username]:[password]\" to use for the connection to the proxy.\n\n\n CURLOPT_RANDOM_FILE\n A filename to be used to seed the random number generator for SSL.\n\n\n CURLOPT_RANGE\n Range(s) of data to retrieve in the format \"X-Y\" where X or Y are optional. HTTP transfers also support several intervals, separated with commas in the format \"X-Y,N-M\".\n\n\n CURLOPT_REFERER\n The contents of the \"Referer: \" header to be used in a HTTP request.\n\n\n CURLOPT_SERVICE_NAME\n The authentication service name.\n\n Added in cURL 7.43.0. Available since PHP 7.0.7.\n CURLOPT_SSH_HOST_PUBLIC_KEY_MD5\n A string containing 32 hexadecimal digits. The string should be the MD5 checksum of the remote host's public key, and libcurl will reject the connection to the host unless the md5sums match. This option is only for SCP and SFTP transfers.\n\n Added in cURL 7.17.1.\n CURLOPT_SSH_PUBLIC_KEYFILE\n The file name for your public key. If not used, libcurl defaults to $HOME\/.ssh\/id_dsa.pub if the HOME environment variable is set, and just \"id_dsa.pub\" in the current directory if HOME is not set.\n\n Added in cURL 7.16.1.\n CURLOPT_SSH_PRIVATE_KEYFILE\n The file name for your private key. If not used, libcurl defaults to $HOME\/.ssh\/id_dsa if the HOME environment variable is set, and just \"id_dsa\" in the current directory if HOME is not set. If the file is password-protected, set the password with CURLOPT_KEYPASSWD.\n\n Added in cURL 7.16.1.\n CURLOPT_SSL_CIPHER_LIST\n A list of ciphers to use for SSL. For example, RC4-SHA and TLSv1 are valid cipher lists.\n\n\n CURLOPT_SSLCERT\n The name of a file containing a PEM formatted certificate.\n\n\n CURLOPT_SSLCERTPASSWD\n The password required to use the CURLOPT_SSLCERT certificate.\n\n\n CURLOPT_SSLCERTTYPE\n The format of the certificate. Supported formats are \"PEM\" (default), \"DER\", and \"ENG\".\n\n Added in cURL 7.9.3.\n CURLOPT_SSLENGINE\n The identifier for the crypto engine of the private SSL key specified in CURLOPT_SSLKEY.\n\n\n CURLOPT_SSLENGINE_DEFAULT\n The identifier for the crypto engine used for asymmetric crypto operations.\n\n\n CURLOPT_SSLKEY\n The name of a file containing a private SSL key.\n\n\n CURLOPT_SSLKEYPASSWD\n The secret password needed to use the private SSL key specified in CURLOPT_SSLKEY. Note:\n Since this option contains a sensitive password, remember to keep the PHP script it is contained within safe.\n\n\n\n\n CURLOPT_SSLKEYTYPE\n The key type of the private SSL key specified in CURLOPT_SSLKEY. Supported key types are \"PEM\" (default), \"DER\", and \"ENG\".\n\n\n CURLOPT_UNIX_SOCKET_PATH\n Enables the use of Unix domain sockets as connection endpoint and sets the path to the given string.\n\n Added in cURL 7.40.0. Available since PHP 7.0.7.\n CURLOPT_URL\n The URL to fetch. This can also be set when initializing a session with curl_init().\n\n\n CURLOPT_USERAGENT\n The contents of the \"User-Agent: \" header to be used in a HTTP request.\n\n\n CURLOPT_USERNAME\n The user name to use in authentication.\n\n Added in cURL 7.19.1. Available since PHP 5.5.0.\n CURLOPT_USERPWD\n A username and password formatted as \"[username]:[password]\" to use for the connection.\n\n\n CURLOPT_XOAUTH2_BEARER\n Specifies the OAuth 2.0 access token.\n\n Added in cURL 7.33.0. Available since PHP 7.0.7.\n\nvalue should be an array for the following values of the option parameter:\n\nOption Set value to Notes CURLOPT_CONNECT_TO\n Connect to a specific host and port instead of the URL's host and port. Accepts an array of strings with the format HOST:PORT:CONNECT-TO-HOST:CONNECT-TO-PORT.\n\n Added in cURL 7.49.0. Available since PHP 7.0.7.\n CURLOPT_HTTP200ALIASES\n An array of HTTP 200 responses that will be treated as valid responses and not as errors.\n\n Added in cURL 7.10.3.\n CURLOPT_HTTPHEADER\n An array of HTTP header fields to set, in the format\n array('Content-type: text\/plain', 'Content-length: 100')\n\n\n\n CURLOPT_POSTQUOTE\n An array of FTP commands to execute on the server after the FTP request has been performed.\n\n\n CURLOPT_PROXYHEADER\n An array of custom HTTP headers to pass to proxies.\n\n Added in cURL 7.37.0. Available since PHP 7.0.7.\n CURLOPT_QUOTE\n An array of FTP commands to execute on the server prior to the FTP request.\n\n\n CURLOPT_RESOLVE\n Provide a custom address for a specific host and port pair. An array of hostname, port, and IP address strings, each element separated by a colon. In the format:\n array(\"example.com:80:127.0.0.1\")\n\n\n Added in cURL 7.21.3. Available since PHP 5.5.0.\n\nvalue should be a stream resource (using fopen(), for example) for the following values of the option parameter:\n\nOption Set value to CURLOPT_FILE\n The file that the transfer should be written to. The default is STDOUT (the browser window).\n CURLOPT_INFILE\n The file that the transfer should be read from when uploading.\n CURLOPT_STDERR\n An alternative location to output errors to instead of STDERR.\n CURLOPT_WRITEHEADER\n The file that the header part of the transfer is written to.\n\nvalue should be the name of a valid function or a Closure for the following values of the option parameter:\n\nOption Set value to CURLOPT_HEADERFUNCTION\n A callback accepting two parameters. The first is the cURL resource, the second is a string with the header data to be written. The header data must be written by this callback. Return the number of bytes written.\n CURLOPT_PASSWDFUNCTION\n A callback accepting three parameters. The first is the cURL resource, the second is a string containing a password prompt, and the third is the maximum password length. Return the string containing the password.\n CURLOPT_PROGRESSFUNCTION\n\n A callback accepting five parameters. The first is the cURL resource, the second is the total number of bytes expected to be downloaded in this transfer, the third is the number of bytes downloaded so far, the fourth is the total number of bytes expected to be uploaded in this transfer, and the fifth is the number of bytes uploaded so far.\n Note:\n The callback is only called when the CURLOPT_NOPROGRESS option is set to FALSE.\n\n\n Return a non-zero value to abort the transfer. In which case, the transfer will set a CURLE_ABORTED_BY_CALLBACK error.\n\n CURLOPT_READFUNCTION\n A callback accepting three parameters. The first is the cURL resource, the second is a stream resource provided to cURL through the option CURLOPT_INFILE, and the third is the maximum amount of data to be read. The callback must return a string with a length equal or smaller than the amount of data requested, typically by reading it from the passed stream resource. It should return an empty string to signal EOF.\n CURLOPT_WRITEFUNCTION\n A callback accepting two parameters. The first is the cURL resource, and the second is a string with the data to be written. The data must be saved by this callback. It must return the exact number of bytes written or the transfer will be aborted with an error.\n\nOther values:\n\nOption Set value to CURLOPT_SHARE\n A result of curl_share_init(). Makes the cURL handle to use the data from the shared handle."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set an option for a cURL transfer","examples":[{"title":"Example #1 Initializing a new cURL session and fetching a web page","content":"<?php\n\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource\n$ch\u00a0=\u00a0curl_init();\n\n\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0options\ncurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0\"http:\/\/www.example.com\/\");\ncurl_setopt($ch,\u00a0CURLOPT_HEADER,\u00a0false);\n\n\/\/\u00a0grab\u00a0URL\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browser\ncurl_exec($ch);\n\n\/\/\u00a0close\u00a0cURL\u00a0resource,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resources\ncurl_close($ch);\n?>"},{"title":"Example #2 Uploading file (deprecated as of PHP 5.5.0)","content":"<?php\n\n\/*\u00a0http:\/\/localhost\/upload.php:\nprint_r($_POST);\nprint_r($_FILES);\n*\/\n\n$ch\u00a0=\u00a0curl_init();\n\n$data\u00a0=\u00a0array('name'\u00a0=>\u00a0'Foo',\u00a0'file'\u00a0=>\u00a0'@\/home\/user\/test.png');\n\ncurl_setopt($ch,\u00a0CURLOPT_URL,\u00a0'http:\/\/localhost\/upload.php');\ncurl_setopt($ch,\u00a0CURLOPT_POST,\u00a01);\ncurl_setopt($ch,\u00a0CURLOPT_SAFE_UPLOAD,\u00a0false);\u00a0\/\/\u00a0required\u00a0as\u00a0of\u00a0PHP\u00a05.6.0\ncurl_setopt($ch,\u00a0CURLOPT_POSTFIELDS,\u00a0$data);\n\ncurl_exec($ch);\n?>"}]},"curl_setopt_array":{"name":"curl_setopt_array","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."},{"type":"array","name":"$options","description":"An array specifying which options to set and their values. The keys should be valid curl_setopt() constants or their integer equivalents."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set multiple options for a cURL transfer","examples":[{"title":"Example #1 \n     Initializing a new cURL session and fetching a web page\n    ","content":"<?php\n\/\/\u00a0create\u00a0a\u00a0new\u00a0cURL\u00a0resource\n$ch\u00a0=\u00a0curl_init();\n\n\/\/\u00a0set\u00a0URL\u00a0and\u00a0other\u00a0appropriate\u00a0options\n$options\u00a0=\u00a0array(CURLOPT_URL\u00a0=>\u00a0'http:\/\/www.example.com\/',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CURLOPT_HEADER\u00a0=>\u00a0false\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n\ncurl_setopt_array($ch,\u00a0$options);\n\n\/\/\u00a0grab\u00a0URL\u00a0and\u00a0pass\u00a0it\u00a0to\u00a0the\u00a0browser\ncurl_exec($ch);\n\n\/\/\u00a0close\u00a0cURL\u00a0resource,\u00a0and\u00a0free\u00a0up\u00a0system\u00a0resources\ncurl_close($ch);\n?>"},{"title":"Example #2 Our own implementation of curl_setopt_array()","content":"<?php\nif\u00a0(!function_exists('curl_setopt_array'))\u00a0{\n\u00a0\u00a0\u00a0function\u00a0curl_setopt_array(&$ch,\u00a0$curl_options)\n\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach\u00a0($curl_options\u00a0as\u00a0$option\u00a0=>\u00a0$value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(!curl_setopt($ch,\u00a0$option,\u00a0$value))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0true;\n\u00a0\u00a0\u00a0}\n}\n?>"}]},"curl_share_close":{"name":"curl_share_close","parameters":[{"type":"resource","name":"$sh","description":"A cURL share handle returned by curl_share_init()"}],"return":{"type":"void","values":[]},"short":"Close a cURL share handle","examples":[{"title":"Example #1 curl_share_setopt() example","content":"This example will create a cURL share handle, add two cURL handles to it,\n     and then run them with cookie data sharing."}]},"curl_share_errno":{"name":"curl_share_errno","parameters":[{"type":"resource","name":"$sh","description":"A cURL share handle returned by curl_share_init()."}],"return":{"type":"int","values":["FALSE"]},"short":"Return the last share curl error number","examples":[]},"curl_share_init":{"name":"curl_share_init","parameters":[],"return":{"type":"resource","values":[]},"short":"Initialize a cURL share handle","examples":[{"title":"Example #1 curl_share_init() example","content":"This example will create a cURL share handle, add two cURL handles to it,\n     and then run them with cookie data sharing."}]},"curl_share_setopt":{"name":"curl_share_setopt","parameters":[{"type":"resource","name":"$sh","description":"A cURL share handle returned by curl_share_init()."},{"type":"int","name":"$option","description":"\n\nOption Description CURLSHOPT_SHARE\n Specifies a type of data that should be shared.\n CURLSHOPT_UNSHARE\n Specifies a type of data that will be no longer shared."},{"type":"string","name":"$value","description":"\n\nValue Description CURL_LOCK_DATA_COOKIE\n Shares cookie data.\n CURL_LOCK_DATA_DNS\n Shares DNS cache. Note that when you use cURL multi handles, all handles added to the same multi handle will share DNS cache by default.\n CURL_LOCK_DATA_SSL_SESSION\n Shares SSL session IDs, reducing the time spent on the SSL handshake when reconnecting to the same server. Note that SSL session IDs are reused within the same handle by default."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set an option for a cURL share handle","examples":[{"title":"Example #1 curl_share_setopt() example","content":"This example will create a cURL share handle, add two cURL handles to it,\n     and then run them with cookie data sharing."}]},"curl_share_strerror":{"name":"curl_share_strerror","parameters":[{"type":"int","name":"$errornum","description":"One of the \u00bb\u00a0cURL error codes constants."}],"return":{"type":"string","values":["NULL"]},"short":"Return string describing the given error code","examples":[]},"curl_strerror":{"name":"curl_strerror","parameters":[{"type":"int","name":"$errornum","description":"One of the \u00bb\u00a0cURL error codes constants."}],"return":{"type":"string","values":["NULL"]},"short":"Return string describing the given error code","examples":[{"title":"Example #1 curl_errno() example","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0curl\u00a0handle\u00a0with\u00a0a\u00a0mispelled\u00a0protocol\u00a0in\u00a0URL\n$ch\u00a0=\u00a0curl_init(\"htp:\/\/example.com\/\");\n\n\/\/\u00a0Send\u00a0request\ncurl_exec($ch);\n\n\/\/\u00a0Check\u00a0for\u00a0errors\u00a0and\u00a0display\u00a0the\u00a0error\u00a0message\nif($errno\u00a0=\u00a0curl_errno($ch))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$error_message\u00a0=\u00a0curl_strerror($errno);\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"cURL\u00a0error\u00a0({$errno}):\\n\u00a0{$error_message}\";\n}\n\n\/\/\u00a0Close\u00a0the\u00a0handle\ncurl_close($ch);\n?>"}]},"curl_unescape":{"name":"curl_unescape","parameters":[{"type":"resource","name":"$ch","description":"A cURL handle returned by curl_init()."},{"type":"string","name":"$str","description":"The URL encoded string to be decoded."}],"return":{"type":"string","values":["FALSE"]},"short":"Decodes the given URL encoded string","examples":[{"title":"Example #1 curl_escape() example","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0curl\u00a0handle\n$ch\u00a0=\u00a0curl_init('http:\/\/example.com\/redirect.php');\n\n\/\/\u00a0Send\u00a0HTTP\u00a0request\u00a0and\u00a0follow\u00a0redirections\ncurl_setopt($ch,\u00a0CURLOPT_FOLLOWLOCATION,\u00a01);\ncurl_exec($ch);\n\n\/\/\u00a0Get\u00a0the\u00a0last\u00a0effective\u00a0URL\n$effective_url\u00a0=\u00a0curl_getinfo($ch,\u00a0CURLINFO_EFFECTIVE_URL);\n\/\/\u00a0ie.\u00a0\"http:\/\/example.com\/show_location.php?loc=M%C3%BCnchen\"\n\n\/\/\u00a0Decode\u00a0the\u00a0URL\n$effective_url_decoded\u00a0=\u00a0curl_unescape($ch,\u00a0$effective_url);\n\/\/\u00a0\"http:\/\/example.com\/show_location.php?loc=M\u00fcnchen\"\n\n\/\/\u00a0Close\u00a0the\u00a0handle\ncurl_close($ch);\n?>"}]},"curl_version":{"name":"curl_version","parameters":[{"type":"int","name":"$age","default_value":"CURLVERSION_NOW","description":""}],"return":{"type":"array","values":[]},"short":"Gets cURL version information","examples":[{"title":"Example #1 curl_version() example","content":"This example will check which features that's available \n     in cURL build by using the 'features' bitmask returned \n     by curl_version()."}]},"current":{"name":"current","parameters":[{"type":"array","name":"$array","description":"The array."}],"return":{"type":"mixed","values":["FALSE"]},"short":"Return the current element in an array","examples":[{"title":"Example #1 Example use of current() and friends","content":"<?php\n$transport\u00a0=\u00a0array('foot',\u00a0'bike',\u00a0'car',\u00a0'plane');\n$mode\u00a0=\u00a0current($transport);\u00a0\/\/\u00a0$mode\u00a0=\u00a0'foot';\n$mode\u00a0=\u00a0next($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';\n$mode\u00a0=\u00a0current($transport);\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';\n$mode\u00a0=\u00a0prev($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'foot';\n$mode\u00a0=\u00a0end($transport);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'plane';\n$mode\u00a0=\u00a0current($transport);\u00a0\/\/\u00a0$mode\u00a0=\u00a0'plane';\n\n$arr\u00a0=\u00a0array();\nvar_dump(current($arr));\u00a0\/\/\u00a0bool(false)\n\n$arr\u00a0=\u00a0array(array());\nvar_dump(current($arr));\u00a0\/\/\u00a0array(0)\u00a0{\u00a0}\n?>"}]},"date":{"name":"date","parameters":[{"type":"string","name":"$format","description":"The format of the outputted date string. See the formatting options below. There are also several predefined date constants that may be used instead, so for example DATE_RSS contains the format string 'D, d M Y H:i:s'.\n\n\n\nThe following characters are recognized in the format parameter string\n format character Description Example returned values Day --- --- d Day of the month, 2 digits with leading zeros 01 to 31 D A textual representation of a day, three letters Mon through Sun j Day of the month without leading zeros 1 to 31 l (lowercase 'L') A full textual representation of the day of the week Sunday through Saturday N ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0) 1 (for Monday) through 7 (for Sunday) S English ordinal suffix for the day of the month, 2 characters\n st, nd, rd or th.  Works well with j\n w Numeric representation of the day of the week 0 (for Sunday) through 6 (for Saturday) z The day of the year (starting from 0) 0 through 365 Week --- --- W ISO-8601 week number of year, weeks starting on Monday Example: 42 (the 42nd week in the year) Month --- --- F A full textual representation of a month, such as January or March January through December m Numeric representation of a month, with leading zeros 01 through 12 M A short textual representation of a month, three letters Jan through Dec n Numeric representation of a month, without leading zeros 1 through 12 t Number of days in the given month 28 through 31 Year --- --- L Whether it's a leap year 1 if it is a leap year, 0 otherwise. o ISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0) Examples: 1999 or 2003 Y A full numeric representation of a year, 4 digits Examples: 1999 or 2003 y A two digit representation of a year Examples: 99 or 03 Time --- --- a Lowercase Ante meridiem and Post meridiem am or pm A Uppercase Ante meridiem and Post meridiem AM or PM B Swatch Internet time 000 through 999 g 12-hour format of an hour without leading zeros 1 through 12 G 24-hour format of an hour without leading zeros 0 through 23 h 12-hour format of an hour with leading zeros 01 through 12 H 24-hour format of an hour with leading zeros 00 through 23 i Minutes with leading zeros 00 to 59 s Seconds, with leading zeros 00 through 59 u\n Microseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.\n Example: 654321 v\n Milliseconds (added in PHP 7.0.0). Same note applies as for u.\n Example: 654 Timezone --- --- e Timezone identifier (added in PHP 5.1.0) Examples: UTC, GMT, Atlantic\/Azores I (capital i) Whether or not the date is in daylight saving time 1 if Daylight Saving Time, 0 otherwise. O Difference to Greenwich time (GMT) in hours Example: +0200 P Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3) Example: +02:00 T Timezone abbreviation Examples: EST, MDT ... Z Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive. -43200 through 50400 Full Date\/Time --- --- c ISO 8601 date (added in PHP 5) 2004-02-12T15:19:21+00:00 r \u00bb\u00a0RFC 2822 formatted date Example: Thu, 21 Dec 2000 16:01:07 +0200 U Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT) See also time()\n\nUnrecognized characters in the format string will be printed as-is.  The Z format will always return 0 when using gmdate().\n\nNote:\n Since this function only accepts integer timestamps the u format character is only useful when using the date_format() function with user based timestamps created with date_create()."},{"type":"int","name":"$timestamp","default_value":"time()","description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."}],"return":{"type":"string","values":["FALSE","E_WARNING"]},"short":"Format a local time\/date","examples":[{"title":"Example #1 date() examples","content":"<?php\n\/\/\u00a0set\u00a0the\u00a0default\u00a0timezone\u00a0to\u00a0use.\u00a0Available\u00a0since\u00a0PHP\u00a05.1\ndate_default_timezone_set('UTC');\n\n\n\/\/\u00a0Prints\u00a0something\u00a0like:\u00a0Monday\necho\u00a0date(\"l\");\n\n\/\/\u00a0Prints\u00a0something\u00a0like:\u00a0Monday\u00a08th\u00a0of\u00a0August\u00a02005\u00a003:12:46\u00a0PM\necho\u00a0date('l\u00a0jS\u00a0\\of\u00a0F\u00a0Y\u00a0h:i:s\u00a0A');\n\n\/\/\u00a0Prints:\u00a0July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0Saturday\necho\u00a0\"July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0\"\u00a0.\u00a0date(\"l\",\u00a0mktime(0,\u00a00,\u00a00,\u00a07,\u00a01,\u00a02000));\n\n\/*\u00a0use\u00a0the\u00a0constants\u00a0in\u00a0the\u00a0format\u00a0parameter\u00a0*\/\n\/\/\u00a0prints\u00a0something\u00a0like:\u00a0Wed,\u00a025\u00a0Sep\u00a02013\u00a015:28:57\u00a0-0700\necho\u00a0date(DATE_RFC2822);\n\n\/\/\u00a0prints\u00a0something\u00a0like:\u00a02000-07-01T00:00:00+00:00\necho\u00a0date(DATE_ATOM,\u00a0mktime(0,\u00a00,\u00a00,\u00a07,\u00a01,\u00a02000));\n?>"},{"title":"Example #2 Escaping characters in date()","content":"<?php\n\/\/\u00a0prints\u00a0something\u00a0like:\u00a0Wednesday\u00a0the\u00a015th\necho\u00a0date('l\u00a0\\t\\h\\e\u00a0jS');\n?>"},{"title":"Example #3 date() and mktime() example","content":"<?php\n$tomorrow\u00a0\u00a0=\u00a0mktime(0,\u00a00,\u00a00,\u00a0date(\"m\")\u00a0\u00a0,\u00a0date(\"d\")+1,\u00a0date(\"Y\"));\n$lastmonth\u00a0=\u00a0mktime(0,\u00a00,\u00a00,\u00a0date(\"m\")-1,\u00a0date(\"d\"),\u00a0\u00a0\u00a0date(\"Y\"));\n$nextyear\u00a0\u00a0=\u00a0mktime(0,\u00a00,\u00a00,\u00a0date(\"m\"),\u00a0\u00a0\u00a0date(\"d\"),\u00a0\u00a0\u00a0date(\"Y\")+1);\n?>"},{"title":"Example #4 date() Formatting","content":"<?php\n\/\/\u00a0Assuming\u00a0today\u00a0is\u00a0March\u00a010th,\u00a02001,\u00a05:16:18\u00a0pm,\u00a0and\u00a0that\u00a0we\u00a0are\u00a0in\u00a0the\n\/\/\u00a0Mountain\u00a0Standard\u00a0Time\u00a0(MST)\u00a0Time\u00a0Zone\n\n$today\u00a0=\u00a0date(\"F\u00a0j,\u00a0Y,\u00a0g:i\u00a0a\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0March\u00a010,\u00a02001,\u00a05:16\u00a0pm\n$today\u00a0=\u00a0date(\"m.d.y\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a003.10.01\n$today\u00a0=\u00a0date(\"j,\u00a0n,\u00a0Y\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a010,\u00a03,\u00a02001\n$today\u00a0=\u00a0date(\"Ymd\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a020010310\n$today\u00a0=\u00a0date('h-i-s,\u00a0j-m-y,\u00a0it\u00a0is\u00a0w\u00a0Day');\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a005-16-18,\u00a010-03-01,\u00a01631\u00a01618\u00a06\u00a0Satpm01\n$today\u00a0=\u00a0date('\\i\\t\u00a0\\i\\s\u00a0\\t\\h\\e\u00a0jS\u00a0\\d\\a\\y.');\u00a0\u00a0\u00a0\/\/\u00a0it\u00a0is\u00a0the\u00a010th\u00a0day.\n$today\u00a0=\u00a0date(\"D\u00a0M\u00a0j\u00a0G:i:s\u00a0T\u00a0Y\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Sat\u00a0Mar\u00a010\u00a017:16:18\u00a0MST\u00a02001\n$today\u00a0=\u00a0date('H:m:s\u00a0\\m\u00a0\\i\\s\\\u00a0\\m\\o\\n\\t\\h');\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a017:03:18\u00a0m\u00a0is\u00a0month\n$today\u00a0=\u00a0date(\"H:i:s\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a017:16:18\n$today\u00a0=\u00a0date(\"Y-m-d\u00a0H:i:s\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a02001-03-10\u00a017:16:18\u00a0(the\u00a0MySQL\u00a0DATETIME\u00a0format)\n?>"}]},"date_add":{"name":"date_add","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::add()","examples":[]},"date_create":{"name":"date_create","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::__construct()","examples":[]},"date_create_from_format":{"name":"date_create_from_format","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::createFromFormat()","examples":[]},"date_create_immutable":{"name":"date_create_immutable","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTimeImmutable::__construct()","examples":[]},"date_create_immutable_from_format":{"name":"date_create_immutable_from_format","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTimeImmutable::createFromFormat()","examples":[]},"date_date_set":{"name":"date_date_set","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::setDate()","examples":[]},"date_default_timezone_get":{"name":"date_default_timezone_get","parameters":[],"return":{"type":"string","values":[]},"short":"\n   Gets the default timezone used by all date\/time functions in a script\n  ","examples":[{"title":"Example #1 Getting the default timezone","content":"<?php\ndate_default_timezone_set('Europe\/London');\n\nif\u00a0(date_default_timezone_get())\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'date_default_timezone_set:\u00a0'\u00a0.\u00a0date_default_timezone_get()\u00a0.\u00a0'<br\u00a0\/>';\n}\n\nif\u00a0(ini_get('date.timezone'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'date.timezone:\u00a0'\u00a0.\u00a0ini_get('date.timezone');\n}\n\n?>"},{"title":"Example #2 Getting the abbreviation of a timezone","content":"<?php\ndate_default_timezone_set('America\/Los_Angeles');\necho\u00a0date_default_timezone_get()\u00a0.\u00a0'\u00a0=>\u00a0'\u00a0.\u00a0date('e')\u00a0.\u00a0'\u00a0=>\u00a0'\u00a0.\u00a0date('T');\n?>"}]},"date_default_timezone_set":{"name":"date_default_timezone_set","parameters":[{"type":"string","name":"$timezone_identifier","description":"The timezone identifier, like UTC or Europe\/Lisbon. The list of valid identifiers is available in the List of Supported Timezones."}],"return":{"type":"bool","values":["FALSE","TRUE"]},"short":"\n   Sets the default timezone used by all date\/time functions in a script\n  ","examples":[{"title":"Example #1 Getting the default timezone","content":"<?php\ndate_default_timezone_set('America\/Los_Angeles');\n\n$script_tz\u00a0=\u00a0date_default_timezone_get();\n\nif\u00a0(strcmp($script_tz,\u00a0ini_get('date.timezone'))){\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Script\u00a0timezone\u00a0differs\u00a0from\u00a0ini-set\u00a0timezone.';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Script\u00a0timezone\u00a0and\u00a0ini-set\u00a0timezone\u00a0match.';\n}\n?>"}]},"date_diff":{"name":"date_diff","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::diff()","examples":[]},"date_format":{"name":"date_format","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::format()","examples":[]},"date_get_last_errors":{"name":"date_get_last_errors","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::getLastErrors()","examples":[]},"date_interval_create_from_date_string":{"name":"date_interval_create_from_date_string","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateInterval::createFromDateString()","examples":[]},"date_interval_format":{"name":"date_interval_format","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateInterval::format()","examples":[]},"date_isodate_set":{"name":"date_isodate_set","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::setISODate()","examples":[]},"date_modify":{"name":"date_modify","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::modify()","examples":[]},"date_offset_get":{"name":"date_offset_get","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::getOffset()","examples":[]},"date_parse":{"name":"date_parse","parameters":[{"type":"string","name":"$date","description":"Date in format accepted by strtotime()."}],"return":{"type":"array","values":["FALSE"]},"short":"Returns associative array with detailed info about given date","examples":[{"title":"Example #1 A date_parse() example","content":"<?php\nprint_r(date_parse(\"2006-12-12\u00a010:00:00.5\"));\n?>"},{"title":"Example #2 date_parse() with relative formats","content":"<?php\nprint_r(date_parse(\"2006-12-12\u00a010:00:00.5\u00a0+1\u00a0week\u00a0+1\u00a0hour\"));\n?>"}]},"date_parse_from_format":{"name":"date_parse_from_format","parameters":[{"type":"string","name":"$format","description":"Format accepted by DateTime::createFromFormat()."},{"type":"string","name":"$date","description":"String representing the date."}],"return":{"type":"array","values":[]},"short":"Get info about given date formatted according to the specified format","examples":[{"title":"Example #1 date_parse_from_format() example","content":"<?php\n$date\u00a0=\u00a0\"6.1.2009\u00a013:00+01:00\";\nprint_r(date_parse_from_format(\"j.n.Y\u00a0H:iP\",\u00a0$date));\n?>"}]},"date_sub":{"name":"date_sub","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::sub()","examples":[]},"date_sun_info":{"name":"date_sun_info","parameters":[{"type":"int","name":"$time","description":"Timestamp."},{"type":"float","name":"$latitude","description":"Latitude in degrees."},{"type":"float","name":"$longitude","description":"Longitude in degrees."}],"return":{"type":"array","values":{"0":"FALSE","2":"TRUE"}},"short":"Returns an array with information about sunset\/sunrise and twilight begin\/end","examples":[{"title":"Example #1 A date_sun_info() example","content":"<?php\n$sun_info\u00a0=\u00a0date_sun_info(strtotime(\"2006-12-12\"),\u00a031.7667,\u00a035.2333);\nforeach\u00a0($sun_info\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key:\u00a0\"\u00a0.\u00a0date(\"H:i:s\",\u00a0$val)\u00a0.\u00a0\"\\n\";\n}\n?>"},{"title":"Example #2 Polar night","content":"<?php\nvar_dump(date_sun_info(strtotime(\"2017-12-21\"),\u00a090,\u00a00));\n?>"},{"title":"Example #3 Midnight sun","content":"<?php\nvar_dump(date_sun_info(strtotime(\"2017-06-21\"),\u00a090,\u00a00));\n?>"}]},"date_sunrise":{"name":"date_sunrise","parameters":[{"type":"int","name":"$timestamp","description":"The timestamp of the day from which the sunrise time is taken."},{"type":"int","name":"$format","default_value":"SUNFUNCS_RET_STRING","description":"\n\nformat constants\n constant description example SUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp) 1095034606"},{"type":"float","name":"$latitude","default_value":"ini_get(\"date.default_latitude\")","description":"Defaults to North, pass in a negative value for South. See also: date.default_latitude"},{"type":"float","name":"$longitude","default_value":"ini_get(\"date.default_longitude\")","description":"Defaults to East, pass in a negative value for West. See also: date.default_longitude"},{"type":"float","name":"$zenith","default_value":"ini_get(\"date.sunrise_zenith\")","description":"zenith is the angle between the center of the sun and a line perpendicular to earth's surface. It defaults to date.sunrise_zenith\n\nCommon zenith angles\n Angle Description 90\u00b050' Sunrise: the point where the sun becomes visible. 96\u00b0 Civil twilight: conventionally used to signify the start of dawn. 102\u00b0 Nautical twilight: the point at which the horizon starts being visible at sea. 108\u00b0 Astronomical twilight: the point at which the sun starts being the source of any illumination."},{"type":"float","name":"$gmt_offset","default_value":"0"}],"return":{"type":"mixed","values":["FALSE"]},"short":"Returns time of sunrise for a given day and location","examples":[{"title":"Example #1 date_sunrise() example","content":"<?php\n\n\/*\u00a0calculate\u00a0the\u00a0sunrise\u00a0time\u00a0for\u00a0Lisbon,\u00a0Portugal\nLatitude:\u00a038.4\u00a0North\nLongitude:\u00a09\u00a0West\nZenith\u00a0~=\u00a090\noffset:\u00a0+1\u00a0GMT\n*\/\n\necho\u00a0date(\"D\u00a0M\u00a0d\u00a0Y\").\u00a0',\u00a0sunrise\u00a0time\u00a0:\u00a0'\u00a0.date_sunrise(time(),\u00a0SUNFUNCS_RET_STRING,\u00a038.4,\u00a0-9,\u00a090,\u00a01);\n\n?>"},{"title":"Example #2 No sunrise","content":"<?php\n$solstice\u00a0=\u00a0strtotime('2017-12-21');\nvar_dump(date_sunrise($solstice,\u00a0SUNFUNCS_RET_STRING,\u00a069.245833,\u00a0-53.537222));\n?>"}]},"date_sunset":{"name":"date_sunset","parameters":[{"type":"int","name":"$timestamp","description":"The timestamp of the day from which the sunset time is taken."},{"type":"int","name":"$format","default_value":"SUNFUNCS_RET_STRING","description":"\n\nformat constants\n constant description example SUNFUNCS_RET_STRING returns the result as string 16:46 SUNFUNCS_RET_DOUBLE returns the result as float 16.78243132 SUNFUNCS_RET_TIMESTAMP returns the result as integer (timestamp) 1095034606"},{"type":"float","name":"$latitude","default_value":"ini_get(\"date.default_latitude\")","description":"Defaults to North, pass in a negative value for South. See also: date.default_latitude"},{"type":"float","name":"$longitude","default_value":"ini_get(\"date.default_longitude\")","description":"Defaults to East, pass in a negative value for West. See also: date.default_longitude"},{"type":"float","name":"$zenith","default_value":"ini_get(\"date.sunset_zenith\")","description":"zenith is the angle between the center of the sun and a line perpendicular to earth's surface. It defaults to date.sunset_zenith\n\nCommon zenith angles\n Angle Description 90\u00b050' Sunset: the point where the sun becomes invisible. 96\u00b0 Civil twilight: conventionally used to signify the end of dusk. 102\u00b0 Nautical twilight: the point at which the horizon ends being visible at sea. 108\u00b0 Astronomical twilight: the point at which the sun ends being the source of any illumination."},{"type":"float","name":"$gmt_offset","default_value":"0"}],"return":{"type":"mixed","values":["FALSE"]},"short":"\n   Returns time of sunset for a given day and location\n  ","examples":[{"title":"Example #1 date_sunset() example","content":"<?php\n\n\/*\u00a0calculate\u00a0the\u00a0sunset\u00a0time\u00a0for\u00a0Lisbon,\u00a0Portugal\nLatitude:\u00a038.4\u00a0North\nLongitude:\u00a09\u00a0West\nZenith\u00a0~=\u00a090\noffset:\u00a0+1\u00a0GMT\n*\/\n\necho\u00a0date(\"D\u00a0M\u00a0d\u00a0Y\").\u00a0',\u00a0sunset\u00a0time\u00a0:\u00a0'\u00a0.date_sunset(time(),\u00a0SUNFUNCS_RET_STRING,\u00a038.4,\u00a0-9,\u00a090,\u00a01);\n\n?>"},{"title":"Example #2 No sunset","content":"<?php\n$solstice\u00a0=\u00a0strtotime('2017-12-21');\nvar_dump(date_sunset($solstice,\u00a0SUNFUNCS_RET_STRING,\u00a069.245833,\u00a0-53.537222));\n?>"}]},"date_time_set":{"name":"date_time_set","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::setTime()","examples":[]},"date_timestamp_get":{"name":"date_timestamp_get","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::getTimestamp()","examples":[]},"date_timestamp_set":{"name":"date_timestamp_set","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::setTimestamp()","examples":[]},"date_timezone_get":{"name":"date_timezone_get","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::getTimezone()","examples":[]},"date_timezone_set":{"name":"date_timezone_set","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTime::setTimezone()","examples":[]},"dcgettext":{"name":"dcgettext","parameters":[{"type":"string","name":"$domain","description":"The domain"},{"type":"string","name":"$message","description":"The message"},{"type":"int","name":"$category","description":"The category"}],"return":{"type":"string","values":[]},"short":"Overrides the domain for a single lookup","examples":[]},"dcngettext":{"name":"dcngettext","parameters":[{"type":"string","name":"$domain","description":"The domain"},{"type":"string","name":"$msgid1","description":""},{"type":"string","name":"$msgid2","description":""},{"type":"int","name":"$n","description":""},{"type":"int","name":"$category","description":""}],"return":{"type":"string","values":[]},"short":"Plural version of dcgettext","examples":[]},"debug_backtrace":{"name":"debug_backtrace","parameters":[{"type":"int","name":"$options","default_value":"DEBUG_BACKTRACE_PROVIDE_OBJECT","description":"As of 5.3.6, this parameter is a bitmask for the following options:\n\ndebug_backtrace() options\n DEBUG_BACKTRACE_PROVIDE_OBJECT\n Whether or not to populate the \"object\" index.\n DEBUG_BACKTRACE_IGNORE_ARGS\n Whether or not to omit the \"args\" index, and thus all the function\/method arguments, to save memory.\n\nTRUE\n\nFALSE\n\nDEBUG_BACKTRACE_PROVIDE_OBJECT"},{"type":"int","name":"$limit","default_value":"0","description":"As of 5.4.0, this parameter can be used to limit the number of stack frames returned. By default (limit=0) it returns all stack frames."}],"return":{"type":"array","values":[]},"short":"Generates a backtrace","examples":[{"title":"Example #1 debug_backtrace() example","content":"<?php\n\/\/\u00a0filename:\u00a0\/tmp\/a.php\n\nfunction\u00a0a_test($str)\n{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\\nHi:\u00a0$str\";\n\u00a0\u00a0\u00a0\u00a0var_dump(debug_backtrace());\n}\n\na_test('friend');\n?>\n\n<?php\n\/\/\u00a0filename:\u00a0\/tmp\/b.php\ninclude_once\u00a0'\/tmp\/a.php';\n?>"}]},"debug_print_backtrace":{"name":"debug_print_backtrace","parameters":[{"type":"int","name":"$options","default_value":"0","description":"As of 5.3.6, this parameter is a bitmask for the following options:\n\ndebug_print_backtrace() options\n DEBUG_BACKTRACE_IGNORE_ARGS\n Whether or not to omit the \"args\" index, and thus all the function\/method arguments, to save memory."},{"type":"int","name":"$limit","default_value":"0","description":"As of 5.4.0, this parameter can be used to limit the number of stack frames printed. By default (limit=0) it prints all stack frames."}],"return":{"type":"void","values":[]},"short":"\n     Prints a backtrace\n    ","examples":[{"title":"Example #1 debug_print_backtrace() example","content":"<?php\n\/\/\u00a0include.php\u00a0file\n\nfunction\u00a0a()\u00a0{\n\u00a0\u00a0\u00a0\u00a0b();\n}\n\nfunction\u00a0b()\u00a0{\n\u00a0\u00a0\u00a0\u00a0c();\n}\n\nfunction\u00a0c(){\n\u00a0\u00a0\u00a0\u00a0debug_print_backtrace();\n}\n\na();\n\n?>"}]},"debug_zval_dump":{"name":"debug_zval_dump","parameters":[{"type":"mixed","name":"$variable","description":"The variable being evaluated."},{"type":"mixed","name":"$..."}],"return":{"type":"void","values":[]},"short":"Dumps a string representation of an internal zend value to output","examples":[{"title":"Example #1 debug_zval_dump() example","content":"<?php\n$var1\u00a0=\u00a0'Hello\u00a0World';\n$var2\u00a0=\u00a0'';\n\n$var2\u00a0=&\u00a0$var1;\n\ndebug_zval_dump(&$var1);\n?>"}]},"decbin":{"name":"decbin","parameters":[{"type":"int","name":"$number","description":"Decimal value to convert\n\nRange of inputs on 32-bit machines\n positive number negative number return value 0 \u00a0 0 1 \u00a0 1 2 \u00a0 10 ... normal progression ... 2147483646 \u00a0 1111111111111111111111111111110 2147483647 (largest signed integer) \u00a0 1111111111111111111111111111111 (31 1's) 2147483648 -2147483648 10000000000000000000000000000000 ... normal progression ... 4294967294 -2 11111111111111111111111111111110 4294967295 (largest unsigned integer) -1 11111111111111111111111111111111 (32 1's)\n\nRange of inputs on 64-bit machines\n positive number negative number return value 0 \u00a0 0 1 \u00a0 1 2 \u00a0 10 ... normal progression ... 9223372036854775806 \u00a0 111111111111111111111111111111111111111111111111111111111111110 9223372036854775807 (largest signed integer) \u00a0 111111111111111111111111111111111111111111111111111111111111111 (63 1's) \u00a0 -9223372036854775808 1000000000000000000000000000000000000000000000000000000000000000 ... normal progression ... \u00a0 -2 1111111111111111111111111111111111111111111111111111111111111110 \u00a0 -1 1111111111111111111111111111111111111111111111111111111111111111 (64 1's)"}],"return":{"type":"string","values":[]},"short":"Decimal to binary","examples":[{"title":"Example #1 decbin() example","content":"<?php\necho\u00a0decbin(12)\u00a0.\u00a0\"\\n\";\necho\u00a0decbin(26);\n?>"}]},"dechex":{"name":"dechex","parameters":[{"type":"int","name":"$number","description":"The decimal value to convert.\n\nAs PHP's integer type is signed, but dechex() deals with unsigned integers, negative integers will be treated as though they were unsigned."}],"return":{"type":"string","values":[]},"short":"Decimal to hexadecimal","examples":[{"title":"Example #1 dechex() example","content":"<?php\necho\u00a0dechex(10)\u00a0.\u00a0\"\\n\";\necho\u00a0dechex(47);\n?>"},{"title":"Example #2 dechex() example with large integers","content":"<?php\n\/\/\u00a0The\u00a0output\u00a0below\u00a0assumes\u00a0a\u00a032-bit\u00a0platform.\n\/\/\u00a0Note\u00a0that\u00a0the\u00a0output\u00a0is\u00a0the\u00a0same\u00a0for\u00a0all\u00a0values.\necho\u00a0dechex(-1).\"\\n\";\necho\u00a0dechex(PHP_INT_MAX\u00a0*\u00a02\u00a0+\u00a01).\"\\n\";\necho\u00a0dechex(pow(2,\u00a032)\u00a0-\u00a01).\"\\n\";\n?>"}]},"decoct":{"name":"decoct","parameters":[{"type":"int","name":"$number","description":"Decimal value to convert"}],"return":{"type":"string","values":[]},"short":"Decimal to octal","examples":[{"title":"Example #1 decoct() example","content":"<?php\necho\u00a0decoct(15)\u00a0.\u00a0\"\\n\";\necho\u00a0decoct(264);\n?>"}]},"define":{"name":"define","parameters":[{"type":"string","name":"$name","description":"The name of the constant."},{"type":"mixed","name":"$value","description":"The value of the constant. In PHP 5, value must be a scalar value (integer, float, string, boolean, or NULL). In PHP 7, array values are also accepted.\n\nWarning\n While it is possible to define resource constants, it is not recommended and may cause unpredictable behavior."},{"type":"bool","name":"$case_insensitive","default_value":"FALSE","description":"If set to TRUE, the constant will be defined case-insensitive. The default behavior is case-sensitive; i.e. CONSTANT and Constant represent different values.\n\nNote:\n Case-insensitive constants are stored as lower-case."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Defines a named constant","examples":[{"title":"Example #1 Defining Constants","content":"<?php\ndefine(\"CONSTANT\",\u00a0\"Hello\u00a0world.\");\necho\u00a0CONSTANT;\u00a0\/\/\u00a0outputs\u00a0\"Hello\u00a0world.\"\necho\u00a0Constant;\u00a0\/\/\u00a0outputs\u00a0\"Constant\"\u00a0and\u00a0issues\u00a0a\u00a0notice.\n\ndefine(\"GREETING\",\u00a0\"Hello\u00a0you.\",\u00a0true);\necho\u00a0GREETING;\u00a0\/\/\u00a0outputs\u00a0\"Hello\u00a0you.\"\necho\u00a0Greeting;\u00a0\/\/\u00a0outputs\u00a0\"Hello\u00a0you.\"\n\n\/\/\u00a0Works\u00a0as\u00a0of\u00a0PHP\u00a07\ndefine('ANIMALS',\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'dog',\n\u00a0\u00a0\u00a0\u00a0'cat',\n\u00a0\u00a0\u00a0\u00a0'bird'\n));\necho\u00a0ANIMALS[1];\u00a0\/\/\u00a0outputs\u00a0\"cat\"\n\n?>"}]},"defined":{"name":"defined","parameters":[{"type":"string","name":"$name","description":"The constant name."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks whether a given named constant exists","examples":[{"title":"Example #1 Checking Constants","content":"<?php\n\/*\u00a0Note\u00a0the\u00a0use\u00a0of\u00a0quotes,\u00a0this\u00a0is\u00a0important.\u00a0\u00a0This\u00a0example\u00a0is\u00a0checking\n\u00a0*\u00a0if\u00a0the\u00a0string\u00a0'TEST'\u00a0is\u00a0the\u00a0name\u00a0of\u00a0a\u00a0constant\u00a0named\u00a0TEST\u00a0*\/\nif\u00a0(defined('TEST'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0TEST;\n}\n?>"}]},"deflate_add":{"name":"deflate_add","parameters":[{"type":"resource","name":"$context","description":"A context created with deflate_init()."},{"type":"string","name":"$data","description":"A chunk of data to compress."},{"type":"int","name":"$flush_mode","default_value":"ZLIB_SYNC_FLUSH","description":"One of ZLIB_BLOCK, ZLIB_NO_FLUSH, ZLIB_PARTIAL_FLUSH, ZLIB_SYNC_FLUSH (default), ZLIB_FULL_FLUSH, ZLIB_FINISH. Normally you will want to set ZLIB_NO_FLUSH to maximize compression, and ZLIB_FINISH to terminate with the last chunk of data. See the \u00bb\u00a0zlib manual for a detailed description of these constants."}],"return":{"type":"string","values":["FALSE"]},"short":"Incrementally deflate data","examples":[]},"deflate_init":{"name":"deflate_init","parameters":[{"type":"int","name":"$encoding","description":"One of the ZLIB_ENCODING_* constants."},{"type":"array","name":"$options","default_value":"array()","description":"An associative array which may contain the following elements:\n\nlevel\n\n\n\n The compression level in range -1..9; defaults to -1.\n\n\n\n\n\n memory\n\n\n\n The compression memory level in range 1..9; defaults to 8.\n\n\n\n\n\n window\n\n\n\n The zlib window size (logarithmic) in range 8..15; defaults to 15.\n\n\n\n\n\n strategy\n\n\n\n One of ZLIB_FILTERED, ZLIB_HUFFMAN_ONLY, ZLIB_RLE, ZLIB_FIXED or ZLIB_DEFAULT_STRATEGY (the default).\n\n\n\n\n\n dictionary\n\n\n\n A string or an array of strings of the preset dictionary (default: no preset dictionary)."}],"return":{"type":"resource","values":["FALSE"]},"short":"Initialize an incremental deflate context","examples":[]},"deg2rad":{"name":"deg2rad","parameters":[{"type":"float","name":"$number","description":"Angular value in degrees"}],"return":{"type":"float","values":[]},"short":"\n   Converts the number in degrees to the radian equivalent\n  ","examples":[{"title":"Example #1 deg2rad() example","content":"<?php\n\necho\u00a0deg2rad(45);\u00a0\/\/\u00a00.785398163397\nvar_dump(deg2rad(45)\u00a0===\u00a0M_PI_4);\u00a0\/\/\u00a0bool(true)\n\n?>"}]},"dgettext":{"name":"dgettext","parameters":[{"type":"string","name":"$domain","description":"The domain"},{"type":"string","name":"$message","description":"The message"}],"return":{"type":"string","values":[]},"short":"Override the current domain","examples":[]},"dir":{"name":"dir","parameters":[{"type":"string","name":"$directory","description":"Directory to open"},{"type":"resource","name":"$context","description":"\n\nNote: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams."}],"return":{"type":"Directory","values":["NULL","FALSE"]},"short":"Return an instance of the Directory class","examples":[{"title":"Example #1 dir() example","content":"Please note the fashion in which Directory::read()'s\n     return value is checked in the example below. We are explicitly\n     testing whether the return value is identical to (equal to and of\n     the same type as - see \n     Comparison Operators for more information) FALSE since\n     otherwise, any directory entry whose name evaluates to FALSE will\n     stop the loop."}]},"dirname":{"name":"dirname","parameters":[{"type":"string","name":"$path","description":"A path.\n\nOn Windows, both slash (\/) and backslash (\\) are used as directory separator character. In other environments, it is the forward slash (\/)."},{"type":"int","name":"$levels","default_value":"1","description":"The number of parent directories to go up.\n\nThis must be an integer greater than 0."}],"return":{"type":"string","values":[]},"short":"Returns a parent directory's path","examples":[{"title":"Example #1 dirname() example","content":"<?php\necho\u00a0dirname(\"\/etc\/passwd\")\u00a0.\u00a0PHP_EOL;\necho\u00a0dirname(\"\/etc\/\")\u00a0.\u00a0PHP_EOL;\necho\u00a0dirname(\".\")\u00a0.\u00a0PHP_EOL;\necho\u00a0dirname(\"C:\\\\\")\u00a0.\u00a0PHP_EOL;\necho\u00a0dirname(\"\/usr\/local\/lib\",\u00a02);"}]},"disk_free_space":{"name":"disk_free_space","parameters":[{"type":"string","name":"$directory","description":"A directory of the filesystem or disk partition.\n\nNote:\n Given a file name instead of a directory, the behaviour of the function is unspecified and may differ between operating systems and PHP versions."}],"return":{"type":"float","values":["FALSE"]},"short":"Returns available space on filesystem or disk partition","examples":[{"title":"Example #1 disk_free_space() example","content":"<?php\n\/\/\u00a0$df\u00a0contains\u00a0the\u00a0number\u00a0of\u00a0bytes\u00a0available\u00a0on\u00a0\"\/\"\n$df\u00a0=\u00a0disk_free_space(\"\/\");\n\n\/\/\u00a0On\u00a0Windows:\n$df_c\u00a0=\u00a0disk_free_space(\"C:\");\n$df_d\u00a0=\u00a0disk_free_space(\"D:\");\n?>"}]},"disk_total_space":{"name":"disk_total_space","parameters":[{"type":"string","name":"$directory","description":"A directory of the filesystem or disk partition."}],"return":{"type":"float","values":["FALSE"]},"short":"Returns the total size of a filesystem or disk partition","examples":[{"title":"Example #1 disk_total_space() example","content":"<?php\n\/\/\u00a0$ds\u00a0contains\u00a0the\u00a0total\u00a0number\u00a0of\u00a0bytes\u00a0available\u00a0on\u00a0\"\/\"\n$ds\u00a0=\u00a0disk_total_space(\"\/\");\n\n\/\/\u00a0On\u00a0Windows:\n$ds\u00a0=\u00a0disk_total_space(\"C:\");\n$ds\u00a0=\u00a0disk_total_space(\"D:\");\n?>"}]},"diskfreespace":{"name":"diskfreespace","parameters":[],"return":{"type":"","values":[]},"short":"Alias of disk_free_space()","examples":[]},"dl":{"name":"dl","parameters":[{"type":"string","name":"$library","description":"This parameter is only the filename of the extension to load which also depends on your platform. For example, the sockets extension (if compiled as a shared module, not the default!) would be called sockets.so on Unix platforms whereas it is called php_sockets.dll on the Windows platform.\n\nThe directory where the extension is loaded from depends on your platform:\n\nWindows - If not explicitly set in the php.ini, the extension is loaded from C:\\php5\\ by default.\n\nUnix - If not explicitly set in the php.ini, the default extension directory depends on\n\nwhether PHP has been built with --enable-debug or not\n\n\n\n whether PHP has been built with (experimental) ZTS (Zend Thread Safety) support or not\n\n\n\n the current internal ZEND_MODULE_API_NO (Zend internal module API number, which is basically the date on which a major module API change happened, e.g. 20010901)\n\n<install-dir>\/lib\/php\/extensions\/ <debug-or-not>-<zts-or-not>-ZEND_MODULE_API_NO\n\n\/usr\/local\/php\/lib\/php\/extensions\/debug-non-zts-20010901\n\n\/usr\/local\/php\/lib\/php\/extensions\/no-debug-zts-20010901"}],"return":{"type":"bool","values":{"0":"TRUE","1":"FALSE","2":"E_ERROR","4":"E_WARNING"}},"short":"Loads a PHP extension at runtime","examples":[{"title":"Example #1 dl() examples","content":"<?php\n\/\/\u00a0Example\u00a0loading\u00a0an\u00a0extension\u00a0based\u00a0on\u00a0OS\nif\u00a0(!extension_loaded('sqlite'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(strtoupper(substr(PHP_OS,\u00a00,\u00a03))\u00a0===\u00a0'WIN')\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dl('php_sqlite.dll');\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dl('sqlite.so');\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/\u00a0Or\u00a0using\u00a0PHP_SHLIB_SUFFIX\u00a0constant\nif\u00a0(!extension_loaded('sqlite'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$prefix\u00a0=\u00a0(PHP_SHLIB_SUFFIX\u00a0===\u00a0'dll')\u00a0?\u00a0'php_'\u00a0:\u00a0'';\n\u00a0\u00a0\u00a0\u00a0dl($prefix\u00a0.\u00a0'sqlite.'\u00a0.\u00a0PHP_SHLIB_SUFFIX);\n}\n?>"}]},"dngettext":{"name":"dngettext","parameters":[{"type":"string","name":"$domain","description":"The domain"},{"type":"string","name":"$msgid1","description":""},{"type":"string","name":"$msgid2","description":""},{"type":"int","name":"$n","description":""}],"return":{"type":"string","values":[]},"short":"Plural version of dgettext","examples":[]},"dns_check_record":{"name":"dns_check_record","parameters":[],"return":{"type":"","values":[]},"short":"Alias of checkdnsrr()","examples":[]},"dns_get_mx":{"name":"dns_get_mx","parameters":[],"return":{"type":"","values":[]},"short":"Alias of getmxrr()","examples":[]},"dns_get_record":{"name":"dns_get_record","parameters":[{"type":"string","name":"$hostname","description":"hostname should be a valid DNS hostname such as \"www.example.com\". Reverse lookups can be generated using in-addr.arpa notation, but gethostbyaddr() is more suitable for the majority of reverse lookups.\n\nNote:\n Per DNS standards, email addresses are given in user.host format (for example: hostmaster.example.com as opposed to hostmaster@example.com), be sure to check this value and modify if necessary before using it with a functions such as mail()."},{"type":"int","name":"$type","default_value":"DNS_ANY","description":"By default, dns_get_record() will search for any resource records associated with hostname. To limit the query, specify the optional type parameter. May be any one of the following: DNS_A, DNS_CNAME, DNS_HINFO, DNS_CAA, DNS_MX, DNS_NS, DNS_PTR, DNS_SOA, DNS_TXT, DNS_AAAA, DNS_SRV, DNS_NAPTR, DNS_A6, DNS_ALL or DNS_ANY.\n\nNote:\n Because of eccentricities in the performance of libresolv between platforms, DNS_ANY will not always return every record, the slower DNS_ALL will collect all records more reliably."},{"type":"bool","name":"$raw","default_value":"FALSE","description":"In case of raw mode, we query only the requested type instead of looping type by type before going with the additional info stuff."}],"return":{"type":"array","values":["FALSE"]},"short":"Fetch DNS Resource Records associated with a hostname","examples":[{"title":"Example #1 Using dns_get_record()","content":"<?php\n$result\u00a0=\u00a0dns_get_record(\"php.net\");\nprint_r($result);\n?>"},{"title":"Example #2 Using dns_get_record() and DNS_ANY","content":"Since it's very common to want the IP address of a mail server\n     once the MX record has been resolved, dns_get_record()\n     also returns an array in addtl which\n     contains associate records.  authns\n     is returned as well containing a list of authoritative name\n     servers."}]},"dom_import_simplexml":{"name":"dom_import_simplexml","parameters":[{"type":"SimpleXMLElement","name":"$node","description":"The SimpleXMLElement node."}],"return":{"type":"DOMElement","values":["FALSE"]},"short":"\n   Gets a DOMElement object from a\n   SimpleXMLElement object\n  ","examples":[{"title":"Example #1 Import SimpleXML into DOM with dom_import_simplexml()","content":"<?php\n\n$sxe\u00a0=\u00a0simplexml_load_string('<books><book><title>blah<\/title><\/book><\/books>');\n\nif\u00a0($sxe\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error\u00a0while\u00a0parsing\u00a0the\u00a0document';\n\u00a0\u00a0\u00a0\u00a0exit;\n}\n\n$dom_sxe\u00a0=\u00a0dom_import_simplexml($sxe);\nif\u00a0(!$dom_sxe)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error\u00a0while\u00a0converting\u00a0XML';\n\u00a0\u00a0\u00a0\u00a0exit;\n}\n\n$dom\u00a0=\u00a0new\u00a0DOMDocument('1.0');\n$dom_sxe\u00a0=\u00a0$dom->importNode($dom_sxe,\u00a0true);\n$dom_sxe\u00a0=\u00a0$dom->appendChild($dom_sxe);\n\necho\u00a0$dom->saveXML();\n\n?>"}]},"doubleval":{"name":"doubleval","parameters":[],"return":{"type":"","values":[]},"short":"Alias of floatval()","examples":[]},"each":{"name":"each","parameters":[],"return":{"type":"array","values":["FALSE"]},"short":"Return the current key and value pair from an array and advance the array cursor","examples":[{"title":"Example #1 each() examples","content":"<?php\n$foo\u00a0=\u00a0array(\"bob\",\u00a0\"fred\",\u00a0\"jussi\",\u00a0\"jouni\",\u00a0\"egon\",\u00a0\"marliese\");\n$bar\u00a0=\u00a0each($foo);\nprint_r($bar);\n?>"},{"title":"Example #2 Traversing an array with each()","content":"<?php\n$fruit\u00a0=\u00a0array('a'\u00a0=>\u00a0'apple',\u00a0'b'\u00a0=>\u00a0'banana',\u00a0'c'\u00a0=>\u00a0'cranberry');\n\nreset($fruit);\nwhile\u00a0(list($key,\u00a0$val)\u00a0=\u00a0each($fruit))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=>\u00a0$val\\n\";\n}\n?>"}]},"easter_date":{"name":"easter_date","parameters":[{"type":"int","name":"$year","default_value":"date(\"Y\")","description":"The year as a number between 1970 an 2037. If omitted, defaults to the current year according to the local time."}],"return":{"type":"int","values":[]},"short":"Get Unix timestamp for midnight on Easter of a given year","examples":[{"title":"Example #1 easter_date() example","content":"<?php\n\necho\u00a0date(\"M-d-Y\",\u00a0easter_date(1999));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Apr-04-1999\necho\u00a0date(\"M-d-Y\",\u00a0easter_date(2000));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Apr-23-2000\necho\u00a0date(\"M-d-Y\",\u00a0easter_date(2001));\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Apr-15-2001\n\n?>"}]},"easter_days":{"name":"easter_days","parameters":[{"type":"int","name":"$year","default_value":"date(\"Y\")","description":"The year as a positive number. If omitted, defaults to the current year according to the local time."},{"type":"int","name":"$method","default_value":"CAL_EASTER_DEFAULT","description":"Allows Easter dates to be calculated based on the Gregorian calendar during the years 1582 - 1752 when set to CAL_EASTER_ROMAN. See the calendar constants for more valid constants."}],"return":{"type":"int","values":[]},"short":"Get number of days after March 21 on which Easter falls for a given year","examples":[{"title":"Example #1 easter_days() example","content":"<?php\n\necho\u00a0easter_days(1999);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a014,\u00a0i.e.\u00a0April\u00a04\necho\u00a0easter_days(1492);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a032,\u00a0i.e.\u00a0April\u00a022\necho\u00a0easter_days(1913);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0\u00a02,\u00a0i.e.\u00a0March\u00a023\n\n?>"}]},"end":{"name":"end","parameters":[],"return":{"type":"mixed","values":["FALSE"]},"short":"Set the internal pointer of an array to its last element","examples":[{"title":"Example #1 end() example","content":"<?php\n\n$fruits\u00a0=\u00a0array('apple',\u00a0'banana',\u00a0'cranberry');\necho\u00a0end($fruits);\u00a0\/\/\u00a0cranberry\n\n?>"}]},"error_clear_last":{"name":"error_clear_last","parameters":[],"return":{"type":"void","values":[]},"short":"Clear the most recent error","examples":[{"title":"Example #1 An error_clear_last() example","content":"<?php\nvar_dump(error_get_last());\nerror_clear_last();\nvar_dump(error_get_last());\n\n@$a\u00a0=\u00a0$b;\n\nvar_dump(error_get_last());\nerror_clear_last();\nvar_dump(error_get_last());\n?>"}]},"error_get_last":{"name":"error_get_last","parameters":[],"return":{"type":"array","values":["NULL"]},"short":"Get the last occurred error","examples":[{"title":"Example #1 An error_get_last() example","content":"<?php\necho\u00a0$a;\nprint_r(error_get_last());\n?>"}]},"error_log":{"name":"error_log","parameters":[{"type":"string","name":"$message","description":"The error message that should be logged."},{"type":"int","name":"$message_type","default_value":"0","description":"Says where the error should go. The possible message types are as follows:\n\n\n\nerror_log() log types\n 0\n message is sent to PHP's system logger, using the Operating System's system logging mechanism or a file, depending on what the error_log configuration directive is set to.  This is the default option.\n 1\n message is sent by email to the address in the destination parameter.  This is the only message type where the fourth parameter, extra_headers is used.\n 2\n No longer an option.\n 3\n message is appended to the file destination. A newline is not automatically added to the end of the message string.\n 4\n message is sent directly to the SAPI logging handler."},{"type":"string","name":"$destination","description":"The destination. Its meaning depends on the message_type parameter as described above."},{"type":"string","name":"$extra_headers","description":"The extra headers. It's used when the message_type parameter is set to 1. This message type uses the same internal function as mail() does."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Send an error message to the defined error handling routines","examples":[{"title":"Example #1 error_log() examples","content":"<?php\n\/\/\u00a0Send\u00a0notification\u00a0through\u00a0the\u00a0server\u00a0log\u00a0if\u00a0we\u00a0can\u00a0not\n\/\/\u00a0connect\u00a0to\u00a0the\u00a0database.\nif\u00a0(!Ora_Logon($username,\u00a0$password))\u00a0{\n\u00a0\u00a0\u00a0\u00a0error_log(\"Oracle\u00a0database\u00a0not\u00a0available!\",\u00a00);\n}\n\n\/\/\u00a0Notify\u00a0administrator\u00a0by\u00a0email\u00a0if\u00a0we\u00a0run\u00a0out\u00a0of\u00a0FOO\nif\u00a0(!($foo\u00a0=\u00a0allocate_new_foo()))\u00a0{\n\u00a0\u00a0\u00a0\u00a0error_log(\"Big\u00a0trouble,\u00a0we're\u00a0all\u00a0out\u00a0of\u00a0FOOs!\",\u00a01,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"operator@example.com\");\n}\n\n\/\/\u00a0another\u00a0way\u00a0to\u00a0call\u00a0error_log():\nerror_log(\"You\u00a0messed\u00a0up!\",\u00a03,\u00a0\"\/var\/tmp\/my-errors.log\");\n?>"}]},"error_reporting":{"name":"error_reporting","parameters":[{"type":"int","name":"$level","description":"The new error_reporting level. It takes on either a bitmask, or named constants. Using named constants is strongly encouraged to ensure compatibility for future versions. As error levels are added, the range of integers increases, so older integer-based error levels will not always behave as expected.\n\nThe available error level constants and the actual meanings of these error levels are described in the predefined constants."}],"return":{"type":"int","values":[]},"short":"Sets which PHP errors are reported","examples":[{"title":"Example #1 error_reporting() examples","content":"<?php\n\n\/\/\u00a0Turn\u00a0off\u00a0all\u00a0error\u00a0reporting\nerror_reporting(0);\n\n\/\/\u00a0Report\u00a0simple\u00a0running\u00a0errors\nerror_reporting(E_ERROR\u00a0|\u00a0E_WARNING\u00a0|\u00a0E_PARSE);\n\n\/\/\u00a0Reporting\u00a0E_NOTICE\u00a0can\u00a0be\u00a0good\u00a0too\u00a0(to\u00a0report\u00a0uninitialized\n\/\/\u00a0variables\u00a0or\u00a0catch\u00a0variable\u00a0name\u00a0misspellings\u00a0...)\nerror_reporting(E_ERROR\u00a0|\u00a0E_WARNING\u00a0|\u00a0E_PARSE\u00a0|\u00a0E_NOTICE);\n\n\/\/\u00a0Report\u00a0all\u00a0errors\u00a0except\u00a0E_NOTICE\nerror_reporting(E_ALL\u00a0&\u00a0~E_NOTICE);\n\n\/\/\u00a0Report\u00a0all\u00a0PHP\u00a0errors\u00a0(see\u00a0changelog)\nerror_reporting(E_ALL);\n\n\/\/\u00a0Report\u00a0all\u00a0PHP\u00a0errors\nerror_reporting(-1);\n\n\/\/\u00a0Same\u00a0as\u00a0error_reporting(E_ALL);\nini_set('error_reporting',\u00a0E_ALL);\n\n?>"}]},"escapeshellarg":{"name":"escapeshellarg","parameters":[{"type":"string","name":"$arg","description":"The argument that will be escaped."}],"return":{"type":"string","values":[]},"short":"Escape a string to be used as a shell argument","examples":[{"title":"Example #1 escapeshellarg() example","content":"<?php\nsystem('ls\u00a0'.escapeshellarg($dir));\n?>"}]},"escapeshellcmd":{"name":"escapeshellcmd","parameters":[{"type":"string","name":"$command","description":"The command that will be escaped."}],"return":{"type":"string","values":[]},"short":"Escape shell metacharacters","examples":[{"title":"Example #1 escapeshellcmd() example","content":"<?php\n\/\/\u00a0We\u00a0allow\u00a0arbitrary\u00a0number\u00a0of\u00a0arguments\u00a0intentionally\u00a0here.\n$command\u00a0=\u00a0'.\/configure\u00a0'.$_POST['configure_options'];\n\n$escaped_command\u00a0=\u00a0escapeshellcmd($command);\n\u00a0\nsystem($escaped_command);\n?>"}]},"exec":{"name":"exec","parameters":[{"type":"string","name":"$command","description":"The command that will be executed."}],"return":{"type":"string","values":[]},"short":"Execute an external program","examples":[{"title":"Example #1 An exec() example","content":"<?php\n\/\/\u00a0outputs\u00a0the\u00a0username\u00a0that\u00a0owns\u00a0the\u00a0running\u00a0php\/httpd\u00a0process\n\/\/\u00a0(on\u00a0a\u00a0system\u00a0with\u00a0the\u00a0\"whoami\"\u00a0executable\u00a0in\u00a0the\u00a0path)\necho\u00a0exec('whoami');\n?>"}]},"exif_imagetype":{"name":"exif_imagetype","parameters":[{"type":"string","name":"$filename","description":"The image being checked."}],"return":{"type":"int","values":["FALSE"]},"short":"Determine the type of an image","examples":[{"title":"Example #1 exif_imagetype() example","content":"<?php\nif\u00a0(exif_imagetype('image.gif')\u00a0!=\u00a0IMAGETYPE_GIF)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'The\u00a0picture\u00a0is\u00a0not\u00a0a\u00a0gif';\n}\n?>"}]},"exif_read_data":{"name":"exif_read_data","parameters":[{"type":"mixed","name":"$stream","description":"The location of the image file. This can either be a path to the file (stream wrappers are also supported as usual) or a stream resource."},{"type":"string","name":"$sections","default_value":"NULL","description":"Is a comma separated list of sections that need to be present in file to produce a result array.  If none of the requested sections could be found the return value is FALSE.\n\nFILE FileName, FileSize, FileDateTime, SectionsFound COMPUTED\n html, Width, Height, IsColor, and more if available.  Height and Width are computed the same way getimagesize() does so their values must not be part of any header returned. Also, html is a height\/width text string to be used inside normal HTML.\n ANY_TAG Any information that has a Tag e.g. IFD0, EXIF, ... IFD0\n All tagged data of IFD0. In normal imagefiles this contains image size and so forth.\n THUMBNAIL\n A file is supposed to contain a thumbnail if it has a second IFD. All tagged information about the embedded thumbnail is stored in this section.\n COMMENT Comment headers of JPEG images. EXIF\n The EXIF section is a sub section of IFD0. It contains more detailed information about an image. Most of these entries are digital camera related."},{"type":"bool","name":"$arrays","default_value":"FALSE","description":"Specifies whether or not each section becomes an array. The sections COMPUTED, THUMBNAIL, and COMMENT always become arrays as they may contain values whose names conflict with other sections."},{"type":"bool","name":"$thumbnail","default_value":"FALSE","description":"When set to TRUE the thumbnail itself is read.  Otherwise, only the tagged data is read."}],"return":{"type":"array","values":["FALSE"]},"short":"Reads the EXIF headers from an image file","examples":[{"title":"Example #1 exif_read_data() example","content":"<?php\necho\u00a0\"test1.jpg:<br\u00a0\/>\\n\";\n$exif\u00a0=\u00a0exif_read_data('tests\/test1.jpg',\u00a0'IFD0');\necho\u00a0$exif===false\u00a0?\u00a0\"No\u00a0header\u00a0data\u00a0found.<br\u00a0\/>\\n\"\u00a0:\u00a0\"Image\u00a0contains\u00a0headers<br\u00a0\/>\\n\";\n\n$exif\u00a0=\u00a0exif_read_data('tests\/test2.jpg',\u00a00,\u00a0true);\necho\u00a0\"test2.jpg:<br\u00a0\/>\\n\";\nforeach\u00a0($exif\u00a0as\u00a0$key\u00a0=>\u00a0$section)\u00a0{\n\u00a0\u00a0\u00a0\u00a0foreach\u00a0($section\u00a0as\u00a0$name\u00a0=>\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key.$name:\u00a0$val<br\u00a0\/>\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"},{"title":"Example #2 exif_read_data() with streams available as of PHP 7.2.0","content":"<?php\n\/\/\u00a0Open\u00a0a\u00a0the\u00a0file,\u00a0this\u00a0should\u00a0be\u00a0in\u00a0binary\u00a0mode\n$fp\u00a0=\u00a0fopen('\/path\/to\/image.jpg',\u00a0'rb');\n\nif\u00a0(!$fp)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error:\u00a0Unable\u00a0to\u00a0open\u00a0image\u00a0for\u00a0reading';\n\u00a0\u00a0\u00a0\u00a0exit;\n}\n\n\/\/\u00a0Attempt\u00a0to\u00a0read\u00a0the\u00a0exif\u00a0headers\n$headers\u00a0=\u00a0exif_read_data($fp);\n\nif\u00a0(!$headers)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error:\u00a0Unable\u00a0to\u00a0read\u00a0exif\u00a0headers';\n\u00a0\u00a0\u00a0\u00a0exit;\n}\n\n\/\/\u00a0Print\u00a0the\u00a0'COMPUTED'\u00a0headers\necho\u00a0'EXIF\u00a0Headers:'\u00a0.\u00a0PHP_EOL;\n\nforeach\u00a0($headers['COMPUTED']\u00a0as\u00a0$header\u00a0=>\u00a0$value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0printf('\u00a0%s\u00a0=>\u00a0%s%s',\u00a0$header,\u00a0$value,\u00a0PHP_EOL);\n}\n?>"}]},"exif_tagname":{"name":"exif_tagname","parameters":[{"type":"int","name":"$index","description":"The Tag ID for which a Tag Name will be looked up."}],"return":{"type":"string","values":["FALSE"]},"short":"Get the header name for an index","examples":[{"title":"Example #1 exif_tagname() example","content":"<?php\necho\u00a0\"256:\u00a0\".exif_tagname(256).PHP_EOL;\necho\u00a0\"257:\u00a0\".exif_tagname(257).PHP_EOL;\n?>"}]},"exif_thumbnail":{"name":"exif_thumbnail","parameters":[{"type":"mixed","name":"$stream","description":"The location of the image file. This can either be a path to the file or a stream resource."}],"return":{"type":"string","values":["FALSE"]},"short":"Retrieve the embedded thumbnail of an image","examples":[{"title":"Example #1 exif_thumbnail() example","content":"<?php\n$image\u00a0=\u00a0exif_thumbnail('\/path\/to\/image.jpg',\u00a0$width,\u00a0$height,\u00a0$type);\n\nif\u00a0($image!==false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0header('Content-type:\u00a0'\u00a0.image_type_to_mime_type($type));\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$image;\n\u00a0\u00a0\u00a0\u00a0exit;\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0no\u00a0thumbnail\u00a0available,\u00a0handle\u00a0the\u00a0error\u00a0here\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'No\u00a0thumbnail\u00a0available';\n}\n?>"}]},"exp":{"name":"exp","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Calculates the exponent of e","examples":[{"title":"Example #1 exp() example","content":"<?php\necho\u00a0exp(12)\u00a0.\u00a0\"\\n\";\necho\u00a0exp(5.7);\n?>"}]},"explode":{"name":"explode","parameters":[{"type":"string","name":"$delimiter","description":"The boundary string."},{"type":"string","name":"$string","description":"The input string."},{"type":"int","name":"$limit","default_value":"PHP_INT_MAX","description":"If limit is set and positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string.\n\nIf the limit parameter is negative, all components except the last -limit are returned.\n\nIf the limit parameter is zero, then this is treated as 1."}],"return":{"type":"array","values":["FALSE"]},"short":"Split a string by a string","examples":[{"title":"Example #1 explode() examples","content":"<?php\n\/\/\u00a0Example\u00a01\n$pizza\u00a0\u00a0=\u00a0\"piece1\u00a0piece2\u00a0piece3\u00a0piece4\u00a0piece5\u00a0piece6\";\n$pieces\u00a0=\u00a0explode(\"\u00a0\",\u00a0$pizza);\necho\u00a0$pieces[0];\u00a0\/\/\u00a0piece1\necho\u00a0$pieces[1];\u00a0\/\/\u00a0piece2\n\n\/\/\u00a0Example\u00a02\n$data\u00a0=\u00a0\"foo:*:1023:1000::\/home\/foo:\/bin\/sh\";\nlist($user,\u00a0$pass,\u00a0$uid,\u00a0$gid,\u00a0$gecos,\u00a0$home,\u00a0$shell)\u00a0=\u00a0explode(\":\",\u00a0$data);\necho\u00a0$user;\u00a0\/\/\u00a0foo\necho\u00a0$pass;\u00a0\/\/\u00a0*\n\n?>"},{"title":"Example #2 explode() return examples","content":"<?php\n\/*\u00a0\n\u00a0\u00a0\u00a0A\u00a0string\u00a0that\u00a0doesn't\u00a0contain\u00a0the\u00a0delimiter\u00a0will\u00a0simply\n\u00a0\u00a0\u00a0return\u00a0a\u00a0one-length\u00a0array\u00a0of\u00a0the\u00a0original\u00a0string.\n*\/\n$input1\u00a0=\u00a0\"hello\";\n$input2\u00a0=\u00a0\"hello,there\";\n$input3\u00a0=\u00a0',';\nvar_dump(\u00a0explode(\u00a0',',\u00a0$input1\u00a0)\u00a0);\nvar_dump(\u00a0explode(\u00a0',',\u00a0$input2\u00a0)\u00a0);\nvar_dump(\u00a0explode(\u00a0',',\u00a0$input3\u00a0)\u00a0);\n\n?>"},{"title":"Example #3 limit parameter examples","content":"<?php\n$str\u00a0=\u00a0'one|two|three|four';\n\n\/\/\u00a0positive\u00a0limit\nprint_r(explode('|',\u00a0$str,\u00a02));\n\n\/\/\u00a0negative\u00a0limit\u00a0(since\u00a0PHP\u00a05.1)\nprint_r(explode('|',\u00a0$str,\u00a0-1));\n?>"}]},"expm1":{"name":"expm1","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"\n   Returns exp(number) - 1, computed in a way that is accurate even\n   when the value of number is close to zero\n  ","examples":[]},"extension_loaded":{"name":"extension_loaded","parameters":[{"type":"string","name":"$name","description":"The extension name. This parameter is case-insensitive.\n\nYou can see the names of various extensions by using phpinfo() or if you're using the CGI or CLI version of PHP you can use the -m switch to list all available extensions:\n\n$ php -m [PHP Modules] xml tokenizer standard sockets session posix pcre overload mysql mbstring ctype\n [Zend Modules]"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Find out whether an extension is loaded","examples":[{"title":"Example #1 extension_loaded() example","content":"<?php\nif\u00a0(!extension_loaded('gd'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(!dl('gd.so'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit;\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"extract":{"name":"extract","parameters":[{"type":"int","name":"$flags","default_value":"EXTR_OVERWRITE","description":"The way invalid\/numeric keys and collisions are treated is determined by the extraction flags. It can be one of the following values:\n\nEXTR_OVERWRITE\n\n\n\n If there is a collision, overwrite the existing variable.\n\n\n\n\n\n EXTR_SKIP\n\n\n\n If there is a collision, don't overwrite the existing variable.\n\n\n\n\n\n EXTR_PREFIX_SAME\n\n\n If there is a collision, prefix the variable name with prefix.\n\n\n\n\n\n EXTR_PREFIX_ALL\n\n\n\n Prefix all variable names with prefix.\n\n\n\n\n\n EXTR_PREFIX_INVALID\n\n\n\n Only prefix invalid\/numeric variable names with prefix.\n\n\n\n\n\n EXTR_IF_EXISTS\n\n\n\n Only overwrite the variable if it already exists in the current symbol table, otherwise do nothing.  This is useful for defining a list of valid variables and then extracting only those variables you have defined out of $_REQUEST, for example.\n\n\n\n\n\n EXTR_PREFIX_IF_EXISTS\n\n\n\n Only create prefixed variable names if the non-prefixed version of the same variable exists in the current symbol table.\n\n\n\n\n\n EXTR_REFS\n\n\n\n Extracts variables as references. This effectively means that the values of the imported variables are still referencing the values of the array parameter. You can use this flag on its own or combine it with any other flag by OR'ing the flags.\n\nIf flags is not specified, it is assumed to be EXTR_OVERWRITE."},{"type":"string","name":"$prefix","default_value":"NULL","description":"Note that prefix is only required if flags is EXTR_PREFIX_SAME, EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID or EXTR_PREFIX_IF_EXISTS. If the prefixed result is not a valid variable name, it is not imported into the symbol table. Prefixes are automatically separated from the array key by an underscore character."}],"return":{"type":"int","values":[]},"short":"Import variables into the current symbol table from an array","examples":[{"title":"Example #1 extract() example","content":"A possible use for extract() is to import into the\n     symbol table variables contained in an associative array returned by\n     wddx_deserialize()."}]},"ezmlm_hash":{"name":"ezmlm_hash","parameters":[{"type":"string","name":"$addr","description":"The email address that's being hashed."}],"return":{"type":"int","values":[]},"short":"Calculate the hash value needed by EZMLM","examples":[{"title":"Example #1 Calculating the hash and subscribing a user","content":"<?php\n\n$user\u00a0=\u00a0\"joecool@example.com\";\n$hash\u00a0=\u00a0ezmlm_hash($user);\n$query\u00a0=\u00a0sprintf(\"INSERT\u00a0INTO\u00a0sample\u00a0VALUES\u00a0(%s,\u00a0'%s')\",\u00a0$hash,\u00a0$user);\n$db->query($query);\u00a0\/\/\u00a0using\u00a0PHPLIB\u00a0db\u00a0interface\n\n?>"}]},"fclose":{"name":"fclose","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Closes an open file pointer","examples":[{"title":"Example #1 A simple fclose() example","content":"<?php\n\n$handle\u00a0=\u00a0fopen('somefile.txt',\u00a0'r');\n\nfclose($handle);\n\n?>"}]},"feof":{"name":"feof","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose())."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Tests for end-of-file on a file pointer","examples":[]},"fflush":{"name":"fflush","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose())."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Flushes the output to a file","examples":[{"title":"Example #1 File write example using fflush()","content":"<?php\n$filename\u00a0=\u00a0'bar.txt';\n\n$file\u00a0=\u00a0fopen($filename,\u00a0'r+');\nrewind($file);\nfwrite($file,\u00a0'Foo');\nfflush($file);\nftruncate($file,\u00a0ftell($file));\nfclose($file);\n?>"}]},"fgetc":{"name":"fgetc","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose())."}],"return":{"type":"string","values":["FALSE"]},"short":"Gets character from file pointer","examples":[{"title":"Example #1 A fgetc() example","content":"<?php\n$fp\u00a0=\u00a0fopen('somefile.txt',\u00a0'r');\nif\u00a0(!$fp)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0open\u00a0file\u00a0somefile.txt';\n}\nwhile\u00a0(false\u00a0!==\u00a0($char\u00a0=\u00a0fgetc($fp)))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$char\\n\";\n}\n?>"}]},"fgetcsv":{"name":"fgetcsv","parameters":[{"type":"resource","name":"$handle","description":"A valid file pointer to a file successfully opened by fopen(), popen(), or fsockopen()."},{"type":"int","name":"$length","default_value":"0","description":"Must be greater than the longest line (in characters) to be found in the CSV file (allowing for trailing line-end characters). Otherwise the line is split in chunks of length characters, unless the split would occur inside an enclosure.\n\nOmitting this parameter (or setting it to 0 in PHP 5.1.0 and later) the maximum line length is not limited, which is slightly slower."},{"type":"string","name":"$delimiter","default_value":"\",\"","description":"The optional delimiter parameter sets the field delimiter (one character only)."},{"type":"string","name":"$enclosure","default_value":"'\"'","description":"The optional enclosure parameter sets the field enclosure character (one character only)."},{"type":"string","name":"$escape","default_value":"\"\\\\\"","description":"The optional escape parameter sets the escape character (one character only).\n\nNote:\n Usually an enclosure character is escpaped inside a field by doubling it; however, the escape character can be used as an alternative. So for the default parameter values \"\" and \\\" have the same meaning. Other than allowing to escape the enclosure character the escape character has no special meaning; it isn't even meant to escape itself."}],"return":{"type":"array","values":["NULL","FALSE"]},"short":"Gets line from file pointer and parse for CSV fields","examples":[{"title":"Example #1 Read and print the entire contents of a CSV file","content":"<?php\n$row\u00a0=\u00a01;\nif\u00a0(($handle\u00a0=\u00a0fopen(\"test.csv\",\u00a0\"r\"))\u00a0!==\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0while\u00a0(($data\u00a0=\u00a0fgetcsv($handle,\u00a01000,\u00a0\",\"))\u00a0!==\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$num\u00a0=\u00a0count($data);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"<p>\u00a0$num\u00a0fields\u00a0in\u00a0line\u00a0$row:\u00a0<br\u00a0\/><\/p>\\n\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$row++;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for\u00a0($c=0;\u00a0$c\u00a0<\u00a0$num;\u00a0$c++)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$data[$c]\u00a0.\u00a0\"<br\u00a0\/>\\n\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0fclose($handle);\n}\n?>"}]},"fgets":{"name":"fgets","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose())."},{"type":"int","name":"$length","description":"Reading ends when length - 1 bytes have been read, or a newline (which is included in the return value), or an EOF (whichever comes first). If no length is specified, it will keep reading from the stream until it reaches the end of the line.\n\nNote:\n Until PHP 4.3.0, omitting it would assume 1024 as the line length. If the majority of the lines in the file are all larger than 8KB, it is more resource efficient for your script to specify the maximum line length."}],"return":{"type":"string","values":["FALSE"]},"short":"Gets line from file pointer","examples":[{"title":"Example #1 Reading a file line by line","content":"<?php\n$handle\u00a0=\u00a0@fopen(\"\/tmp\/inputfile.txt\",\u00a0\"r\");\nif\u00a0($handle)\u00a0{\n\u00a0\u00a0\u00a0\u00a0while\u00a0(($buffer\u00a0=\u00a0fgets($handle,\u00a04096))\u00a0!==\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$buffer;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0if\u00a0(!feof($handle))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error:\u00a0unexpected\u00a0fgets()\u00a0fail\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0fclose($handle);\n}\n?>"}]},"fgetss":{"name":"fgetss","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose())."},{"type":"int","name":"$length","description":"Length of the data to be retrieved."},{"type":"string","name":"$allowable_tags","description":"You can use the optional third parameter to specify tags which should not be stripped. See strip_tags() for details regarding allowable_tags."}],"return":{"type":"string","values":["FALSE"]},"short":"Gets line from file pointer and strip HTML tags","examples":[{"title":"Example #1 Reading a PHP file line-by-line","content":"<?php\n$str\u00a0=\u00a0<<<EOD\n<html><body>\n\u00a0<p>Welcome!\u00a0Today\u00a0is\u00a0the\u00a0<?php\u00a0echo(date('jS'));\u00a0?>\u00a0of\u00a0<?=\u00a0date('F');\u00a0?>.<\/p>\n<\/body><\/html>\nText\u00a0outside\u00a0of\u00a0the\u00a0HTML\u00a0block.\nEOD;\nfile_put_contents('sample.php',\u00a0$str);\n\n$handle\u00a0=\u00a0@fopen(\"sample.php\",\u00a0\"r\");\nif\u00a0($handle)\u00a0{\n\u00a0\u00a0\u00a0\u00a0while\u00a0(!feof($handle))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$buffer\u00a0=\u00a0fgetss($handle,\u00a04096);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$buffer;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0fclose($handle);\n}\n?>"}]},"file":{"name":"file","parameters":[{"type":"string","name":"$filename","description":"Path to the file.\n\nTipA URL can be used as a filename with this function if the fopen wrappers have been enabled. See fopen() for more details on how to specify the filename. See the Supported Protocols and Wrappers for links to information about what abilities the various wrappers have, notes on their usage, and information on any predefined variables they may provide."},{"type":"int","name":"$flags","default_value":"0","description":"The optional parameter flags can be one, or more, of the following constants:\n\nFILE_USE_INCLUDE_PATH\n\n\n\n\n Search for the file in the include_path.\n\n\n\n\n\n\n FILE_IGNORE_NEW_LINES\n\n\n\n\n Do not add newline at the end of each array element\n\n\n\n\n\n\n FILE_SKIP_EMPTY_LINES\n\n\n\n\n Skip empty lines"},{"type":"resource","name":"$context","description":"A context resource created with the stream_context_create() function.\n\n\n\nNote: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams."}],"return":{"type":"array","values":["FALSE"]},"short":"Reads entire file into an array","examples":[{"title":"Example #1 file() example","content":"<?php\n\/\/\u00a0Get\u00a0a\u00a0file\u00a0into\u00a0an\u00a0array.\u00a0\u00a0In\u00a0this\u00a0example\u00a0we'll\u00a0go\u00a0through\u00a0HTTP\u00a0to\u00a0get\n\/\/\u00a0the\u00a0HTML\u00a0source\u00a0of\u00a0a\u00a0URL.\n$lines\u00a0=\u00a0file('http:\/\/www.example.com\/');\n\n\/\/\u00a0Loop\u00a0through\u00a0our\u00a0array,\u00a0show\u00a0HTML\u00a0source\u00a0as\u00a0HTML\u00a0source;\u00a0and\u00a0line\u00a0numbers\u00a0too.\nforeach\u00a0($lines\u00a0as\u00a0$line_num\u00a0=>\u00a0$line)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Line\u00a0#<b>{$line_num}<\/b>\u00a0:\u00a0\"\u00a0.\u00a0htmlspecialchars($line)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\n}\n\n\/\/\u00a0Another\u00a0example,\u00a0let's\u00a0get\u00a0a\u00a0web\u00a0page\u00a0into\u00a0a\u00a0string.\u00a0\u00a0See\u00a0also\u00a0file_get_contents().\n$html\u00a0=\u00a0implode('',\u00a0file('http:\/\/www.example.com\/'));\n\n\/\/\u00a0Using\u00a0the\u00a0optional\u00a0flags\u00a0parameter\u00a0since\u00a0PHP\u00a05\n$trimmed\u00a0=\u00a0file('somefile.txt',\u00a0FILE_IGNORE_NEW_LINES\u00a0|\u00a0FILE_SKIP_EMPTY_LINES);\n?>"}]},"file_exists":{"name":"file_exists","parameters":[{"type":"string","name":"$filename","description":"Path to the file or directory.\n\nOn windows, use \/\/computername\/share\/filename or \\\\computername\\share\\filename to check files on network shares."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks whether a file or directory exists","examples":[{"title":"Example #1 Testing whether a file exists","content":"<?php\n$filename\u00a0=\u00a0'\/path\/to\/foo.txt';\n\nif\u00a0(file_exists($filename))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0file\u00a0$filename\u00a0exists\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0file\u00a0$filename\u00a0does\u00a0not\u00a0exist\";\n}\n?>"}]},"file_get_contents":{"name":"file_get_contents","parameters":[{"type":"string","name":"$filename","description":"Name of the file to read."},{"type":"bool","name":"$use_include_path","default_value":"FALSE","description":"Note:\n As of PHP 5 the FILE_USE_INCLUDE_PATH constant can be used to trigger include path search. This is not possible if strict typing is enabled, since FILE_USE_INCLUDE_PATH is an int. Use TRUE instead."},{"type":"resource","name":"$context","description":"A valid context resource created with stream_context_create(). If you don't need to use a custom context, you can skip this parameter by NULL."},{"type":"int","name":"$offset","default_value":"0","description":"The offset where the reading starts on the original stream. Negative offsets count from the end of the stream.\n\nSeeking (offset) is not supported with remote files. Attempting to seek on non-local files may work with small offsets, but this is unpredictable because it works on the buffered stream."},{"type":"int","name":"$maxlen","description":"Maximum length of data read. The default is to read until end of file is reached. Note that this parameter is applied to the stream processed by the filters."}],"return":{"type":"string","values":["FALSE"]},"short":"Reads entire file into a string","examples":[{"title":"Example #1 Get and output the source of the homepage of a website","content":"<?php\n$homepage\u00a0=\u00a0file_get_contents('http:\/\/www.example.com\/');\necho\u00a0$homepage;\n?>"},{"title":"Example #2 Searching within the include_path","content":"<?php\n\/\/\u00a0<=\u00a0PHP\u00a05\n$file\u00a0=\u00a0file_get_contents('.\/people.txt',\u00a0true);\n\/\/\u00a0>\u00a0PHP\u00a05\n$file\u00a0=\u00a0file_get_contents('.\/people.txt',\u00a0FILE_USE_INCLUDE_PATH);\n?>"},{"title":"Example #3 Reading a section of a file","content":"<?php\n\/\/\u00a0Read\u00a014\u00a0characters\u00a0starting\u00a0from\u00a0the\u00a021st\u00a0character\n$section\u00a0=\u00a0file_get_contents('.\/people.txt',\u00a0NULL,\u00a0NULL,\u00a020,\u00a014);\nvar_dump($section);\n?>"},{"title":"Example #4 Using stream contexts","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0stream\n$opts\u00a0=\u00a0array(\n\u00a0\u00a0'http'=>array(\n\u00a0\u00a0\u00a0\u00a0'method'=>\"GET\",\n\u00a0\u00a0\u00a0\u00a0'header'=>\"Accept-language:\u00a0en\\r\\n\"\u00a0.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cookie:\u00a0foo=bar\\r\\n\"\n\u00a0\u00a0)\n);\n\n$context\u00a0=\u00a0stream_context_create($opts);\n\n\/\/\u00a0Open\u00a0the\u00a0file\u00a0using\u00a0the\u00a0HTTP\u00a0headers\u00a0set\u00a0above\n$file\u00a0=\u00a0file_get_contents('http:\/\/www.example.com\/',\u00a0false,\u00a0$context);\n?>"}]},"file_put_contents":{"name":"file_put_contents","parameters":[{"type":"string","name":"$filename","description":"Path to the file where to write the data."},{"type":"mixed","name":"$data","description":"The data to write. Can be either a string, an array or a stream resource.\n\nIf data is a stream resource, the remaining buffer of that stream will be copied to the specified file. This is similar with using stream_copy_to_stream().\n\nYou can also specify the data parameter as a single dimension array. This is equivalent to file_put_contents($filename, implode('', $array))."},{"type":"int","name":"$flags","default_value":"0","description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator.\n\n\n\nAvailable flags\n Flag Description\n FILE_USE_INCLUDE_PATH\n\n Search for filename in the include directory. See include_path for more information.\n\n FILE_APPEND\n\n If file filename already exists, append the data to the file instead of overwriting it.\n\n LOCK_EX\n\n Acquire an exclusive lock on the file while proceeding to the writing. In other words, a flock() call happens between the fopen() call and the fwrite() call. This is not identical to an fopen() call with mode \"x\"."},{"type":"resource","name":"$context","description":"A valid context resource created with stream_context_create()."}],"return":{"type":"int","values":["FALSE"]},"short":"Write a string to a file","examples":[{"title":"Example #1 Simple usage example","content":"<?php\n$file\u00a0=\u00a0'people.txt';\n\/\/\u00a0Open\u00a0the\u00a0file\u00a0to\u00a0get\u00a0existing\u00a0content\n$current\u00a0=\u00a0file_get_contents($file);\n\/\/\u00a0Append\u00a0a\u00a0new\u00a0person\u00a0to\u00a0the\u00a0file\n$current\u00a0.=\u00a0\"John\u00a0Smith\\n\";\n\/\/\u00a0Write\u00a0the\u00a0contents\u00a0back\u00a0to\u00a0the\u00a0file\nfile_put_contents($file,\u00a0$current);\n?>"},{"title":"Example #2 Using flags","content":"<?php\n$file\u00a0=\u00a0'people.txt';\n\/\/\u00a0The\u00a0new\u00a0person\u00a0to\u00a0add\u00a0to\u00a0the\u00a0file\n$person\u00a0=\u00a0\"John\u00a0Smith\\n\";\n\/\/\u00a0Write\u00a0the\u00a0contents\u00a0to\u00a0the\u00a0file,\u00a0\n\/\/\u00a0using\u00a0the\u00a0FILE_APPEND\u00a0flag\u00a0to\u00a0append\u00a0the\u00a0content\u00a0to\u00a0the\u00a0end\u00a0of\u00a0the\u00a0file\n\/\/\u00a0and\u00a0the\u00a0LOCK_EX\u00a0flag\u00a0to\u00a0prevent\u00a0anyone\u00a0else\u00a0writing\u00a0to\u00a0the\u00a0file\u00a0at\u00a0the\u00a0same\u00a0time\nfile_put_contents($file,\u00a0$person,\u00a0FILE_APPEND\u00a0|\u00a0LOCK_EX);\n?>"}]},"fileatime":{"name":"fileatime","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"int","values":["FALSE"]},"short":"Gets last access time of file","examples":[{"title":"Example #1 fileatime() example","content":"<?php\n\n\/\/\u00a0outputs\u00a0e.g.\u00a0\u00a0somefile.txt\u00a0was\u00a0last\u00a0accessed:\u00a0December\u00a029\u00a02002\u00a022:16:23.\n\n$filename\u00a0=\u00a0'somefile.txt';\nif\u00a0(file_exists($filename))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$filename\u00a0was\u00a0last\u00a0accessed:\u00a0\"\u00a0.\u00a0date(\"F\u00a0d\u00a0Y\u00a0H:i:s.\",\u00a0fileatime($filename));\n}\n\n?>"}]},"filectime":{"name":"filectime","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"int","values":["FALSE"]},"short":"Gets inode change time of file","examples":[{"title":"Example #1 A filectime() example","content":"<?php\n\n\/\/\u00a0outputs\u00a0e.g.\u00a0\u00a0somefile.txt\u00a0was\u00a0last\u00a0changed:\u00a0December\u00a029\u00a02002\u00a022:16:23.\n\n$filename\u00a0=\u00a0'somefile.txt';\nif\u00a0(file_exists($filename))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$filename\u00a0was\u00a0last\u00a0changed:\u00a0\"\u00a0.\u00a0date(\"F\u00a0d\u00a0Y\u00a0H:i:s.\",\u00a0filectime($filename));\n}\n\n?>"}]},"filegroup":{"name":"filegroup","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"int","values":["FALSE"]},"short":"Gets file group","examples":[{"title":"Example #1 Finding the group of a file","content":"<?php\n$filename\u00a0=\u00a0'index.php';\nprint_r(posix_getgrgid(filegroup($filename)));\n?>"}]},"fileinode":{"name":"fileinode","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"int","values":["FALSE"]},"short":"Gets file inode","examples":[{"title":"Example #1 Comparing the inode of a file with the current file","content":"<?php\n$filename\u00a0=\u00a0'index.php';\nif\u00a0(getmyinode()\u00a0==\u00a0fileinode($filename))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'You\u00a0are\u00a0checking\u00a0the\u00a0current\u00a0file.';\n}\n?>"}]},"filemtime":{"name":"filemtime","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"int","values":["FALSE"]},"short":"Gets file modification time","examples":[{"title":"Example #1 filemtime() example","content":"<?php\n\/\/\u00a0outputs\u00a0e.g.\u00a0\u00a0somefile.txt\u00a0was\u00a0last\u00a0modified:\u00a0December\u00a029\u00a02002\u00a022:16:23.\n\n$filename\u00a0=\u00a0'somefile.txt';\nif\u00a0(file_exists($filename))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$filename\u00a0was\u00a0last\u00a0modified:\u00a0\"\u00a0.\u00a0date\u00a0(\"F\u00a0d\u00a0Y\u00a0H:i:s.\",\u00a0filemtime($filename));\n}\n?>"}]},"fileowner":{"name":"fileowner","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"int","values":["FALSE"]},"short":"Gets file owner","examples":[{"title":"Example #1 Finding the owner of a file","content":"<?php\n$filename\u00a0=\u00a0'index.php';\nprint_r(posix_getpwuid(fileowner($filename)));\n?>"}]},"fileperms":{"name":"fileperms","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"int","values":[]},"short":"Gets file permissions","examples":[{"title":"Example #1 Display permissions as an octal value","content":"<?php\necho\u00a0substr(sprintf('%o',\u00a0fileperms('\/tmp')),\u00a0-4);\necho\u00a0substr(sprintf('%o',\u00a0fileperms('\/etc\/passwd')),\u00a0-4);\n?>"},{"title":"Example #2 Display full permissions","content":"<?php\n$perms\u00a0=\u00a0fileperms('\/etc\/passwd');\n\nswitch\u00a0($perms\u00a0&\u00a00xF000)\u00a0{\n\u00a0\u00a0\u00a0\u00a0case\u00a00xC000:\u00a0\/\/\u00a0socket\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0's';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0case\u00a00xA000:\u00a0\/\/\u00a0symbolic\u00a0link\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'l';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0case\u00a00x8000:\u00a0\/\/\u00a0regular\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'r';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0case\u00a00x6000:\u00a0\/\/\u00a0block\u00a0special\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'b';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0case\u00a00x4000:\u00a0\/\/\u00a0directory\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'd';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0case\u00a00x2000:\u00a0\/\/\u00a0character\u00a0special\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'c';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0case\u00a00x1000:\u00a0\/\/\u00a0FIFO\u00a0pipe\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'p';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0default:\u00a0\/\/\u00a0unknown\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0'u';\n}\n\n\/\/\u00a0Owner\n$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0100)\u00a0?\u00a0'r'\u00a0:\u00a0'-');\n$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0080)\u00a0?\u00a0'w'\u00a0:\u00a0'-');\n$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0040)\u00a0?\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0800)\u00a0?\u00a0's'\u00a0:\u00a0'x'\u00a0)\u00a0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0800)\u00a0?\u00a0'S'\u00a0:\u00a0'-'));\n\n\/\/\u00a0Group\n$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0020)\u00a0?\u00a0'r'\u00a0:\u00a0'-');\n$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0010)\u00a0?\u00a0'w'\u00a0:\u00a0'-');\n$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0008)\u00a0?\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0400)\u00a0?\u00a0's'\u00a0:\u00a0'x'\u00a0)\u00a0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0400)\u00a0?\u00a0'S'\u00a0:\u00a0'-'));\n\n\/\/\u00a0World\n$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0004)\u00a0?\u00a0'r'\u00a0:\u00a0'-');\n$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0002)\u00a0?\u00a0'w'\u00a0:\u00a0'-');\n$info\u00a0.=\u00a0(($perms\u00a0&\u00a00x0001)\u00a0?\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0200)\u00a0?\u00a0't'\u00a0:\u00a0'x'\u00a0)\u00a0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(($perms\u00a0&\u00a00x0200)\u00a0?\u00a0'T'\u00a0:\u00a0'-'));\n\necho\u00a0$info;\n?>"}]},"filesize":{"name":"filesize","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"int","values":["FALSE","E_WARNING"]},"short":"Gets file size","examples":[{"title":"Example #1 filesize() example","content":"<?php\n\n\/\/\u00a0outputs\u00a0e.g.\u00a0\u00a0somefile.txt:\u00a01024\u00a0bytes\n\n$filename\u00a0=\u00a0'somefile.txt';\necho\u00a0$filename\u00a0.\u00a0':\u00a0'\u00a0.\u00a0filesize($filename)\u00a0.\u00a0'\u00a0bytes';\n\n?>"}]},"filetype":{"name":"filetype","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"string","values":["FALSE","E_NOTICE"]},"short":"Gets file type","examples":[{"title":"Example #1 filetype() example","content":"<?php\n\necho\u00a0filetype('\/etc\/passwd');\u00a0\u00a0\/\/\u00a0file\necho\u00a0filetype('\/etc\/');\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0dir\n\n?>"}]},"filter_has_var":{"name":"filter_has_var","parameters":[{"type":"int","name":"$type","description":"One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV."},{"type":"string","name":"$variable_name","description":"Name of a variable to check."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if variable of specified type exists","examples":[]},"filter_id":{"name":"filter_id","parameters":[{"type":"string","name":"$filtername","description":"Name of a filter to get."}],"return":{"type":"int","values":["FALSE"]},"short":"Returns the filter ID belonging to a named filter","examples":[]},"filter_input":{"name":"filter_input","parameters":[{"type":"int","name":"$type","description":"One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV."},{"type":"string","name":"$variable_name","description":"Name of a variable to get."},{"type":"int","name":"$filter","default_value":"FILTER_DEFAULT","description":"The ID of the filter to apply. The Types of filters manual page lists the available filters.\n\nIf omitted, FILTER_DEFAULT will be used, which is equivalent to FILTER_UNSAFE_RAW. This will result in no filtering taking place by default."},{"type":"mixed","name":"$options","description":"Associative array of options or bitwise disjunction of flags. If filter accepts options, flags can be provided in \"flags\" field of array."}],"return":{"type":"mixed","values":["FALSE","NULL","FILTER_NULL_ON_FAILURE"]},"short":"Gets a specific external variable by name and optionally filters it","examples":[{"title":"Example #1 A filter_input() example","content":"<?php\n$search_html\u00a0=\u00a0filter_input(INPUT_GET,\u00a0'search',\u00a0FILTER_SANITIZE_SPECIAL_CHARS);\n$search_url\u00a0=\u00a0filter_input(INPUT_GET,\u00a0'search',\u00a0FILTER_SANITIZE_ENCODED);\necho\u00a0\"You\u00a0have\u00a0searched\u00a0for\u00a0$search_html.\\n\";\necho\u00a0\"<a\u00a0href='?search=$search_url'>Search\u00a0again.<\/a>\";\n?>"}]},"filter_input_array":{"name":"filter_input_array","parameters":[{"type":"int","name":"$type","description":"One of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV."},{"type":"mixed","name":"$definition","description":"An array defining the arguments. A valid key is a string containing a variable name and a valid value is either a filter type, or an array optionally specifying the filter, flags and options. If the value is an array, valid keys are filter which specifies the filter type, flags which specifies any flags that apply to the filter, and options which specifies any options that apply to the filter. See the example below for a better understanding.\n\nThis parameter can be also an integer holding a filter constant. Then all values in the input array are filtered by this filter."},{"type":"bool","name":"$add_empty","default_value":"TRUE","description":"Add missing keys as NULL to the return value."}],"return":{"type":"mixed","values":{"0":"FALSE","2":"NULL","3":"FILTER_NULL_ON_FAILURE"}},"short":"Gets external variables and optionally filters them","examples":[{"title":"Example #1 A filter_input_array() example","content":"<?php\nerror_reporting(E_ALL\u00a0|\u00a0E_STRICT);\n\/*\u00a0data\u00a0actually\u00a0came\u00a0from\u00a0POST\n$_POST\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'product_id'\u00a0\u00a0\u00a0\u00a0=>\u00a0'libgd<script>',\n\u00a0\u00a0\u00a0\u00a0'component'\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0'10',\n\u00a0\u00a0\u00a0\u00a0'versions'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0'2.0.33',\n\u00a0\u00a0\u00a0\u00a0'testscalar'\u00a0\u00a0\u00a0\u00a0=>\u00a0array('2',\u00a0'23',\u00a0'10',\u00a0'12'),\n\u00a0\u00a0\u00a0\u00a0'testarray'\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0'2',\n);\n*\/\n\n$args\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'product_id'\u00a0\u00a0\u00a0=>\u00a0FILTER_SANITIZE_ENCODED,\n\u00a0\u00a0\u00a0\u00a0'component'\u00a0\u00a0\u00a0\u00a0=>\u00a0array('filter'\u00a0\u00a0\u00a0\u00a0=>\u00a0FILTER_VALIDATE_INT,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'flags'\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0FILTER_REQUIRE_ARRAY,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'options'\u00a0\u00a0\u00a0=>\u00a0array('min_range'\u00a0=>\u00a01,\u00a0'max_range'\u00a0=>\u00a010)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0'versions'\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0FILTER_SANITIZE_ENCODED,\n\u00a0\u00a0\u00a0\u00a0'doesnotexist'\u00a0=>\u00a0FILTER_VALIDATE_INT,\n\u00a0\u00a0\u00a0\u00a0'testscalar'\u00a0\u00a0\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'filter'\u00a0=>\u00a0FILTER_VALIDATE_INT,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'flags'\u00a0\u00a0=>\u00a0FILTER_REQUIRE_SCALAR,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0'testarray'\u00a0\u00a0\u00a0\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'filter'\u00a0=>\u00a0FILTER_VALIDATE_INT,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'flags'\u00a0\u00a0=>\u00a0FILTER_REQUIRE_ARRAY,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\n);\n\n$myinputs\u00a0=\u00a0filter_input_array(INPUT_POST,\u00a0$args);\n\nvar_dump($myinputs);\necho\u00a0\"\\n\";\n?>"}]},"filter_list":{"name":"filter_list","parameters":[],"return":{"type":"array","values":[]},"short":"Returns a list of all supported filters","examples":[{"title":"Example #1 A filter_list() example","content":"<?php\nprint_r(filter_list());\n?>"}]},"filter_var":{"name":"filter_var","parameters":[{"type":"mixed","name":"$variable","description":"Value to filter. Note that scalar values are converted to string internally before they are filtered."},{"type":"int","name":"$filter","default_value":"FILTER_DEFAULT","description":"The ID of the filter to apply. The Types of filters manual page lists the available filters.\n\nIf omitted, FILTER_DEFAULT will be used, which is equivalent to FILTER_UNSAFE_RAW. This will result in no filtering taking place by default."},{"type":"mixed","name":"$options","description":"Associative array of options or bitwise disjunction of flags. If filter accepts options, flags can be provided in \"flags\" field of array. For the \"callback\" filter, callable type should be passed.  The callback must accept one argument, the value to be filtered, and return the value after filtering\/sanitizing it.\n\n\n\n<?php \/\/\u00a0for\u00a0filters\u00a0that\u00a0accept\u00a0options,\u00a0use\u00a0this\u00a0format $options\u00a0=\u00a0array( \u00a0\u00a0\u00a0\u00a0'options'\u00a0=>\u00a0array( \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'default'\u00a0=>\u00a03,\u00a0\/\/\u00a0value\u00a0to\u00a0return\u00a0if\u00a0the\u00a0filter\u00a0fails \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0other\u00a0options\u00a0here \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'min_range'\u00a0=>\u00a00 \u00a0\u00a0\u00a0\u00a0), \u00a0\u00a0\u00a0\u00a0'flags'\u00a0=>\u00a0FILTER_FLAG_ALLOW_OCTAL, ); $var\u00a0=\u00a0filter_var('0755',\u00a0FILTER_VALIDATE_INT,\u00a0$options);\n \/\/\u00a0for\u00a0filter\u00a0that\u00a0only\u00a0accept\u00a0flags,\u00a0you\u00a0can\u00a0pass\u00a0them\u00a0directly $var\u00a0=\u00a0filter_var('oops',\u00a0FILTER_VALIDATE_BOOLEAN,\u00a0FILTER_NULL_ON_FAILURE);\n \/\/\u00a0for\u00a0filter\u00a0that\u00a0only\u00a0accept\u00a0flags,\u00a0you\u00a0can\u00a0also\u00a0pass\u00a0as\u00a0an\u00a0array $var\u00a0=\u00a0filter_var('oops',\u00a0FILTER_VALIDATE_BOOLEAN, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array('flags'\u00a0=>\u00a0FILTER_NULL_ON_FAILURE));\n \/\/\u00a0callback\u00a0validate\u00a0filter function\u00a0foo($value) { \u00a0\u00a0\u00a0\u00a0\/\/\u00a0Expected\u00a0format:\u00a0Surname,\u00a0GivenNames \u00a0\u00a0\u00a0\u00a0if\u00a0(strpos($value,\u00a0\",\u00a0\")\u00a0===\u00a0false)\u00a0return\u00a0false; \u00a0\u00a0\u00a0\u00a0list($surname,\u00a0$givennames)\u00a0=\u00a0explode(\",\u00a0\",\u00a0$value,\u00a02); \u00a0\u00a0\u00a0\u00a0$empty\u00a0=\u00a0(empty($surname)\u00a0||\u00a0empty($givennames)); \u00a0\u00a0\u00a0\u00a0$notstrings\u00a0=\u00a0(!is_string($surname)\u00a0||\u00a0!is_string($givennames)); \u00a0\u00a0\u00a0\u00a0if\u00a0($empty\u00a0||\u00a0$notstrings)\u00a0{ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false; \u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0$value; \u00a0\u00a0\u00a0\u00a0} } $var\u00a0=\u00a0filter_var('Doe,\u00a0Jane\u00a0Sue',\u00a0FILTER_CALLBACK,\u00a0array('options'\u00a0=>\u00a0'foo')); ?>"}],"return":{"type":"mixed","values":["FALSE"]},"short":"Filters a variable with a specified filter","examples":[{"title":"Example #1 A filter_var() example","content":"<?php\nvar_dump(filter_var('bob@example.com',\u00a0FILTER_VALIDATE_EMAIL));\nvar_dump(filter_var('http:\/\/example.com',\u00a0FILTER_VALIDATE_URL,\u00a0FILTER_FLAG_PATH_REQUIRED));\n?>"}]},"filter_var_array":{"name":"filter_var_array","parameters":[{"type":"array","name":"$data","description":"An array with string keys containing the data to filter."},{"type":"mixed","name":"$definition","description":"An array defining the arguments. A valid key is a string containing a variable name and a valid value is either a filter type, or an array optionally specifying the filter, flags and options. If the value is an array, valid keys are filter which specifies the filter type, flags which specifies any flags that apply to the filter, and options which specifies any options that apply to the filter. See the example below for a better understanding.\n\nThis parameter can be also an integer holding a filter constant. Then all values in the input array are filtered by this filter."},{"type":"bool","name":"$add_empty","default_value":"TRUE","description":"Add missing keys as NULL to the return value."}],"return":{"type":"mixed","values":{"0":"FALSE","2":"NULL"}},"short":"Gets multiple variables and optionally filters them","examples":[{"title":"Example #1 A filter_var_array() example","content":"<?php\nerror_reporting(E_ALL\u00a0|\u00a0E_STRICT);\n$data\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'product_id'\u00a0\u00a0\u00a0\u00a0=>\u00a0'libgd<script>',\n\u00a0\u00a0\u00a0\u00a0'component'\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0'10',\n\u00a0\u00a0\u00a0\u00a0'versions'\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0'2.0.33',\n\u00a0\u00a0\u00a0\u00a0'testscalar'\u00a0\u00a0\u00a0\u00a0=>\u00a0array('2',\u00a0'23',\u00a0'10',\u00a0'12'),\n\u00a0\u00a0\u00a0\u00a0'testarray'\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0'2',\n);\n\n$args\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'product_id'\u00a0\u00a0\u00a0=>\u00a0FILTER_SANITIZE_ENCODED,\n\u00a0\u00a0\u00a0\u00a0'component'\u00a0\u00a0\u00a0\u00a0=>\u00a0array('filter'\u00a0\u00a0\u00a0\u00a0=>\u00a0FILTER_VALIDATE_INT,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'flags'\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0FILTER_FORCE_ARRAY,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'options'\u00a0\u00a0\u00a0=>\u00a0array('min_range'\u00a0=>\u00a01,\u00a0'max_range'\u00a0=>\u00a010)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0'versions'\u00a0\u00a0\u00a0\u00a0\u00a0=>\u00a0FILTER_SANITIZE_ENCODED,\n\u00a0\u00a0\u00a0\u00a0'doesnotexist'\u00a0=>\u00a0FILTER_VALIDATE_INT,\n\u00a0\u00a0\u00a0\u00a0'testscalar'\u00a0\u00a0\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'filter'\u00a0=>\u00a0FILTER_VALIDATE_INT,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'flags'\u00a0\u00a0=>\u00a0FILTER_REQUIRE_SCALAR,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0'testarray'\u00a0\u00a0\u00a0\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'filter'\u00a0=>\u00a0FILTER_VALIDATE_INT,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'flags'\u00a0\u00a0=>\u00a0FILTER_FORCE_ARRAY,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\n);\n\n$myinputs\u00a0=\u00a0filter_var_array($data,\u00a0$args);\n\nvar_dump($myinputs);\necho\u00a0\"\\n\";\n?>"}]},"finfo_buffer":{"name":"finfo_buffer","parameters":[{"type":"resource","name":"$finfo","description":"Fileinfo resource returned by finfo_open()."},{"type":"string","name":"$string","default_value":"NULL","description":"Content of a file to be checked."},{"type":"int","name":"$options","default_value":"FILEINFO_NONE","description":"One or disjunction of more Fileinfo constants."},{"type":"resource","name":"$context","default_value":"NULL","description":""}],"return":{"type":"string","values":["FALSE"]},"short":"Return information about a string buffer","examples":[{"title":"Example #1 A finfo_buffer() example","content":"<?php\n$finfo\u00a0=\u00a0new\u00a0finfo(FILEINFO_MIME);\necho\u00a0$finfo->buffer($_POST[\"script\"])\u00a0.\u00a0\"\\n\";\n?>"}]},"finfo_close":{"name":"finfo_close","parameters":[{"type":"resource","name":"$finfo","description":"Fileinfo resource returned by finfo_open()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Close fileinfo resource","examples":[]},"finfo_file":{"name":"finfo_file","parameters":[{"type":"resource","name":"$finfo","description":"Fileinfo resource returned by finfo_open()."},{"type":"string","name":"$file_name","default_value":"NULL","description":"Name of a file to be checked."},{"type":"int","name":"$options","default_value":"FILEINFO_NONE","description":"One or disjunction of more Fileinfo constants."},{"type":"resource","name":"$context","default_value":"NULL","description":"For a description of contexts, refer to Stream Functions."}],"return":{"type":"string","values":["FALSE"]},"short":"Return information about a file","examples":[{"title":"Example #1 A finfo_file() example","content":"<?php\n$finfo\u00a0=\u00a0finfo_open(FILEINFO_MIME_TYPE);\u00a0\/\/\u00a0return\u00a0mime\u00a0type\u00a0ala\u00a0mimetype\u00a0extension\nforeach\u00a0(glob(\"*\")\u00a0as\u00a0$filename)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0finfo_file($finfo,\u00a0$filename)\u00a0.\u00a0\"\\n\";\n}\nfinfo_close($finfo);\n?>"}]},"finfo_open":{"name":"finfo_open","parameters":[{"type":"int","name":"$options","default_value":"FILEINFO_NONE","description":"One or disjunction of more Fileinfo constants."},{"type":"string","name":"$magic_file","default_value":"NULL","description":"Name of a magic database file, usually something like \/path\/to\/magic.mime. If not specified, the MAGIC environment variable is used. If the environment variable isn't set, then PHP's bundled magic database will be used.\n\nPassing NULL or an empty string will be equivalent to the default value."}],"return":{"type":"resource","values":["FALSE"]},"short":"Create a new fileinfo resource","examples":[{"title":"Example #1 Object oriented style","content":"<?php\n$finfo\u00a0=\u00a0new\u00a0finfo(FILEINFO_MIME,\u00a0\"\/usr\/share\/misc\/magic\");\u00a0\/\/\u00a0return\u00a0mime\u00a0type\u00a0ala\u00a0mimetype\u00a0extension\n\n\/*\u00a0get\u00a0mime-type\u00a0for\u00a0a\u00a0specific\u00a0file\u00a0*\/\n$filename\u00a0=\u00a0\"\/usr\/local\/something.txt\";\necho\u00a0$finfo->file($filename);\n\n?>"},{"title":"Example #2 Procedural style","content":"<?php\n$finfo\u00a0=\u00a0finfo_open(FILEINFO_MIME,\u00a0\"\/usr\/share\/misc\/magic\");\u00a0\/\/\u00a0return\u00a0mime\u00a0type\u00a0ala\u00a0mimetype\u00a0extension\n\nif\u00a0(!$finfo)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Opening\u00a0fileinfo\u00a0database\u00a0failed\";\n\u00a0\u00a0\u00a0\u00a0exit();\n}\n\n\/*\u00a0get\u00a0mime-type\u00a0for\u00a0a\u00a0specific\u00a0file\u00a0*\/\n$filename\u00a0=\u00a0\"\/usr\/local\/something.txt\";\necho\u00a0finfo_file($finfo,\u00a0$filename);\n\n\/*\u00a0close\u00a0connection\u00a0*\/\nfinfo_close($finfo);\n?>"}]},"finfo_set_flags":{"name":"finfo_set_flags","parameters":[{"type":"resource","name":"$finfo","description":"Fileinfo resource returned by finfo_open()."},{"type":"int","name":"$options","description":"One or disjunction of more Fileinfo constants."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set libmagic configuration options","examples":[]},"floatval":{"name":"floatval","parameters":[{"type":"mixed","name":"$var","description":"May be any scalar type. floatval() should not be used on objects, as doing so will emit an E_NOTICE level error and return 1."}],"return":{"type":"float","values":[]},"short":"Get float value of a variable","examples":[{"title":"Example #1 floatval() Example","content":"<?php\n$var\u00a0=\u00a0'122.34343The';\n$float_value_of_var\u00a0=\u00a0floatval($var);\necho\u00a0$float_value_of_var;\u00a0\/\/\u00a0122.34343\n?>"},{"title":"Example #2 floatval() non-numeric leftmost characters Example","content":"<?php\n$var\u00a0=\u00a0'The122.34343';\n$float_value_of_var\u00a0=\u00a0floatval($var);\necho\u00a0$float_value_of_var;\u00a0\/\/\u00a00\n?>"}]},"flock":{"name":"flock","parameters":[{"type":"resource","name":"$handle","description":"A file system pointer resource that is typically created using fopen()."},{"type":"int","name":"$operation","description":"operation is one of the following:\n\nLOCK_SH to acquire a shared lock (reader).\n\n\n\n LOCK_EX to acquire an exclusive lock (writer).\n\n\n\n LOCK_UN to release a lock (shared or exclusive).\n\nIt is also possible to add LOCK_NB as a bitmask to one of the above operations if you don't want flock() to block while locking."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Portable advisory file locking","examples":[{"title":"Example #1 flock() example","content":"<?php\n\n$fp\u00a0=\u00a0fopen(\"\/tmp\/lock.txt\",\u00a0\"r+\");\n\nif\u00a0(flock($fp,\u00a0LOCK_EX))\u00a0{\u00a0\u00a0\/\/\u00a0acquire\u00a0an\u00a0exclusive\u00a0lock\n\u00a0\u00a0\u00a0\u00a0ftruncate($fp,\u00a00);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0truncate\u00a0file\n\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0\"Write\u00a0something\u00a0here\\n\");\n\u00a0\u00a0\u00a0\u00a0fflush($fp);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0flush\u00a0output\u00a0before\u00a0releasing\u00a0the\u00a0lock\n\u00a0\u00a0\u00a0\u00a0flock($fp,\u00a0LOCK_UN);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0release\u00a0the\u00a0lock\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0get\u00a0the\u00a0lock!\";\n}\n\nfclose($fp);\n\n?>"},{"title":"Example #2 flock() using the LOCK_NB option","content":"<?php\n$fp\u00a0=\u00a0fopen('\/tmp\/lock.txt',\u00a0'r+');\n\n\/*\u00a0Activate\u00a0the\u00a0LOCK_NB\u00a0option\u00a0on\u00a0an\u00a0LOCK_EX\u00a0operation\u00a0*\/\nif(!flock($fp,\u00a0LOCK_EX\u00a0|\u00a0LOCK_NB))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Unable\u00a0to\u00a0obtain\u00a0lock';\n\u00a0\u00a0\u00a0\u00a0exit(-1);\n}\n\n\/*\u00a0...\u00a0*\/\n\nfclose($fp);\n?>"}]},"floor":{"name":"floor","parameters":[{"type":"float","name":"$value","description":"The numeric value to round"}],"return":{"type":"float","values":["FALSE"]},"short":"Round fractions down","examples":[{"title":"Example #1 floor() example","content":"<?php\necho\u00a0floor(4.3);\u00a0\u00a0\u00a0\/\/\u00a04\necho\u00a0floor(9.999);\u00a0\/\/\u00a09\necho\u00a0floor(-3.14);\u00a0\/\/\u00a0-4\n?>"}]},"flush":{"name":"flush","parameters":[],"return":{"type":"void","values":[]},"short":"Flush system output buffer","examples":[]},"fmod":{"name":"fmod","parameters":[{"type":"float","name":"$x","description":"The dividend"},{"type":"float","name":"$y","description":"The divisor"}],"return":{"type":"float","values":[]},"short":"Returns the floating point remainder (modulo) of the division\n  of the arguments","examples":[{"title":"Example #1 Using fmod()","content":"<?php\n$x\u00a0=\u00a05.7;\n$y\u00a0=\u00a01.3;\n$r\u00a0=\u00a0fmod($x,\u00a0$y);\n\/\/\u00a0$r\u00a0equals\u00a00.5,\u00a0because\u00a04\u00a0*\u00a01.3\u00a0+\u00a00.5\u00a0=\u00a05.7\n?>"}]},"fnmatch":{"name":"fnmatch","parameters":[{"type":"string","name":"$pattern","description":"The shell wildcard pattern."},{"type":"string","name":"$string","description":"The tested string. This function is especially useful for filenames, but may also be used on regular strings.\n\nThe average user may be used to shell patterns or at least in their simplest form to '?' and '*' wildcards so using fnmatch() instead of preg_match() for frontend search expression input may be way more convenient for non-programming users."},{"type":"int","name":"$flags","default_value":"0","description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator.\n\nA list of possible flags for fnmatch()\n\n Flag Description FNM_NOESCAPE\n Disable backslash escaping.\n FNM_PATHNAME\n Slash in string only matches slash in the given pattern.\n FNM_PERIOD\n Leading period in string must be exactly matched by period in the given pattern.\n FNM_CASEFOLD\n Caseless match. Part of the GNU extension."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Match filename against a pattern","examples":[{"title":"Example #1 Checking a color name against a shell wildcard pattern","content":"<?php\nif\u00a0(fnmatch(\"*gr[ae]y\",\u00a0$color))\u00a0{\n\u00a0\u00a0echo\u00a0\"some\u00a0form\u00a0of\u00a0gray\u00a0...\";\n}\n?>"}]},"fopen":{"name":"fopen","parameters":[{"type":"string","name":"$filename","description":"If filename is of the form \"scheme:\/\/...\", it is assumed to be a URL and PHP will search for a protocol handler (also known as a wrapper) for that scheme. If no wrappers for that protocol are registered, PHP will emit a notice to help you track potential problems in your script and then continue as though filename specifies a regular file.\n\nIf PHP has decided that filename specifies a local file, then it will try to open a stream on that file. The file must be accessible to PHP, so you need to ensure that the file access permissions allow this access. If you have enabled safe mode or open_basedir further restrictions may apply.\n\nIf PHP has decided that filename specifies a registered protocol, and that protocol is registered as a network URL, PHP will check to make sure that allow_url_fopen is enabled. If it is switched off, PHP will emit a warning and the fopen call will fail.\n\nNote:\n The list of supported protocols can be found in Supported Protocols and Wrappers. Some protocols (also referred to as wrappers) support context and\/or php.ini options. Refer to the specific page for the protocol in use for a list of options which can be set. (e.g. php.ini value user_agent used by the http wrapper).\n\nOn the Windows platform, be careful to escape any backslashes used in the path to the file, or use forward slashes.\n\n<?php $handle\u00a0=\u00a0fopen(\"c:\\\\folder\\\\resource.txt\",\u00a0\"r\"); ?>"},{"type":"string","name":"$mode","description":"The mode parameter specifies the type of access you require to the stream.  It may be any of the following:\n\nA list of possible modes for fopen() using mode\n\n mode Description 'r'\n Open for reading only; place the file pointer at the beginning of the file.\n 'r+'\n Open for reading and writing; place the file pointer at the beginning of the file.\n 'w'\n Open for writing only; place the file pointer at the beginning of the file and truncate the file to zero length. If the file does not exist, attempt to create it.\n 'w+'\n Open for reading and writing; place the file pointer at the beginning of the file and truncate the file to zero length.  If the file does not exist, attempt to create it.\n 'a'\n Open for writing only; place the file pointer at the end of the file. If the file does not exist, attempt to create it. In this mode, fseek() has no effect, writes are always appended.\n 'a+'\n Open for reading and writing; place the file pointer at the end of the file. If the file does not exist, attempt to create it. In this mode, fseek() only affects the reading position, writes are always appended.\n 'x'\n Create and open for writing only; place the file pointer at the beginning of the file.  If the file already exists, the fopen() call will fail by returning FALSE and generating an error of level E_WARNING.  If the file does not exist, attempt to create it.  This is equivalent to specifying O_EXCL|O_CREAT flags for the underlying open(2) system call.\n 'x+'\n Create and open for reading and writing; otherwise it has the same behavior as 'x'.\n 'c'\n Open the file for writing only. If the file does not exist, it is created. If it exists, it is neither truncated (as opposed to 'w'), nor the call to this function fails (as is the case with 'x'). The file pointer is positioned on the beginning of the file. This may be useful if it's desired to get an advisory lock (see flock()) before attempting to modify the file, as using 'w' could truncate the file before the lock was obtained (if truncation is desired, ftruncate() can be used after the lock is requested).\n 'c+'\n Open the file for reading and writing; otherwise it has the same behavior as 'c'.\n 'e'\n Set close-on-exec flag on the opened file descriptor. Only available in PHP compiled on POSIX.1-2008 conform systems.\n\nNote:\n Different operating system families have different line-ending conventions.  When you write a text file and want to insert a line break, you need to use the correct line-ending character(s) for your operating system.  Unix based systems use \\n as the line ending character, Windows based systems use \\r\\n as the line ending characters and Macintosh based systems use \\r as the line ending character.\n\n If you use the wrong line ending characters when writing your files, you might find that other applications that open those files will \"look funny\".\n\n Windows offers a text-mode translation flag ('t') which will transparently translate \\n to \\r\\n when working with the file.  In contrast, you can also use 'b' to force binary mode, which will not translate your data.  To use these flags, specify either 'b' or 't' as the last character of the mode parameter.\n\n The default translation mode depends on the SAPI and version of PHP that you are using, so you are encouraged to always specify the appropriate flag for portability reasons.  You should use the 't' mode if you are working with plain-text files and you use \\n to delimit your line endings in your script, but expect your files to be readable with applications such as notepad.  You should use the 'b' in all other cases.\n\n If you do not specify the 'b' flag when working with binary files, you may experience strange problems with your data, including broken image files and strange problems with \\r\\n characters.\n\nNote:\n For portability, it is strongly recommended that you always use the 'b' flag when opening files with fopen().\n\nNote:\n Again, for portability, it is also strongly recommended that you re-write code that uses or relies upon the 't' mode so that it uses the correct line endings and 'b' mode instead."},{"type":"bool","name":"$use_include_path","default_value":"FALSE","description":"The optional third use_include_path parameter can be set to '1' or TRUE if you want to search for the file in the include_path, too."},{"type":"resource","name":"$context","description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams."}],"return":{"type":"resource","values":["FALSE"]},"short":"Opens file or URL","examples":[{"title":"Example #1 fopen() examples","content":"<?php\n$handle\u00a0=\u00a0fopen(\"\/home\/rasmus\/file.txt\",\u00a0\"r\");\n$handle\u00a0=\u00a0fopen(\"\/home\/rasmus\/file.gif\",\u00a0\"wb\");\n$handle\u00a0=\u00a0fopen(\"http:\/\/www.example.com\/\",\u00a0\"r\");\n$handle\u00a0=\u00a0fopen(\"ftp:\/\/user:password@example.com\/somefile.txt\",\u00a0\"w\");\n?>"}]},"forward_static_call":{"name":"forward_static_call","parameters":[{"type":"callable","name":"$function","description":"The function or method to be called. This parameter may be an array, with the name of the class, and the method, or a string, with a function name."},{"type":"mixed","name":"$parameter","description":"Zero or more parameters to be passed to the function."},{"type":"mixed","name":"$..."}],"return":{"type":"mixed","values":["FALSE"]},"short":"Call a static method","examples":[{"title":"Example #1 forward_static_call() example","content":"<?php\n\nclass\u00a0A\n{\n\u00a0\u00a0\u00a0\u00a0const\u00a0NAME\u00a0=\u00a0'A';\n\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0test()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$args\u00a0=\u00a0func_get_args();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0static::NAME,\u00a0\"\u00a0\".join(',',\u00a0$args).\"\u00a0\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nclass\u00a0B\u00a0extends\u00a0A\n{\n\u00a0\u00a0\u00a0\u00a0const\u00a0NAME\u00a0=\u00a0'B';\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0test()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0self::NAME,\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forward_static_call(array('A',\u00a0'test'),\u00a0'more',\u00a0'args');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forward_static_call(\u00a0'test',\u00a0'other',\u00a0'args');\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nB::test('foo');\n\nfunction\u00a0test()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$args\u00a0=\u00a0func_get_args();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"C\u00a0\".join(',',\u00a0$args).\"\u00a0\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\n?>"}]},"forward_static_call_array":{"name":"forward_static_call_array","parameters":[{"type":"callable","name":"$function","description":"The function or method to be called. This parameter may be an array, with the name of the class, and the method, or a string, with a function name."},{"type":"array","name":"$parameters"}],"return":{"type":"mixed","values":["FALSE"]},"short":"Call a static method and pass the arguments as array","examples":[{"title":"Example #1 forward_static_call_array() example","content":"<?php\n\nclass\u00a0A\n{\n\u00a0\u00a0\u00a0\u00a0const\u00a0NAME\u00a0=\u00a0'A';\n\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0test()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$args\u00a0=\u00a0func_get_args();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0static::NAME,\u00a0\"\u00a0\".join(',',\u00a0$args).\"\u00a0\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nclass\u00a0B\u00a0extends\u00a0A\n{\n\u00a0\u00a0\u00a0\u00a0const\u00a0NAME\u00a0=\u00a0'B';\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0test()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0self::NAME,\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forward_static_call_array(array('A',\u00a0'test'),\u00a0array('more',\u00a0'args'));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0forward_static_call_array(\u00a0'test',\u00a0array('other',\u00a0'args'));\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nB::test('foo');\n\nfunction\u00a0test()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$args\u00a0=\u00a0func_get_args();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"C\u00a0\".join(',',\u00a0$args).\"\u00a0\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\n?>"}]},"fpassthru":{"name":"fpassthru","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose())."}],"return":{"type":"int","values":["FALSE"]},"short":"Output all remaining data on a file pointer","examples":[{"title":"Example #1 Using fpassthru() with binary files","content":"<?php\n\n\/\/\u00a0open\u00a0the\u00a0file\u00a0in\u00a0a\u00a0binary\u00a0mode\n$name\u00a0=\u00a0'.\/img\/ok.png';\n$fp\u00a0=\u00a0fopen($name,\u00a0'rb');\n\n\/\/\u00a0send\u00a0the\u00a0right\u00a0headers\nheader(\"Content-Type:\u00a0image\/png\");\nheader(\"Content-Length:\u00a0\"\u00a0.\u00a0filesize($name));\n\n\/\/\u00a0dump\u00a0the\u00a0picture\u00a0and\u00a0stop\u00a0the\u00a0script\nfpassthru($fp);\nexit;\n\n?>"}]},"fprintf":{"name":"fprintf","parameters":[{"type":"resource","name":"$handle","description":"A file system pointer resource that is typically created using fopen()."},{"type":"string","name":"$format","description":"See sprintf() for a description of format."},{"type":"mixed","name":"$args","description":""},{"type":"mixed","name":"$...","description":""}],"return":{"type":"int","values":[]},"short":"Write a formatted string to a stream","examples":[{"title":"Example #1 fprintf(): zero-padded integers","content":"<?php\nif\u00a0(!($fp\u00a0=\u00a0fopen('date.txt',\u00a0'w')))\u00a0{\n\u00a0\u00a0\u00a0\u00a0return;\n}\n\nfprintf($fp,\u00a0\"%04d-%02d-%02d\",\u00a0$year,\u00a0$month,\u00a0$day);\n\/\/\u00a0will\u00a0write\u00a0the\u00a0formatted\u00a0ISO\u00a0date\u00a0to\u00a0date.txt\n?>"},{"title":"Example #2 fprintf(): formatting currency","content":"<?php\nif\u00a0(!($fp\u00a0=\u00a0fopen('currency.txt',\u00a0'w')))\u00a0{\n\u00a0\u00a0\u00a0\u00a0return;\n}\n\n$money1\u00a0=\u00a068.75;\n$money2\u00a0=\u00a054.35;\n$money\u00a0=\u00a0$money1\u00a0+\u00a0$money2;\n\/\/\u00a0echo\u00a0$money\u00a0will\u00a0output\u00a0\"123.1\";\n$len\u00a0=\u00a0fprintf($fp,\u00a0'%01.2f',\u00a0$money);\n\/\/\u00a0will\u00a0write\u00a0\"123.10\"\u00a0to\u00a0currency.txt\n\necho\u00a0\"wrote\u00a0$len\u00a0bytes\u00a0to\u00a0currency.txt\";\n\/\/\u00a0use\u00a0the\u00a0return\u00a0value\u00a0of\u00a0fprintf\u00a0to\u00a0determine\u00a0how\u00a0many\u00a0bytes\u00a0we\u00a0wrote\n?>"}]},"fputcsv":{"name":"fputcsv","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen() (and not yet closed by fclose())."},{"type":"array","name":"$fields","description":"An array of values."},{"type":"string","name":"$delimiter","default_value":"\",\"","description":"The optional delimiter parameter sets the field delimiter (one character only)."},{"type":"string","name":"$enclosure","default_value":"'\"'","description":"The optional enclosure parameter sets the field enclosure (one character only)."},{"type":"string","name":"$escape_char","default_value":"\"\\\\\"","description":"The optional escape_char parameter sets the escape character (one character only)."}],"return":{"type":"int","values":["FALSE"]},"short":"Format line as CSV and write to file pointer","examples":[{"title":"Example #1 fputcsv() example","content":"<?php\n\n$list\u00a0=\u00a0array\u00a0(\n\u00a0\u00a0\u00a0\u00a0array('aaa',\u00a0'bbb',\u00a0'ccc',\u00a0'dddd'),\n\u00a0\u00a0\u00a0\u00a0array('123',\u00a0'456',\u00a0'789'),\n\u00a0\u00a0\u00a0\u00a0array('\"aaa\"',\u00a0'\"bbb\"')\n);\n\n$fp\u00a0=\u00a0fopen('file.csv',\u00a0'w');\n\nforeach\u00a0($list\u00a0as\u00a0$fields)\u00a0{\n\u00a0\u00a0\u00a0\u00a0fputcsv($fp,\u00a0$fields);\n}\n\nfclose($fp);\n?>"}]},"fputs":{"name":"fputs","parameters":[],"return":{"type":"","values":[]},"short":"Alias of fwrite()","examples":[]},"fread":{"name":"fread","parameters":[{"type":"resource","name":"$handle","description":"A file system pointer resource that is typically created using fopen()."},{"type":"int","name":"$length","description":"Up to length number of bytes read."}],"return":{"type":"string","values":["FALSE"]},"short":"Binary-safe file read","examples":[{"title":"Example #1 A simple fread() example","content":"<?php\n\/\/\u00a0get\u00a0contents\u00a0of\u00a0a\u00a0file\u00a0into\u00a0a\u00a0string\n$filename\u00a0=\u00a0\"\/usr\/local\/something.txt\";\n$handle\u00a0=\u00a0fopen($filename,\u00a0\"r\");\n$contents\u00a0=\u00a0fread($handle,\u00a0filesize($filename));\nfclose($handle);\n?>"},{"title":"Example #2 Binary fread() example","content":"Warning\n     \n      On systems which differentiate between binary and text files\n      (i.e. Windows) the file must be opened with 'b' included in\n      fopen() mode parameter."},{"title":"Example #3 Remote fread() examples","content":"Warning\n     \n      When reading from anything that is not a regular local file, such as\n      streams returned when\n      reading remote files or from\n      popen() and fsockopen(), reading\n      will stop after a packet is available.  This means that you should\n      collect the data together in chunks as shown in the examples below."}]},"frenchtojd":{"name":"frenchtojd","parameters":[{"type":"int","name":"$month","description":"The month as a number from 1 (for Vend\u00e9miaire) to 13 (for the period of 5-6 days at the end of each year)"},{"type":"int","name":"$day","description":"The day as a number from 1 to 30"},{"type":"int","name":"$year","description":"The year as a number between 1 and 14"}],"return":{"type":"int","values":[]},"short":"Converts a date from the French Republican Calendar to a Julian Day Count","examples":[]},"fscanf":{"name":"fscanf","parameters":[{"type":"resource","name":"$handle","description":"A file system pointer resource that is typically created using fopen()."},{"type":"string","name":"$format","description":"The specified format as described in the sprintf() documentation."}],"return":{"type":"mixed","values":[]},"short":"Parses input from a file according to a format","examples":[{"title":"Example #1 fscanf() Example","content":"<?php\n$handle\u00a0=\u00a0fopen(\"users.txt\",\u00a0\"r\");\nwhile\u00a0($userinfo\u00a0=\u00a0fscanf($handle,\u00a0\"%s\\t%s\\t%s\\n\"))\u00a0{\n\u00a0\u00a0\u00a0\u00a0list\u00a0($name,\u00a0$profession,\u00a0$countrycode)\u00a0=\u00a0$userinfo;\n\u00a0\u00a0\u00a0\u00a0\/\/...\u00a0do\u00a0something\u00a0with\u00a0the\u00a0values\n}\nfclose($handle);\n?>"},{"title":"Example #2 Contents of users.txt","content":"javier  argonaut        pe\nhiroshi sculptor        jp\nrobert  slacker us\nluigi   florist it"}]},"fseek":{"name":"fseek","parameters":[{"type":"resource","name":"$handle","description":"A file system pointer resource that is typically created using fopen()."},{"type":"int","name":"$offset","description":"The offset.\n\nTo move to a position before the end-of-file, you need to pass a negative value in offset and set whence to SEEK_END."},{"type":"int","name":"$whence","default_value":"SEEK_SET","description":"whence values are:\n\nSEEK_SET - Set position equal to offset bytes. SEEK_CUR - Set position to current location plus offset. SEEK_END - Set position to end-of-file plus offset."}],"return":{"type":"int","values":[]},"short":"Seeks on a file pointer","examples":[{"title":"Example #1 fseek() example","content":"<?php\n\n$fp\u00a0=\u00a0fopen('somefile.txt',\u00a0'r');\n\n\/\/\u00a0read\u00a0some\u00a0data\n$data\u00a0=\u00a0fgets($fp,\u00a04096);\n\n\/\/\u00a0move\u00a0back\u00a0to\u00a0the\u00a0beginning\u00a0of\u00a0the\u00a0file\n\/\/\u00a0same\u00a0as\u00a0rewind($fp);\nfseek($fp,\u00a00);\n\n?>"}]},"fsockopen":{"name":"fsockopen","parameters":[{"type":"string","name":"$hostname","description":"If OpenSSL support is installed, you may prefix the hostname with either ssl:\/\/ or tls:\/\/ to use an SSL or TLS client connection over TCP\/IP to connect to the remote host."},{"type":"int","name":"$port","default_value":"-1","description":"The port number. This can be omitted and skipped with -1 for transports that do not use ports, such as unix:\/\/."},{"type":"float","name":"$timeout","default_value":"ini_get(\"default_socket_timeout\")","description":"The connection timeout, in seconds.\n\nNote:\n If you need to set a timeout for reading\/writing data over the socket, use stream_set_timeout(), as the timeout parameter to fsockopen() only applies while connecting the socket."}],"return":{"type":"resource","values":["FALSE"]},"short":"Open Internet or Unix domain socket connection","examples":[{"title":"Example #1 fsockopen() Example","content":"<?php\n$fp\u00a0=\u00a0fsockopen(\"www.example.com\",\u00a080,\u00a0$errno,\u00a0$errstr,\u00a030);\nif\u00a0(!$fp)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$errstr\u00a0($errno)<br\u00a0\/>\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0$out\u00a0=\u00a0\"GET\u00a0\/\u00a0HTTP\/1.1\\r\\n\";\n\u00a0\u00a0\u00a0\u00a0$out\u00a0.=\u00a0\"Host:\u00a0www.example.com\\r\\n\";\n\u00a0\u00a0\u00a0\u00a0$out\u00a0.=\u00a0\"Connection:\u00a0Close\\r\\n\\r\\n\";\n\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0$out);\n\u00a0\u00a0\u00a0\u00a0while\u00a0(!feof($fp))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0fgets($fp,\u00a0128);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0fclose($fp);\n}\n?>"},{"title":"Example #2 Using UDP connection","content":"The example below shows how to retrieve the day and time from the UDP\n     service \"daytime\" (port 13) in your own machine."}]},"fstat":{"name":"fstat","parameters":[{"type":"resource","name":"$handle","description":"A file system pointer resource that is typically created using fopen()."}],"return":{"type":"array","values":[]},"short":"Gets information about a file using an open file pointer","examples":[{"title":"Example #1 fstat() example","content":"<?php\n\n\/\/\u00a0open\u00a0a\u00a0file\n$fp\u00a0=\u00a0fopen(\"\/etc\/passwd\",\u00a0\"r\");\n\n\/\/\u00a0gather\u00a0statistics\n$fstat\u00a0=\u00a0fstat($fp);\n\n\/\/\u00a0close\u00a0the\u00a0file\nfclose($fp);\n\n\/\/\u00a0print\u00a0only\u00a0the\u00a0associative\u00a0part\nprint_r(array_slice($fstat,\u00a013));\n\n?>"}]},"ftell":{"name":"ftell","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must point to a file successfully opened by fopen() or popen(). ftell() gives undefined results for append-only streams (opened with \"a\" flag)."}],"return":{"type":"int","values":["FALSE"]},"short":"Returns the current position of the file read\/write pointer","examples":[{"title":"Example #1 ftell() example","content":"<?php\n\n\/\/\u00a0opens\u00a0a\u00a0file\u00a0and\u00a0read\u00a0some\u00a0data\n$fp\u00a0=\u00a0fopen(\"\/etc\/passwd\",\u00a0\"r\");\n$data\u00a0=\u00a0fgets($fp,\u00a012);\n\n\/\/\u00a0where\u00a0are\u00a0we\u00a0?\necho\u00a0ftell($fp);\u00a0\/\/\u00a011\n\nfclose($fp);\n\n?>"}]},"ftok":{"name":"ftok","parameters":[{"type":"string","name":"$pathname","description":"Path to an accessible file."},{"type":"string","name":"$proj","description":"Project identifier. This must be a one character string."}],"return":{"type":"int","values":[]},"short":"Convert a pathname and a project identifier to a System V IPC key","examples":[]},"ftp_alloc":{"name":"ftp_alloc","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"int","name":"$filesize","description":"The number of bytes to allocate."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Allocates space for a file to be uploaded","examples":[{"title":"Example #1 ftp_alloc() example","content":"<?php\n\n$file\u00a0=\u00a0\"\/home\/user\/myfile\";\n\n\/\/\u00a0connect\u00a0to\u00a0the\u00a0server\n$conn_id\u00a0=\u00a0ftp_connect('ftp.example.com');\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0'anonymous',\u00a0'user@example.com');\n\nif\u00a0(ftp_alloc($conn_id,\u00a0filesize($file),\u00a0$result))\u00a0{\n\u00a0\u00a0echo\u00a0\"Space\u00a0successfully\u00a0allocated\u00a0on\u00a0server.\u00a0\u00a0Sending\u00a0$file.\\n\";\n\u00a0\u00a0ftp_put($conn_id,\u00a0'\/incomming\/myfile',\u00a0$file,\u00a0FTP_BINARY);\n}\u00a0else\u00a0{\n\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0allocate\u00a0space\u00a0on\u00a0server.\u00a0\u00a0Server\u00a0said:\u00a0$result\\n\";\n}\n\nftp_close($conn_id);\n\n?>"}]},"ftp_append":{"name":"ftp_append","parameters":[{"type":"resource","name":"$ftp","description":""},{"type":"string","name":"$remote_file","description":""},{"type":"string","name":"$local_file","description":""},{"type":"int","name":"$mode","default_value":"FTP_IMAGE","description":""}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Append content of a file a another file on the FTP server","examples":[]},"ftp_cdup":{"name":"ftp_cdup","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Changes to the parent directory","examples":[{"title":"Example #1 ftp_cdup() example","content":"<?php\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0change\u00a0the\u00a0current\u00a0directory\u00a0to\u00a0html\nftp_chdir($conn_id,\u00a0'html');\n\necho\u00a0ftp_pwd($conn_id);\u00a0\/\/\u00a0\/html\u00a0\n\n\/\/\u00a0return\u00a0to\u00a0the\u00a0parent\u00a0directory\nif\u00a0(ftp_cdup($conn_id))\u00a0{\u00a0\n\u00a0\u00a0echo\u00a0\"cdup\u00a0successful\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0echo\u00a0\"cdup\u00a0not\u00a0successful\\n\";\n}\n\necho\u00a0ftp_pwd($conn_id);\u00a0\/\/\u00a0\/\n\nftp_close($conn_id);\n?>"}]},"ftp_chdir":{"name":"ftp_chdir","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$directory","description":"The target directory."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Changes the current directory on a FTP server","examples":[{"title":"Example #1 ftp_chdir() example","content":"<?php\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\u00a0\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\u00a0\n\n\/\/\u00a0check\u00a0connection\nif\u00a0((!$conn_id)\u00a0||\u00a0(!$login_result))\u00a0{\n\u00a0\u00a0\u00a0\u00a0die(\"FTP\u00a0connection\u00a0has\u00a0failed\u00a0!\");\n}\n\necho\u00a0\"Current\u00a0directory:\u00a0\"\u00a0.\u00a0ftp_pwd($conn_id)\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0try\u00a0to\u00a0change\u00a0the\u00a0directory\u00a0to\u00a0somedir\nif\u00a0(ftp_chdir($conn_id,\u00a0\"somedir\"))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Current\u00a0directory\u00a0is\u00a0now:\u00a0\"\u00a0.\u00a0ftp_pwd($conn_id)\u00a0.\u00a0\"\\n\";\n}\u00a0else\u00a0{\u00a0\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0change\u00a0directory\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n?>"}]},"ftp_chmod":{"name":"ftp_chmod","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"int","name":"$mode","description":"The new permissions, given as an octal value."},{"type":"string","name":"$filename","description":"The remote file."}],"return":{"type":"int","values":["FALSE"]},"short":"Set permissions on a file via FTP","examples":[{"title":"Example #1 ftp_chmod() example","content":"<?php\n$file\u00a0=\u00a0'public_html\/index.php';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0try\u00a0to\u00a0chmod\u00a0$file\u00a0to\u00a0644\nif\u00a0(ftp_chmod($conn_id,\u00a00644,\u00a0$file)\u00a0!==\u00a0false)\u00a0{\n\u00a0echo\u00a0\"$file\u00a0chmoded\u00a0successfully\u00a0to\u00a0644\\n\";\n}\u00a0else\u00a0{\n\u00a0echo\u00a0\"could\u00a0not\u00a0chmod\u00a0$file\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n?>"}]},"ftp_close":{"name":"ftp_close","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Closes an FTP connection","examples":[{"title":"Example #1 ftp_close() example","content":"<?php\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0print\u00a0the\u00a0current\u00a0directory\necho\u00a0ftp_pwd($conn_id);\u00a0\/\/\u00a0\/\n\n\/\/\u00a0close\u00a0this\u00a0connection\nftp_close($conn_id);\n?>"}]},"ftp_connect":{"name":"ftp_connect","parameters":[{"type":"string","name":"$host","description":"The FTP server address. This parameter shouldn't have any trailing slashes and shouldn't be prefixed with ftp:\/\/."},{"type":"int","name":"$port","default_value":"21","description":"This parameter specifies an alternate port to connect to. If it is omitted or set to zero, then the default FTP port, 21, will be used."},{"type":"int","name":"$timeout","default_value":"90","description":"This parameter specifies the timeout for all subsequent network operations. If omitted, the default value is 90 seconds. The timeout can be changed and queried at any time with ftp_set_option() and ftp_get_option()."}],"return":{"type":"resource","values":["FALSE"]},"short":"Opens an FTP connection","examples":[{"title":"Example #1 ftp_connect() example","content":"<?php\n\n$ftp_server\u00a0=\u00a0\"ftp.example.com\";\n\n\/\/\u00a0set\u00a0up\u00a0a\u00a0connection\u00a0or\u00a0die\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server)\u00a0or\u00a0die(\"Couldn't\u00a0connect\u00a0to\u00a0$ftp_server\");\u00a0\n\n?>"}]},"ftp_delete":{"name":"ftp_delete","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$path","description":"The file to delete."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Deletes a file on the FTP server","examples":[{"title":"Example #1 ftp_delete() example","content":"<?php\n$file\u00a0=\u00a0'public_html\/old.txt';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0try\u00a0to\u00a0delete\u00a0$file\nif\u00a0(ftp_delete($conn_id,\u00a0$file))\u00a0{\n\u00a0echo\u00a0\"$file\u00a0deleted\u00a0successful\\n\";\n}\u00a0else\u00a0{\n\u00a0echo\u00a0\"could\u00a0not\u00a0delete\u00a0$file\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n?>"}]},"ftp_exec":{"name":"ftp_exec","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$command","description":"The command to execute."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Requests execution of a command on the FTP server","examples":[{"title":"Example #1 ftp_exec() example","content":"<?php\n\n\/\/\u00a0variable\u00a0initialization\n$command\u00a0=\u00a0'ls\u00a0-al\u00a0>files.txt';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0execute\u00a0command\nif\u00a0(ftp_exec($conn_id,\u00a0$command))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$command\u00a0executed\u00a0successfully\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"could\u00a0not\u00a0execute\u00a0$command\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n\n?>"}]},"ftp_fget":{"name":"ftp_fget","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"resource","name":"$handle","description":"An open file pointer in which we store the data."},{"type":"string","name":"$remote_file","description":"The remote file path."},{"type":"int","name":"$mode","default_value":"FTP_IMAGE","description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY."},{"type":"int","name":"$resumepos","default_value":"0","description":"The position in the remote file to start downloading from."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Downloads a file from the FTP server and saves to an open file","examples":[{"title":"Example #1 ftp_fget() example","content":"<?php\n\n\/\/\u00a0path\u00a0to\u00a0remote\u00a0file\n$remote_file\u00a0=\u00a0'somefile.txt';\n$local_file\u00a0=\u00a0'localfile.txt';\n\n\/\/\u00a0open\u00a0some\u00a0file\u00a0to\u00a0write\u00a0to\n$handle\u00a0=\u00a0fopen($local_file,\u00a0'w');\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0try\u00a0to\u00a0download\u00a0$remote_file\u00a0and\u00a0save\u00a0it\u00a0to\u00a0$handle\nif\u00a0(ftp_fget($conn_id,\u00a0$handle,\u00a0$remote_file,\u00a0FTP_ASCII,\u00a00))\u00a0{\n\u00a0echo\u00a0\"successfully\u00a0written\u00a0to\u00a0$local_file\\n\";\n}\u00a0else\u00a0{\n\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0downloading\u00a0$remote_file\u00a0to\u00a0$local_file\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\u00a0and\u00a0the\u00a0file\u00a0handler\nftp_close($conn_id);\nfclose($handle);\n?>"}]},"ftp_fput":{"name":"ftp_fput","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$remote_file","description":"The remote file path."},{"type":"resource","name":"$handle","description":"An open file pointer on the local file. Reading stops at end of file."},{"type":"int","name":"$mode","default_value":"FTP_IMAGE","description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY."},{"type":"int","name":"$startpos","default_value":"0","description":"The position in the remote file to start uploading to."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Uploads from an open file to the FTP server","examples":[{"title":"Example #1 ftp_fput() example","content":"<?php\n\n\/\/\u00a0open\u00a0some\u00a0file\u00a0for\u00a0reading\n$file\u00a0=\u00a0'somefile.txt';\n$fp\u00a0=\u00a0fopen($file,\u00a0'r');\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0try\u00a0to\u00a0upload\u00a0$file\nif\u00a0(ftp_fput($conn_id,\u00a0$file,\u00a0$fp,\u00a0FTP_ASCII))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Successfully\u00a0uploaded\u00a0$file\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0uploading\u00a0$file\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\u00a0and\u00a0the\u00a0file\u00a0handler\nftp_close($conn_id);\nfclose($fp);\n\n?>"}]},"ftp_get":{"name":"ftp_get","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$local_file","description":"The local file path (will be overwritten if the file already exists)."},{"type":"string","name":"$remote_file","description":"The remote file path."},{"type":"int","name":"$mode","default_value":"FTP_IMAGE","description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY."},{"type":"int","name":"$resumepos","default_value":"0","description":"The position in the remote file to start downloading from."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Downloads a file from the FTP server","examples":[{"title":"Example #1 ftp_get() example","content":"<?php\n\n\/\/\u00a0define\u00a0some\u00a0variables\n$local_file\u00a0=\u00a0'local.zip';\n$server_file\u00a0=\u00a0'server.zip';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0try\u00a0to\u00a0download\u00a0$server_file\u00a0and\u00a0save\u00a0to\u00a0$local_file\nif\u00a0(ftp_get($conn_id,\u00a0$local_file,\u00a0$server_file,\u00a0FTP_BINARY))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Successfully\u00a0written\u00a0to\u00a0$local_file\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n\n?>"}]},"ftp_get_option":{"name":"ftp_get_option","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"int","name":"$option","description":"Currently, the following options are supported:\n\nSupported runtime FTP options\n FTP_TIMEOUT_SEC\n Returns the current timeout used for network related operations.\n FTP_AUTOSEEK\n Returns TRUE if this option is on, FALSE otherwise."}],"return":{"type":"mixed","values":["FALSE"]},"short":"Retrieves various runtime behaviours of the current FTP stream","examples":[{"title":"Example #1 ftp_get_option() example","content":"<?php\n\/\/\u00a0Get\u00a0the\u00a0timeout\u00a0of\u00a0the\u00a0given\u00a0FTP\u00a0stream\n$timeout\u00a0=\u00a0ftp_get_option($conn_id,\u00a0FTP_TIMEOUT_SEC);\n?>"}]},"ftp_login":{"name":"ftp_login","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$username","description":"The username (USER)."},{"type":"string","name":"$password","description":"The password (PASS)."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Logs in to an FTP connection","examples":[{"title":"Example #1 ftp_login() example","content":"<?php\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n$ftp_server\u00a0=\u00a0\"ftp.example.com\";\n$ftp_user\u00a0=\u00a0\"foo\";\n$ftp_pass\u00a0=\u00a0\"bar\";\n\n\/\/\u00a0set\u00a0up\u00a0a\u00a0connection\u00a0or\u00a0die\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server)\u00a0or\u00a0die(\"Couldn't\u00a0connect\u00a0to\u00a0$ftp_server\");\u00a0\n\n\/\/\u00a0try\u00a0to\u00a0login\nif\u00a0(@ftp_login($conn_id,\u00a0$ftp_user,\u00a0$ftp_pass))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Connected\u00a0as\u00a0$ftp_user@$ftp_server\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0connect\u00a0as\u00a0$ftp_user\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\u00a0\u00a0\n?>"}]},"ftp_mdtm":{"name":"ftp_mdtm","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$remote_file","description":"The file from which to extract the last modification time."}],"return":{"type":"int","values":[]},"short":"Returns the last modified time of the given file","examples":[{"title":"Example #1 ftp_mdtm() example","content":"<?php\n\n$file\u00a0=\u00a0'somefile.txt';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0\u00a0get\u00a0the\u00a0last\u00a0modified\u00a0time\n$buff\u00a0=\u00a0ftp_mdtm($conn_id,\u00a0$file);\n\nif\u00a0($buff\u00a0!=\u00a0-1)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0somefile.txt\u00a0was\u00a0last\u00a0modified\u00a0on:\u00a0March\u00a026\u00a02003\u00a014:16:41.\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$file\u00a0was\u00a0last\u00a0modified\u00a0on\u00a0:\u00a0\"\u00a0.\u00a0date(\"F\u00a0d\u00a0Y\u00a0H:i:s.\",\u00a0$buff);\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0get\u00a0mdtime\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n\n?>"}]},"ftp_mkdir":{"name":"ftp_mkdir","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$directory","description":"The name of the directory that will be created."}],"return":{"type":"string","values":["FALSE"]},"short":"Creates a directory","examples":[{"title":"Example #1 ftp_mkdir() example","content":"<?php\n\n$dir\u00a0=\u00a0'www';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0try\u00a0to\u00a0create\u00a0the\u00a0directory\u00a0$dir\nif\u00a0(ftp_mkdir($conn_id,\u00a0$dir))\u00a0{\n\u00a0echo\u00a0\"successfully\u00a0created\u00a0$dir\\n\";\n}\u00a0else\u00a0{\n\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0creating\u00a0$dir\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n?>"}]},"ftp_mlsd":{"name":"ftp_mlsd","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$directory","description":"The directory to be listed."}],"return":{"type":"array","values":["FALSE"]},"short":"Returns a list of files in the given directory","examples":[{"title":"Example #1 ftp_mlsd() example","content":"<?php\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0get\u00a0contents\u00a0of\u00a0the\u00a0current\u00a0directory\n$contents\u00a0=\u00a0ftp_mlsd($conn_id,\u00a0\".\");\n\n\/\/\u00a0output\u00a0$contents\nvar_dump($contents);\n\n?>"}]},"ftp_nb_continue":{"name":"ftp_nb_continue","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."}],"return":{"type":"int","values":["FTP_FAILED","FTP_FINISHED","FTP_MOREDATA"]},"short":"Continues retrieving\/sending a file (non-blocking)","examples":[{"title":"Example #1 ftp_nb_continue() example","content":"<?php\n\n\/\/\u00a0Initate\u00a0the\u00a0download\n$ret\u00a0=\u00a0ftp_nb_get($my_connection,\u00a0\"test\",\u00a0\"README\",\u00a0FTP_BINARY);\nwhile\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\n\n\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0downloading...\n\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);\n}\nif\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0downloading\u00a0the\u00a0file...\";\n\u00a0\u00a0\u00a0exit(1);\n}\n?>"}]},"ftp_nb_fget":{"name":"ftp_nb_fget","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"resource","name":"$handle","description":"An open file pointer in which we store the data."},{"type":"string","name":"$remote_file","description":"The remote file path."},{"type":"int","name":"$mode","default_value":"FTP_IMAGE","description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY."},{"type":"int","name":"$resumepos","default_value":"0","description":"The position in the remote file to start downloading from."}],"return":{"type":"int","values":["FTP_FAILED","FTP_FINISHED","FTP_MOREDATA"]},"short":"Retrieves a file from the FTP server and writes it to an open file (non-blocking)","examples":[{"title":"Example #1 ftp_nb_fget() example","content":"<?php\n\n\/\/\u00a0open\u00a0some\u00a0file\u00a0for\u00a0reading\n$file\u00a0=\u00a0'index.php';\n$fp\u00a0=\u00a0fopen($file,\u00a0'w');\n\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0Initate\u00a0the\u00a0download\n$ret\u00a0=\u00a0ftp_nb_fget($conn_id,\u00a0$fp,\u00a0$file,\u00a0FTP_BINARY);\nwhile\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\n\n\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\n\u00a0\u00a0\u00a0echo\u00a0\".\";\n\n\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0downloading...\n\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($conn_id);\n}\nif\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0downloading\u00a0the\u00a0file...\";\n\u00a0\u00a0\u00a0exit(1);\n}\n\n\/\/\u00a0close\u00a0filepointer\nfclose($fp);\n?>"}]},"ftp_nb_fput":{"name":"ftp_nb_fput","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$remote_file","description":"The remote file path."},{"type":"resource","name":"$handle","description":"An open file pointer on the local file. Reading stops at end of file."},{"type":"int","name":"$mode","default_value":"FTP_IMAGE","description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY."},{"type":"int","name":"$startpos","default_value":"0","description":"The position in the remote file to start uploading to."}],"return":{"type":"int","values":["FTP_FAILED","FTP_FINISHED","FTP_MOREDATA"]},"short":"Stores a file from an open file to the FTP server (non-blocking)","examples":[{"title":"Example #1 ftp_nb_fput() example","content":"<?php\n\n$file\u00a0=\u00a0'index.php';\n\n$fp\u00a0=\u00a0fopen($file,\u00a0'r');\n\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0Initate\u00a0the\u00a0upload\n$ret\u00a0=\u00a0ftp_nb_fput($conn_id,\u00a0$file,\u00a0$fp,\u00a0FTP_BINARY);\nwhile\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\n\n\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\n\u00a0\u00a0\u00a0echo\u00a0\".\";\n\n\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0upload...\n\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($conn_id);\n}\nif\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0uploading\u00a0the\u00a0file...\";\n\u00a0\u00a0\u00a0exit(1);\n}\n\nfclose($fp);\n?>"}]},"ftp_nb_get":{"name":"ftp_nb_get","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$local_file","description":"The local file path (will be overwritten if the file already exists)."},{"type":"string","name":"$remote_file","description":"The remote file path."},{"type":"int","name":"$mode","default_value":"FTP_IMAGE","description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY."},{"type":"int","name":"$resumepos","default_value":"0","description":"The position in the remote file to start downloading from."}],"return":{"type":"int","values":["FTP_FAILED","FTP_FINISHED","FTP_MOREDATA"]},"short":"Retrieves a file from the FTP server and writes it to a local file (non-blocking)","examples":[{"title":"Example #1 ftp_nb_get() example","content":"<?php\n\n\/\/\u00a0Initate\u00a0the\u00a0download\n$ret\u00a0=\u00a0ftp_nb_get($my_connection,\u00a0\"test\",\u00a0\"README\",\u00a0FTP_BINARY);\nwhile\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\n\u00a0\u00a0\u00a0echo\u00a0\".\";\n\n\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0downloading...\n\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);\n}\nif\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0downloading\u00a0the\u00a0file...\";\n\u00a0\u00a0\u00a0exit(1);\n}\n?>"},{"title":"Example #2 Resuming a download with ftp_nb_get()","content":"<?php\n\n\/\/\u00a0Initate\u00a0\n$ret\u00a0=\u00a0ftp_nb_get($my_connection,\u00a0\"test\",\u00a0\"README\",\u00a0FTP_BINARY,\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0filesize(\"test\"));\n\/\/\u00a0OR:\u00a0$ret\u00a0=\u00a0ftp_nb_get($my_connection,\u00a0\"test\",\u00a0\"README\",\u00a0\n\/\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FTP_BINARY,\u00a0FTP_AUTORESUME);\nwhile\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\n\u00a0\u00a0\u00a0echo\u00a0\".\";\n\n\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0downloading...\n\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);\n}\nif\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0downloading\u00a0the\u00a0file...\";\n\u00a0\u00a0\u00a0exit(1);\n}\n?>"},{"title":"Example #3 \n     Resuming a download at position 100 to a new\n     file with ftp_nb_get()\n    ","content":"<?php\n\n\/\/\u00a0Disable\u00a0Autoseek\nftp_set_option($my_connection,\u00a0FTP_AUTOSEEK,\u00a0false);\n\n\/\/\u00a0Initiate\n$ret\u00a0=\u00a0ftp_nb_get($my_connection,\u00a0\"newfile\",\u00a0\"README\",\u00a0FTP_BINARY,\u00a0100);\nwhile\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\n\n\u00a0\u00a0\u00a0\/*\u00a0...\u00a0*\/\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0downloading...\n\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);\n}\n?>"}]},"ftp_nb_put":{"name":"ftp_nb_put","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$remote_file","description":"The remote file path."},{"type":"string","name":"$local_file","description":"The local file path."},{"type":"int","name":"$mode","default_value":"FTP_IMAGE","description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY."},{"type":"int","name":"$startpos","default_value":"0","description":"The position in the remote file to start uploading to."}],"return":{"type":"int","values":["FTP_FAILED","FTP_FINISHED","FTP_MOREDATA"]},"short":"Stores a file on the FTP server (non-blocking)","examples":[{"title":"Example #1 ftp_nb_put() example","content":"<?php\n\n\/\/\u00a0Initiate\u00a0the\u00a0Upload\n$ret\u00a0=\u00a0ftp_nb_put($my_connection,\u00a0\"test.remote\",\u00a0\"test.local\",\u00a0FTP_BINARY);\nwhile\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\n\u00a0\u00a0\u00a0echo\u00a0\".\";\n\n\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0uploading...\n\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);\n}\nif\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0uploading\u00a0the\u00a0file...\";\n\u00a0\u00a0\u00a0exit(1);\n}\n?>"},{"title":"Example #2 Resuming an upload with ftp_nb_put()","content":"<?php\n\n\/\/\u00a0Initiate\n$ret\u00a0=\u00a0ftp_nb_put($my_connection,\u00a0\"test.remote\",\u00a0\"test.local\",\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FTP_BINARY,\u00a0ftp_size(\"test.remote\"));\n\/\/\u00a0OR:\u00a0$ret\u00a0=\u00a0ftp_nb_put($my_connection,\u00a0\"test.remote\",\u00a0\"test.local\",\u00a0\n\/\/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FTP_BINARY,\u00a0FTP_AUTORESUME);\n\nwhile\u00a0($ret\u00a0==\u00a0FTP_MOREDATA)\u00a0{\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0whatever\u00a0you\u00a0want\n\u00a0\u00a0\u00a0echo\u00a0\".\";\n\n\u00a0\u00a0\u00a0\/\/\u00a0Continue\u00a0uploading...\n\u00a0\u00a0\u00a0$ret\u00a0=\u00a0ftp_nb_continue($my_connection);\n}\nif\u00a0($ret\u00a0!=\u00a0FTP_FINISHED)\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0an\u00a0error\u00a0uploading\u00a0the\u00a0file...\";\n\u00a0\u00a0\u00a0exit(1);\n}\n?>"}]},"ftp_nlist":{"name":"ftp_nlist","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$directory","description":"The directory to be listed. This parameter can also include arguments, eg. ftp_nlist($conn_id, \"-la \/your\/dir\"); Note that this parameter isn't escaped so there may be some issues with filenames containing spaces and other characters."}],"return":{"type":"array","values":["FALSE"]},"short":"Returns a list of files in the given directory","examples":[{"title":"Example #1 ftp_nlist() example","content":"<?php\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0get\u00a0contents\u00a0of\u00a0the\u00a0current\u00a0directory\n$contents\u00a0=\u00a0ftp_nlist($conn_id,\u00a0\".\");\n\n\/\/\u00a0output\u00a0$contents\nvar_dump($contents);\n\n?>"}]},"ftp_pasv":{"name":"ftp_pasv","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"bool","name":"$pasv","description":"If TRUE, the passive mode is turned on, else it's turned off."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Turns passive mode on or off","examples":[{"title":"Example #1 ftp_pasv() example","content":"<?php\n$file\u00a0=\u00a0'somefile.txt';\n$remote_file\u00a0=\u00a0'readme.txt';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0turn\u00a0passive\u00a0mode\u00a0on\nftp_pasv($conn_id,\u00a0true);\n\n\/\/\u00a0upload\u00a0a\u00a0file\nif\u00a0(ftp_put($conn_id,\u00a0$remote_file,\u00a0$file,\u00a0FTP_ASCII))\u00a0{\n\u00a0echo\u00a0\"successfully\u00a0uploaded\u00a0$file\\n\";\n}\u00a0else\u00a0{\n\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0uploading\u00a0$file\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n?>"}]},"ftp_put":{"name":"ftp_put","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$remote_file","description":"The remote file path."},{"type":"string","name":"$local_file","description":"The local file path."},{"type":"int","name":"$mode","default_value":"FTP_IMAGE","description":"The transfer mode. Must be either FTP_ASCII or FTP_BINARY."},{"type":"int","name":"$startpos","default_value":"0","description":"The position in the remote file to start uploading to."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Uploads a file to the FTP server","examples":[{"title":"Example #1 ftp_put() example","content":"<?php\n$file\u00a0=\u00a0'somefile.txt';\n$remote_file\u00a0=\u00a0'readme.txt';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0upload\u00a0a\u00a0file\nif\u00a0(ftp_put($conn_id,\u00a0$remote_file,\u00a0$file,\u00a0FTP_ASCII))\u00a0{\n\u00a0echo\u00a0\"successfully\u00a0uploaded\u00a0$file\\n\";\n}\u00a0else\u00a0{\n\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0uploading\u00a0$file\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n?>"}]},"ftp_pwd":{"name":"ftp_pwd","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."}],"return":{"type":"string","values":["FALSE"]},"short":"Returns the current directory name","examples":[{"title":"Example #1 ftp_pwd() example","content":"<?php\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0change\u00a0directory\u00a0to\u00a0public_html\nftp_chdir($conn_id,\u00a0'public_html');\n\n\/\/\u00a0print\u00a0current\u00a0directory\necho\u00a0ftp_pwd($conn_id);\u00a0\/\/\u00a0\/public_html\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n?>"}]},"ftp_quit":{"name":"ftp_quit","parameters":[],"return":{"type":"","values":[]},"short":"Alias of ftp_close()","examples":[]},"ftp_raw":{"name":"ftp_raw","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$command","description":"The command to execute."}],"return":{"type":"array","values":[]},"short":"Sends an arbitrary command to an FTP server","examples":[{"title":"Example #1 Using ftp_raw() to login to an FTP server manually.","content":"<?php\n$fp\u00a0=\u00a0ftp_connect(\"ftp.example.com\");\n\n\/*\u00a0This\u00a0is\u00a0the\u00a0same\u00a0as:\u00a0\n\u00a0\u00a0\u00a0ftp_login($fp,\u00a0\"joeblow\",\u00a0\"secret\");\u00a0*\/\nftp_raw($fp,\u00a0\"USER\u00a0joeblow\");\nftp_raw($fp,\u00a0\"PASS\u00a0secret\");\n?>"}]},"ftp_rawlist":{"name":"ftp_rawlist","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$directory","description":"The directory path. May include arguments for the LIST command."},{"type":"bool","name":"$recursive","default_value":"FALSE","description":"If set to TRUE, the issued command will be LIST -R."}],"return":{"type":"array","values":["FALSE"]},"short":"Returns a detailed list of files in the given directory","examples":[{"title":"Example #1 ftp_rawlist() example","content":"<?php\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0get\u00a0the\u00a0file\u00a0list\u00a0for\u00a0\/\n$buff\u00a0=\u00a0ftp_rawlist($conn_id,\u00a0'\/');\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n\n\/\/\u00a0output\u00a0the\u00a0buffer\nvar_dump($buff);\n?>"}]},"ftp_rename":{"name":"ftp_rename","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$oldname","description":"The old file\/directory name."},{"type":"string","name":"$newname","description":"The new name."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Renames a file or a directory on the FTP server","examples":[{"title":"Example #1 ftp_rename() example","content":"<?php\n$old_file\u00a0=\u00a0'somefile.txt.bak';\n$new_file\u00a0=\u00a0'somefile.txt';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0try\u00a0to\u00a0rename\u00a0$old_file\u00a0to\u00a0$new_file\nif\u00a0(ftp_rename($conn_id,\u00a0$old_file,\u00a0$new_file))\u00a0{\n\u00a0echo\u00a0\"successfully\u00a0renamed\u00a0$old_file\u00a0to\u00a0$new_file\\n\";\n}\u00a0else\u00a0{\n\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0renaming\u00a0$old_file\u00a0to\u00a0$new_file\\n\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n?>"}]},"ftp_rmdir":{"name":"ftp_rmdir","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$directory","description":"The directory to delete. This must be either an absolute or relative path to an empty directory."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Removes a directory","examples":[{"title":"Example #1 ftp_rmdir() example","content":"<?php\n\n$dir\u00a0=\u00a0'www\/';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0try\u00a0to\u00a0delete\u00a0the\u00a0directory\u00a0$dir\nif\u00a0(ftp_rmdir($conn_id,\u00a0$dir))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Successfully\u00a0deleted\u00a0$dir\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"There\u00a0was\u00a0a\u00a0problem\u00a0while\u00a0deleting\u00a0$dir\\n\";\n}\n\nftp_close($conn_id);\n\n?>"}]},"ftp_set_option":{"name":"ftp_set_option","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"int","name":"$option","description":"Currently, the following options are supported:\n\nSupported runtime FTP options\n FTP_TIMEOUT_SEC\n Changes the timeout in seconds used for all network related functions. value must be an integer that is greater than 0. The default timeout is 90 seconds.\n FTP_AUTOSEEK\n When enabled, GET or PUT requests with a resumepos or startpos parameter will first seek to the requested position within the file. This is enabled by default.\n FTP_USEPASVADDRESS\n When disabled, PHP will ignore the IP address returned by the FTP server in response to the PASV command and instead use the IP address that was supplied in the ftp_connect(). value must be a boolean."},{"type":"mixed","name":"$value","description":"This parameter depends on which option is chosen to be altered."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set miscellaneous runtime FTP options","examples":[{"title":"Example #1 ftp_set_option() example","content":"<?php\n\/\/\u00a0Set\u00a0the\u00a0network\u00a0timeout\u00a0to\u00a010\u00a0seconds\nftp_set_option($conn_id,\u00a0FTP_TIMEOUT_SEC,\u00a010);\n?>"}]},"ftp_site":{"name":"ftp_site","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$command","description":"The SITE command. Note that this parameter isn't escaped so there may be some issues with filenames containing spaces and other characters."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sends a SITE command to the server","examples":[{"title":"Example #1 Sending a SITE command to an ftp server","content":"<?php\n\/\/\u00a0Connect\u00a0to\u00a0FTP\u00a0server\n$conn\u00a0=\u00a0ftp_connect('ftp.example.com');\nif\u00a0(!$conn)\u00a0die('Unable\u00a0to\u00a0connect\u00a0to\u00a0ftp.example.com');\n\n\/\/\u00a0Login\u00a0as\u00a0\"user\"\u00a0with\u00a0password\u00a0\"pass\"\nif\u00a0(!ftp_login($conn,\u00a0'user',\u00a0'pass'))\u00a0die('Error\u00a0logging\u00a0into\u00a0ftp.example.com');\n\n\/\/\u00a0Issue:\u00a0\"SITE\u00a0CHMOD\u00a00600\u00a0\/home\/user\/privatefile\"\u00a0command\u00a0to\u00a0ftp\u00a0server\nif\u00a0(ftp_site($conn,\u00a0'CHMOD\u00a00600\u00a0\/home\/user\/privatefile'))\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"Command\u00a0executed\u00a0successfully.\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0die('Command\u00a0failed.');\n}\n?>"}]},"ftp_size":{"name":"ftp_size","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."},{"type":"string","name":"$remote_file","description":"The remote file."}],"return":{"type":"int","values":[]},"short":"Returns the size of the given file","examples":[{"title":"Example #1 ftp_size() example","content":"<?php\n\n$file\u00a0=\u00a0'somefile.txt';\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0connection\n$conn_id\u00a0=\u00a0ftp_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\n\/\/\u00a0get\u00a0the\u00a0size\u00a0of\u00a0$file\n$res\u00a0=\u00a0ftp_size($conn_id,\u00a0$file);\n\nif\u00a0($res\u00a0!=\u00a0-1)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"size\u00a0of\u00a0$file\u00a0is\u00a0$res\u00a0bytes\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"couldn't\u00a0get\u00a0the\u00a0size\";\n}\n\n\/\/\u00a0close\u00a0the\u00a0connection\nftp_close($conn_id);\n\n?>"}]},"ftp_ssl_connect":{"name":"ftp_ssl_connect","parameters":[{"type":"string","name":"$host","description":"The FTP server address. This parameter shouldn't have any trailing slashes and shouldn't be prefixed with ftp:\/\/."},{"type":"int","name":"$port","default_value":"21","description":"This parameter specifies an alternate port to connect to. If it is omitted or set to zero, then the default FTP port, 21, will be used."},{"type":"int","name":"$timeout","default_value":"90","description":"This parameter specifies the timeout for all subsequent network operations. If omitted, the default value is 90 seconds. The timeout can be changed and queried at any time with ftp_set_option() and ftp_get_option()."}],"return":{"type":"resource","values":["FALSE"]},"short":"Opens a Secure SSL-FTP connection","examples":[{"title":"Example #1 ftp_ssl_connect() example","content":"<?php\n\n\/\/\u00a0set\u00a0up\u00a0basic\u00a0ssl\u00a0connection\n$conn_id\u00a0=\u00a0ftp_ssl_connect($ftp_server);\n\n\/\/\u00a0login\u00a0with\u00a0username\u00a0and\u00a0password\n$login_result\u00a0=\u00a0ftp_login($conn_id,\u00a0$ftp_user_name,\u00a0$ftp_user_pass);\n\nif\u00a0(!$login_result)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0PHP\u00a0will\u00a0already\u00a0have\u00a0raised\u00a0an\u00a0E_WARNING\u00a0level\u00a0message\u00a0in\u00a0this\u00a0case\n\u00a0\u00a0\u00a0\u00a0die(\"can't\u00a0login\");\n}\n\necho\u00a0ftp_pwd($conn_id);\u00a0\/\/\u00a0\/\n\n\/\/\u00a0close\u00a0the\u00a0ssl\u00a0connection\nftp_close($conn_id);\n?>"}]},"ftp_systype":{"name":"ftp_systype","parameters":[{"type":"resource","name":"$ftp_stream","description":"The link identifier of the FTP connection."}],"return":{"type":"string","values":["FALSE"]},"short":"Returns the system type identifier of the remote FTP server","examples":[{"title":"Example #1 ftp_systype() example","content":"<?php\n\n\/\/\u00a0ftp\u00a0connection\n$ftp\u00a0=\u00a0ftp_connect('ftp.example.com');\nftp_login($ftp,\u00a0'user',\u00a0'password');\n\n\/\/\u00a0get\u00a0the\u00a0system\u00a0type\nif\u00a0($type\u00a0=\u00a0ftp_systype($ftp))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Example.com\u00a0is\u00a0powered\u00a0by\u00a0$type\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Couldn't\u00a0get\u00a0the\u00a0systype\";\n}\n\n?>"}]},"ftruncate":{"name":"ftruncate","parameters":[{"type":"resource","name":"$handle","description":"The file pointer.\n\nNote:\n The handle must be open for writing."},{"type":"int","name":"$size","description":"The size to truncate to.\n\nNote:\n If size is larger than the file then the file is extended with null bytes.\n\n If size is smaller than the file then the file is truncated to that size."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Truncates a file to a given length","examples":[{"title":"Example #1 File truncation example","content":"<?php\n$filename\u00a0=\u00a0'lorem_ipsum.txt';\n\n$handle\u00a0=\u00a0fopen($filename,\u00a0'r+');\nftruncate($handle,\u00a0rand(1,\u00a0filesize($filename)));\nrewind($handle);\necho\u00a0fread($handle,\u00a0filesize($filename));\nfclose($handle);\n?>"}]},"func_get_arg":{"name":"func_get_arg","parameters":[{"type":"int","name":"$arg_num","description":"The argument offset. Function arguments are counted starting from zero."}],"return":{"type":"mixed","values":["FALSE"]},"short":"Return an item from the argument list","examples":[{"title":"Example #1 func_get_arg() example","content":"<?php\nfunction\u00a0foo()\n{\n\u00a0\u00a0\u00a0\u00a0\u00a0$numargs\u00a0=\u00a0func_num_args();\n\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Number\u00a0of\u00a0arguments:\u00a0$numargs\\n\";\n\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($numargs\u00a0>=\u00a02)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Second\u00a0argument\u00a0is:\u00a0\"\u00a0.\u00a0func_get_arg(1)\u00a0.\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n}\n\nfoo(1,\u00a02,\u00a03);\n?>"},{"title":"Example #2 func_get_arg() example before and\n    after PHP 5.3","content":"test.php\n<?php\nfunction\u00a0foo()\u00a0{\n\u00a0\u00a0\u00a0\u00a0include\u00a0'.\/fga.inc';\n}\n\nfoo('First\u00a0arg',\u00a0'Second\u00a0arg');\n?>\n\nfga.inc\n<?php\n\n$arg\u00a0=\u00a0func_get_arg(1);\nvar_export($arg);\n\n?>"},{"title":"Example #3 func_get_arg() example of byref and byval arguments","content":"<?php\nfunction\u00a0byVal($arg)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'As\u00a0passed\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_arg(0)),\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0$arg\u00a0=\u00a0'baz';\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'After\u00a0change\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_arg(0)),\u00a0PHP_EOL;\n}\n\nfunction\u00a0byRef(&$arg)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'As\u00a0passed\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_arg(0)),\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0$arg\u00a0=\u00a0'baz';\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'After\u00a0change\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_arg(0)),\u00a0PHP_EOL;\n}\n\n$arg\u00a0=\u00a0'bar';\nbyVal($arg);\nbyRef($arg);\n?>"}]},"func_get_args":{"name":"func_get_args","parameters":[],"return":{"type":"array","values":[]},"short":"Returns an array comprising a function's argument list","examples":[{"title":"Example #1 func_get_args() example","content":"<?php\nfunction\u00a0foo()\n{\n\u00a0\u00a0\u00a0\u00a0$numargs\u00a0=\u00a0func_num_args();\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Number\u00a0of\u00a0arguments:\u00a0$numargs\u00a0\\n\";\n\u00a0\u00a0\u00a0\u00a0if\u00a0($numargs\u00a0>=\u00a02)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Second\u00a0argument\u00a0is:\u00a0\"\u00a0.\u00a0func_get_arg(1)\u00a0.\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0$arg_list\u00a0=\u00a0func_get_args();\n\u00a0\u00a0\u00a0\u00a0for\u00a0($i\u00a0=\u00a00;\u00a0$i\u00a0<\u00a0$numargs;\u00a0$i++)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Argument\u00a0$i\u00a0is:\u00a0\"\u00a0.\u00a0$arg_list[$i]\u00a0.\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nfoo(1,\u00a02,\u00a03);\n?>"},{"title":"Example #2 func_get_args() example before and\n    after PHP 5.3","content":"test.php\n<?php\nfunction\u00a0foo()\u00a0{\n\u00a0\u00a0\u00a0\u00a0include\u00a0'.\/fga.inc';\n}\n\nfoo('First\u00a0arg',\u00a0'Second\u00a0arg');\n?>\n\nfga.inc\n<?php\n\n$args\u00a0=\u00a0func_get_args();\nvar_export($args);\n\n?>"},{"title":"Example #3 func_get_args() example of byref and byval arguments","content":"<?php\nfunction\u00a0byVal($arg)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'As\u00a0passed\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_args()),\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0$arg\u00a0=\u00a0'baz';\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'After\u00a0change\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_args()),\u00a0PHP_EOL;\n}\n\nfunction\u00a0byRef(&$arg)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'As\u00a0passed\u00a0\u00a0\u00a0\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_args()),\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0$arg\u00a0=\u00a0'baz';\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'After\u00a0change\u00a0\u00a0:\u00a0',\u00a0var_export(func_get_args()),\u00a0PHP_EOL;\n}\n\n$arg\u00a0=\u00a0'bar';\nbyVal($arg);\nbyRef($arg);\n?>"}]},"func_num_args":{"name":"func_num_args","parameters":[],"return":{"type":"int","values":[]},"short":"Returns the number of arguments passed to the function","examples":[{"title":"Example #1 func_num_args() example","content":"<?php\nfunction\u00a0foo()\n{\n\u00a0\u00a0\u00a0\u00a0$numargs\u00a0=\u00a0func_num_args();\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Number\u00a0of\u00a0arguments:\u00a0$numargs\\n\";\n}\n\nfoo(1,\u00a02,\u00a03);\u00a0\u00a0\u00a0\n?>"},{"title":"Example #2 func_num_args() example before and\n    after PHP 5.3","content":"test.php\n<?php\nfunction\u00a0foo()\u00a0{\n\u00a0\u00a0\u00a0\u00a0include\u00a0'.\/fna.php';\n}\n\nfoo('First\u00a0arg',\u00a0'Second\u00a0arg');\n?>\n\nfna.php\n<?php\n\n$num_args\u00a0=\u00a0func_num_args();\nvar_export($num_args);\n\n?>"}]},"function_exists":{"name":"function_exists","parameters":[{"type":"string","name":"$function_name","description":"The function name, as a string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Return TRUE if the given function has been defined","examples":[{"title":"Example #1 function_exists() example","content":"<?php\nif\u00a0(function_exists('imap_open'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"IMAP\u00a0functions\u00a0are\u00a0available.<br\u00a0\/>\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"IMAP\u00a0functions\u00a0are\u00a0not\u00a0available.<br\u00a0\/>\\n\";\n}\n?>"}]},"fwrite":{"name":"fwrite","parameters":[{"type":"resource","name":"$handle","description":"A file system pointer resource that is typically created using fopen()."},{"type":"string","name":"$string","description":"The string that is to be written."},{"type":"int","name":"$length","description":"If the length argument is given, writing will stop after length bytes have been written or the end of string is reached, whichever comes first.\n\nNote that if the length argument is given, then the magic_quotes_runtime configuration option will be ignored and no slashes will be stripped from string."}],"return":{"type":"int","values":["FALSE"]},"short":"Binary-safe file write","examples":[{"title":"Example #1 A simple fwrite() example","content":"<?php\n$filename\u00a0=\u00a0'test.txt';\n$somecontent\u00a0=\u00a0\"Add\u00a0this\u00a0to\u00a0the\u00a0file\\n\";\n\n\/\/\u00a0Let's\u00a0make\u00a0sure\u00a0the\u00a0file\u00a0exists\u00a0and\u00a0is\u00a0writable\u00a0first.\nif\u00a0(is_writable($filename))\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0In\u00a0our\u00a0example\u00a0we're\u00a0opening\u00a0$filename\u00a0in\u00a0append\u00a0mode.\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0The\u00a0file\u00a0pointer\u00a0is\u00a0at\u00a0the\u00a0bottom\u00a0of\u00a0the\u00a0file\u00a0hence\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0that's\u00a0where\u00a0$somecontent\u00a0will\u00a0go\u00a0when\u00a0we\u00a0fwrite()\u00a0it.\n\u00a0\u00a0\u00a0\u00a0if\u00a0(!$handle\u00a0=\u00a0fopen($filename,\u00a0'a'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Cannot\u00a0open\u00a0file\u00a0($filename)\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Write\u00a0$somecontent\u00a0to\u00a0our\u00a0opened\u00a0file.\n\u00a0\u00a0\u00a0\u00a0if\u00a0(fwrite($handle,\u00a0$somecontent)\u00a0===\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Cannot\u00a0write\u00a0to\u00a0file\u00a0($filename)\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Success,\u00a0wrote\u00a0($somecontent)\u00a0to\u00a0file\u00a0($filename)\";\n\n\u00a0\u00a0\u00a0\u00a0fclose($handle);\n\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0file\u00a0$filename\u00a0is\u00a0not\u00a0writable\";\n}\n?>"}]},"gc_collect_cycles":{"name":"gc_collect_cycles","parameters":[],"return":{"type":"int","values":[]},"short":"Forces collection of any existing garbage cycles","examples":[]},"gc_disable":{"name":"gc_disable","parameters":[],"return":{"type":"void","values":[]},"short":"Deactivates the circular reference collector","examples":[]},"gc_enable":{"name":"gc_enable","parameters":[],"return":{"type":"void","values":[]},"short":"Activates the circular reference collector","examples":[]},"gc_enabled":{"name":"gc_enabled","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Returns status of the circular reference collector","examples":[{"title":"Example #1 A gc_enabled() example","content":"<?php\nif(gc_enabled())\u00a0gc_collect_cycles();\n?>"}]},"gc_mem_caches":{"name":"gc_mem_caches","parameters":[],"return":{"type":"int","values":[]},"short":"\n   Reclaims memory used by the Zend Engine memory manager\n ","examples":[]},"get_browser":{"name":"get_browser","parameters":[{"type":"string","name":"$user_agent","description":"The User Agent to be analyzed. By default, the value of HTTP User-Agent header is used; however, you can alter this (i.e., look up another browser's info) by passing this parameter.\n\nYou can bypass this parameter with a NULL value."},{"type":"bool","name":"$return_array","default_value":"FALSE","description":"If set to TRUE, this function will return an array instead of an object."}],"return":{"type":"mixed","values":["TRUE","FALSE"]},"short":"Tells what the user's browser is capable of","examples":[{"title":"Example #1 Listing all information about the users browser","content":"<?php\necho\u00a0$_SERVER['HTTP_USER_AGENT']\u00a0.\u00a0\"\\n\\n\";\n\n$browser\u00a0=\u00a0get_browser(null,\u00a0true);\nprint_r($browser);\n?>"}]},"get_called_class":{"name":"get_called_class","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"The \"Late Static Binding\" class name","examples":[{"title":"Example #1 Using get_called_class()","content":"<?php\n\nclass\u00a0foo\u00a0{\n\u00a0\u00a0\u00a0\u00a0static\u00a0public\u00a0function\u00a0test()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump(get_called_class());\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nclass\u00a0bar\u00a0extends\u00a0foo\u00a0{\n}\n\nfoo::test();\nbar::test();\n\n?>"}]},"get_cfg_var":{"name":"get_cfg_var","parameters":[{"type":"string","name":"$option","description":"The configuration option name."}],"return":{"type":"mixed","values":["FALSE"]},"short":"Gets the value of a PHP configuration option","examples":[]},"get_class":{"name":"get_class","parameters":[{"type":"object","name":"$object","description":"The tested object. This parameter may be omitted when inside a class.\n\nNote:\n Explicitly passing NULL as the object is no longer allowed as of PHP 7.2.0.\n\n The parameter is still optional and calling get_class() without a parameter from inside a class will work, but passing NULL now emits an E_WARNING notice."}],"return":{"type":"string","values":["FALSE"]},"short":"Returns the name of the class of an object","examples":[{"title":"Example #1 Using get_class()","content":"<?php\n\nclass\u00a0foo\u00a0{\n\u00a0\u00a0\u00a0\u00a0function\u00a0name()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"My\u00a0name\u00a0is\u00a0\"\u00a0,\u00a0get_class($this)\u00a0,\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/\u00a0create\u00a0an\u00a0object\n$bar\u00a0=\u00a0new\u00a0foo();\n\n\/\/\u00a0external\u00a0call\necho\u00a0\"Its\u00a0name\u00a0is\u00a0\"\u00a0,\u00a0get_class($bar)\u00a0,\u00a0\"\\n\";\n\n\/\/\u00a0internal\u00a0call\n$bar->name();\n\n?>"},{"title":"Example #2 Using get_class() in superclass","content":"<?php\n\nabstract\u00a0class\u00a0bar\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump(get_class($this));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump(get_class());\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nclass\u00a0foo\u00a0extends\u00a0bar\u00a0{\n}\n\nnew\u00a0foo;\n\n?>"},{"title":"Example #3 Using get_class() with namespaced classes","content":"<?php\n\nnamespace\u00a0Foo\\Bar;\n\nclass\u00a0Baz\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct()\n\u00a0\u00a0\u00a0\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$baz\u00a0=\u00a0new\u00a0\\Foo\\Bar\\Baz;\n\nvar_dump(get_class($baz));\n?>"}]},"get_class_methods":{"name":"get_class_methods","parameters":[{"type":"mixed","name":"$class_name","description":"The class name or an object instance"}],"return":{"type":"array","values":["NULL"]},"short":"Gets the class methods' names","examples":[{"title":"Example #1 get_class_methods() example","content":"<?php\n\nclass\u00a0myclass\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0constructor\n\u00a0\u00a0\u00a0\u00a0function\u00a0myclass()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return(true);\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0method\u00a01\n\u00a0\u00a0\u00a0\u00a0function\u00a0myfunc1()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return(true);\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0method\u00a02\n\u00a0\u00a0\u00a0\u00a0function\u00a0myfunc2()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return(true);\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$class_methods\u00a0=\u00a0get_class_methods('myclass');\n\/\/\u00a0or\n$class_methods\u00a0=\u00a0get_class_methods(new\u00a0myclass());\n\nforeach\u00a0($class_methods\u00a0as\u00a0$method_name)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$method_name\\n\";\n}\n\n?>"}]},"get_class_vars":{"name":"get_class_vars","parameters":[{"type":"string","name":"$class_name","description":"The class name"}],"return":{"type":"array","values":["FALSE"]},"short":"Get the default properties of the class","examples":[{"title":"Example #1 get_class_vars() example","content":"<?php\n\nclass\u00a0myclass\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0var\u00a0$var1;\u00a0\/\/\u00a0this\u00a0has\u00a0no\u00a0default\u00a0value...\n\u00a0\u00a0\u00a0\u00a0var\u00a0$var2\u00a0=\u00a0\"xyz\";\n\u00a0\u00a0\u00a0\u00a0var\u00a0$var3\u00a0=\u00a0100;\n\u00a0\u00a0\u00a0\u00a0private\u00a0$var4;\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0constructor\n\u00a0\u00a0\u00a0\u00a0function\u00a0__construct()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0change\u00a0some\u00a0properties\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->var1\u00a0=\u00a0\"foo\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->var2\u00a0=\u00a0\"bar\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0true;\n\u00a0\u00a0\u00a0\u00a0}\n\n}\n\n$my_class\u00a0=\u00a0new\u00a0myclass();\n\n$class_vars\u00a0=\u00a0get_class_vars(get_class($my_class));\n\nforeach\u00a0($class_vars\u00a0as\u00a0$name\u00a0=>\u00a0$value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$name\u00a0:\u00a0$value\\n\";\n}\n\n?>"},{"title":"Example #2 get_class_vars() and scoping behaviour","content":"<?php\nfunction\u00a0format($array)\n{\n\u00a0\u00a0\u00a0\u00a0return\u00a0implode('|',\u00a0array_keys($array))\u00a0.\u00a0\"\\r\\n\";\n}\n\nclass\u00a0TestCase\n{\n\u00a0\u00a0\u00a0\u00a0public\u00a0$a\u00a0\u00a0\u00a0\u00a0=\u00a01;\n\u00a0\u00a0\u00a0\u00a0protected\u00a0$b\u00a0=\u00a02;\n\u00a0\u00a0\u00a0\u00a0private\u00a0$c\u00a0\u00a0\u00a0=\u00a03;\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0expose()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0format(get_class_vars(__CLASS__));\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nTestCase::expose();\necho\u00a0format(get_class_vars('TestCase'));\n?>"}]},"get_current_user":{"name":"get_current_user","parameters":[],"return":{"type":"string","values":[]},"short":"Gets the name of the owner of the current PHP script","examples":[{"title":"Example #1 get_current_user() example","content":"<?php\necho\u00a0'Current\u00a0script\u00a0owner:\u00a0'\u00a0.\u00a0get_current_user();\n?>"}]},"get_declared_classes":{"name":"get_declared_classes","parameters":[],"return":{"type":"array","values":[]},"short":"Returns an array with the name of the defined classes","examples":[{"title":"Example #1 get_declared_classes() example","content":"<?php\nprint_r(get_declared_classes());\n?>"}]},"get_declared_interfaces":{"name":"get_declared_interfaces","parameters":[],"return":{"type":"array","values":[]},"short":"Returns an array of all declared interfaces","examples":[{"title":"Example #1 get_declared_interfaces() example","content":"<?php\nprint_r(get_declared_interfaces());\n?>"}]},"get_declared_traits":{"name":"get_declared_traits","parameters":[],"return":{"type":"array","values":["NULL"]},"short":"Returns an array of all declared traits","examples":[]},"get_defined_constants":{"name":"get_defined_constants","parameters":[{"type":"bool","name":"$categorize","default_value":"FALSE","description":"Causing this function to return a multi-dimensional array with categories in the keys of the first dimension and constants and their values in the second dimension.\n\n<?php define(\"MY_CONSTANT\",\u00a01); print_r(get_defined_constants(true)); ?>\n\n\n\n The above example will output something similar to:\n\n Array ( [Core] => Array ( [E_ERROR] => 1 [E_WARNING] => 2 [E_PARSE] => 4 [E_NOTICE] => 8 [E_CORE_ERROR] => 16 [E_CORE_WARNING] => 32 [E_COMPILE_ERROR] => 64 [E_COMPILE_WARNING] => 128 [E_USER_ERROR] => 256 [E_USER_WARNING] => 512 [E_USER_NOTICE] => 1024 [E_ALL] => 2047 [TRUE] => 1 )\n [pcre] => Array ( [PREG_PATTERN_ORDER] => 1 [PREG_SET_ORDER] => 2 [PREG_OFFSET_CAPTURE] => 256 [PREG_SPLIT_NO_EMPTY] => 1 [PREG_SPLIT_DELIM_CAPTURE] => 2 [PREG_SPLIT_OFFSET_CAPTURE] => 4 [PREG_GREP_INVERT] => 1 )\n [user] => Array ( [MY_CONSTANT] => 1 )\n )"}],"return":{"type":"array","values":[]},"short":"Returns an associative array with the names of all the constants and their values","examples":[{"title":"Example #1 get_defined_constants() Example","content":"<?php\nprint_r(get_defined_constants());\n?>"}]},"get_defined_functions":{"name":"get_defined_functions","parameters":[{"type":"bool","name":"$exclude_disabled","default_value":"FALSE","description":"Whether disabled functions should be excluded from the return value."}],"return":{"type":"array","values":[]},"short":"Returns an array of all defined functions","examples":[{"title":"Example #1 get_defined_functions() example","content":"<?php\nfunction\u00a0myrow($id,\u00a0$data)\n{\n\u00a0\u00a0\u00a0\u00a0return\u00a0\"<tr><th>$id<\/th><td>$data<\/td><\/tr>\\n\";\n}\n\n$arr\u00a0=\u00a0get_defined_functions();\n\nprint_r($arr);\n?>"}]},"get_defined_vars":{"name":"get_defined_vars","parameters":[],"return":{"type":"array","values":[]},"short":"\n   Returns an array of all defined variables\n  ","examples":[{"title":"Example #1 get_defined_vars() Example","content":"<?php\n$b\u00a0=\u00a0array(1,\u00a01,\u00a02,\u00a03,\u00a05,\u00a08);\n\n$arr\u00a0=\u00a0get_defined_vars();\n\n\/\/\u00a0print\u00a0$b\nprint_r($arr[\"b\"]);\n\n\/*\u00a0print\u00a0path\u00a0to\u00a0the\u00a0PHP\u00a0interpreter\u00a0(if\u00a0used\u00a0as\u00a0a\u00a0CGI)\n\u00a0*\u00a0e.g.\u00a0\/usr\/local\/bin\/php\u00a0*\/\necho\u00a0$arr[\"_\"];\n\n\/\/\u00a0print\u00a0the\u00a0command-line\u00a0parameters\u00a0if\u00a0any\nprint_r($arr[\"argv\"]);\n\n\/\/\u00a0print\u00a0all\u00a0the\u00a0server\u00a0vars\nprint_r($arr[\"_SERVER\"]);\n\n\/\/\u00a0print\u00a0all\u00a0the\u00a0available\u00a0keys\u00a0for\u00a0the\u00a0arrays\u00a0of\u00a0variables\nprint_r(array_keys(get_defined_vars()));\n?>"}]},"get_extension_funcs":{"name":"get_extension_funcs","parameters":[{"type":"string","name":"$module_name","description":"The module name.\n\nNote:\n This parameter must be in lowercase."}],"return":{"type":"array","values":["FALSE"]},"short":"Returns an array with the names of the functions of a module","examples":[{"title":"Example #1 Prints the XML functions","content":"<?php\nprint_r(get_extension_funcs(\"xml\"));\n?>"}]},"get_headers":{"name":"get_headers","parameters":[{"type":"string","name":"$url","description":"The target URL."},{"type":"int","name":"$format","default_value":"0","description":"If the optional format parameter is set to non-zero, get_headers() parses the response and sets the array's keys."},{"type":"resource","name":"$context"}],"return":{"type":"array","values":["FALSE"]},"short":"Fetches all the headers sent by the server in response to a HTTP request","examples":[{"title":"Example #1 get_headers() example","content":"<?php\n$url\u00a0=\u00a0'http:\/\/www.example.com';\n\nprint_r(get_headers($url));\n\nprint_r(get_headers($url,\u00a01));\n?>"},{"title":"Example #2 get_headers() using HEAD example","content":"<?php\n\/\/\u00a0By\u00a0default\u00a0get_headers\u00a0uses\u00a0a\u00a0GET\u00a0request\u00a0to\u00a0fetch\u00a0the\u00a0headers.\u00a0If\u00a0you\n\/\/\u00a0want\u00a0to\u00a0send\u00a0a\u00a0HEAD\u00a0request\u00a0instead,\u00a0you\u00a0can\u00a0do\u00a0so\u00a0using\u00a0a\u00a0stream\u00a0context:\nstream_context_set_default(\n\u00a0\u00a0\u00a0\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'http'\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'method'\u00a0=>\u00a0'HEAD'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0)\n);\n$headers\u00a0=\u00a0get_headers('http:\/\/example.com');\n?>"}]},"get_html_translation_table":{"name":"get_html_translation_table","parameters":[{"type":"int","name":"$table","default_value":"HTML_SPECIALCHARS","description":"Which table to return. Either HTML_ENTITIES or HTML_SPECIALCHARS."},{"type":"int","name":"$flags","default_value":"ENT_COMPAT | ENT_HTML401","description":"A bitmask of one or more of the following flags, which specify which quotes the table will contain as well as which document type the table is for. The default is ENT_COMPAT | ENT_HTML401.\n\nAvailable flags constants\n Constant Name Description ENT_COMPAT Table will contain entities for double-quotes, but not for single-quotes. ENT_QUOTES Table will contain entities for both double and single quotes. ENT_NOQUOTES Table will neither contain entities for single quotes nor for double quotes. ENT_HTML401 Table for HTML 4.01. ENT_XML1 Table for XML 1. ENT_XHTML Table for XHTML. ENT_HTML5 Table for HTML 5."},{"type":"string","name":"$encoding","default_value":"\"UTF-8\"","description":"Encoding to use. If omitted, the default value for this argument is ISO-8859-1 in versions of PHP prior to 5.4.0, and UTF-8 from PHP 5.4.0 onwards.\n\nThe following character sets are supported:\n\nSupported charsets\n Charset Aliases Description ISO-8859-1 ISO8859-1\n Western European, Latin-1.\n ISO-8859-5 ISO8859-5\n Little used cyrillic charset (Latin\/Cyrillic).\n ISO-8859-15 ISO8859-15\n Western European, Latin-9. Adds the Euro sign, French and Finnish letters missing in Latin-1 (ISO-8859-1).\n UTF-8 \u00a0\n ASCII compatible multi-byte 8-bit Unicode.\n cp866 ibm866, 866\n DOS-specific Cyrillic charset.\n cp1251 Windows-1251, win-1251, 1251\n Windows-specific Cyrillic charset.\n cp1252 Windows-1252, 1252\n Windows specific charset for Western European.\n KOI8-R koi8-ru, koi8r\n Russian.\n BIG5 950\n Traditional Chinese, mainly used in Taiwan.\n GB2312 936\n Simplified Chinese, national standard character set.\n BIG5-HKSCS \u00a0\n Big5 with Hong Kong extensions, Traditional Chinese.\n Shift_JIS SJIS, SJIS-win, cp932, 932\n Japanese\n EUC-JP EUCJP, eucJP-win\n Japanese\n MacRoman \u00a0\n Charset that was used by Mac OS.\n '' \u00a0\n An empty string activates detection from script encoding (Zend multibyte), default_charset and current locale (see nl_langinfo() and setlocale()), in this order. Not recommended.\n\nNote:\n Any other character sets are not recognized. The default encoding will be used instead and a warning will be emitted."}],"return":{"type":"array","values":[]},"short":"Returns the translation table used by htmlspecialchars() and htmlentities()","examples":[{"title":"Example #1 Translation Table Example","content":"<?php\nvar_dump(get_html_translation_table(HTML_ENTITIES,\u00a0ENT_QUOTES\u00a0|\u00a0ENT_HTML5));\n?>"}]},"get_include_path":{"name":"get_include_path","parameters":[],"return":{"type":"string","values":[]},"short":"Gets the current include_path configuration option","examples":[{"title":"Example #1 get_include_path() example","content":"<?php\necho\u00a0get_include_path();\n\n\/\/\u00a0Or\u00a0using\u00a0ini_get()\necho\u00a0ini_get('include_path');\n?>"}]},"get_included_files":{"name":"get_included_files","parameters":[],"return":{"type":"array","values":[]},"short":"Returns an array with the names of included or required files","examples":[{"title":"Example #1 get_included_files() example","content":"<?php\n\/\/\u00a0This\u00a0file\u00a0is\u00a0abc.php\n\ninclude\u00a0'test1.php';\ninclude_once\u00a0'test2.php';\nrequire\u00a0'test3.php';\nrequire_once\u00a0'test4.php';\n\n$included_files\u00a0=\u00a0get_included_files();\n\nforeach\u00a0($included_files\u00a0as\u00a0$filename)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$filename\\n\";\n}\n\n?>"}]},"get_loaded_extensions":{"name":"get_loaded_extensions","parameters":[{"type":"bool","name":"$zend_extensions","default_value":"FALSE","description":"Only return Zend extensions, if not then regular extensions, like mysqli are listed. Defaults to FALSE (return regular extensions)."}],"return":{"type":"array","values":[]},"short":"Returns an array with the names of all modules compiled and loaded","examples":[{"title":"Example #1 get_loaded_extensions() Example","content":"<?php\nprint_r(get_loaded_extensions());\n?>"}]},"get_magic_quotes_gpc":{"name":"get_magic_quotes_gpc","parameters":[],"return":{"type":"bool","values":["FALSE"]},"short":"Gets the current configuration setting of magic_quotes_gpc","examples":[{"title":"Example #1 get_magic_quotes_gpc() example","content":"<?php\n\/\/\u00a0If\u00a0magic\u00a0quotes\u00a0are\u00a0enabled\necho\u00a0$_POST['lastname'];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0O\\'reilly\necho\u00a0addslashes($_POST['lastname']);\u00a0\/\/\u00a0O\\\\\\'reilly\n\n\/\/\u00a0Usage\u00a0across\u00a0all\u00a0PHP\u00a0versions\nif\u00a0(get_magic_quotes_gpc())\u00a0{\n\u00a0\u00a0\u00a0\u00a0$lastname\u00a0=\u00a0stripslashes($_POST['lastname']);\n}\nelse\u00a0{\n\u00a0\u00a0\u00a0\u00a0$lastname\u00a0=\u00a0$_POST['lastname'];\n}\n\n\/\/\u00a0If\u00a0using\u00a0MySQL\n$lastname\u00a0=\u00a0mysql_real_escape_string($lastname);\n\necho\u00a0$lastname;\u00a0\/\/\u00a0O\\'reilly\n$sql\u00a0=\u00a0\"INSERT\u00a0INTO\u00a0lastnames\u00a0(lastname)\u00a0VALUES\u00a0('$lastname')\";\n?>"}]},"get_magic_quotes_runtime":{"name":"get_magic_quotes_runtime","parameters":[],"return":{"type":"bool","values":["FALSE"]},"short":"Gets the current active configuration setting of magic_quotes_runtime","examples":[{"title":"Example #1 get_magic_quotes_runtime() example","content":"<?php\n\/\/\u00a0Check\u00a0if\u00a0magic_quotes_runtime\u00a0is\u00a0active\nif(get_magic_quotes_runtime())\n{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Deactivate\n\u00a0\u00a0\u00a0\u00a0set_magic_quotes_runtime(false);\n}\n?>"}]},"get_meta_tags":{"name":"get_meta_tags","parameters":[{"type":"string","name":"$filename","description":"The path to the HTML file, as a string. This can be a local file or an URL.\n\n\n\nExample #1 What get_meta_tags() parses\n <meta name=\"author\" content=\"name\"> <meta name=\"keywords\" content=\"php documentation\"> <meta name=\"DESCRIPTION\" content=\"a php manual\"> <meta name=\"geo.position\" content=\"49.33;-86.59\"> <\/head> <!-- parsing stops here -->"},{"type":"bool","name":"$use_include_path","default_value":"FALSE","description":"Setting use_include_path to TRUE will result in PHP trying to open the file along the standard include path as per the include_path directive. This is used for local files, not URLs."}],"return":{"type":"array","values":[]},"short":"Extracts all meta tag content attributes from a file and returns an array","examples":[{"title":"Example #2 What get_meta_tags() returns","content":"<?php\n\/\/\u00a0Assuming\u00a0the\u00a0above\u00a0tags\u00a0are\u00a0at\u00a0www.example.com\n$tags\u00a0=\u00a0get_meta_tags('http:\/\/www.example.com\/');\n\n\/\/\u00a0Notice\u00a0how\u00a0the\u00a0keys\u00a0are\u00a0all\u00a0lowercase\u00a0now,\u00a0and\n\/\/\u00a0how\u00a0.\u00a0was\u00a0replaced\u00a0by\u00a0_\u00a0in\u00a0the\u00a0key.\necho\u00a0$tags['author'];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0name\necho\u00a0$tags['keywords'];\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0php\u00a0documentation\necho\u00a0$tags['description'];\u00a0\u00a0\/\/\u00a0a\u00a0php\u00a0manual\necho\u00a0$tags['geo_position'];\u00a0\/\/\u00a049.33;-86.59\n?>"}]},"get_object_vars":{"name":"get_object_vars","parameters":[{"type":"object","name":"$object","description":"An object instance."}],"return":{"type":"array","values":["NULL"]},"short":"Gets the properties of the given object","examples":[{"title":"Example #1 Use of get_object_vars()","content":"<?php\n\nclass\u00a0foo\u00a0{\n\u00a0\u00a0\u00a0\u00a0private\u00a0$a;\n\u00a0\u00a0\u00a0\u00a0public\u00a0$b\u00a0=\u00a01;\n\u00a0\u00a0\u00a0\u00a0public\u00a0$c;\n\u00a0\u00a0\u00a0\u00a0private\u00a0$d;\n\u00a0\u00a0\u00a0\u00a0static\u00a0$e;\n\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0test()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump(get_object_vars($this));\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$test\u00a0=\u00a0new\u00a0foo;\nvar_dump(get_object_vars($test));\n\n$test->test();\n\n?>"}]},"get_parent_class":{"name":"get_parent_class","parameters":[{"type":"mixed","name":"$object","description":"The tested object or class name. This parameter is optional if called from the object's method."}],"return":{"type":"string","values":["FALSE"]},"short":"Retrieves the parent class name for object or class","examples":[{"title":"Example #1 Using get_parent_class()","content":"<?php\n\nclass\u00a0dad\u00a0{\n\u00a0\u00a0\u00a0\u00a0function\u00a0dad()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0implements\u00a0some\u00a0logic\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nclass\u00a0child\u00a0extends\u00a0dad\u00a0{\n\u00a0\u00a0\u00a0\u00a0function\u00a0child()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"I'm\u00a0\"\u00a0,\u00a0get_parent_class($this)\u00a0,\u00a0\"'s\u00a0son\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nclass\u00a0child2\u00a0extends\u00a0dad\u00a0{\n\u00a0\u00a0\u00a0\u00a0function\u00a0child2()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"I'm\u00a0\"\u00a0,\u00a0get_parent_class('child2')\u00a0,\u00a0\"'s\u00a0son\u00a0too\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$foo\u00a0=\u00a0new\u00a0child();\n$bar\u00a0=\u00a0new\u00a0child2();\n\n?>"}]},"get_required_files":{"name":"get_required_files","parameters":[],"return":{"type":"","values":[]},"short":"Alias of get_included_files()","examples":[]},"get_resource_type":{"name":"get_resource_type","parameters":[{"type":"resource","name":"$handle","description":"The evaluated resource handle."}],"return":{"type":"string","values":["NULL"]},"short":"\n   Returns the resource type\n  ","examples":[{"title":"Example #1 get_resource_type() example","content":"<?php\n\/\/\u00a0prints:\u00a0mysql\u00a0link\n$c\u00a0=\u00a0mysql_connect();\necho\u00a0get_resource_type($c)\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0prints:\u00a0stream\n$fp\u00a0=\u00a0fopen(\"foo\",\u00a0\"w\");\necho\u00a0get_resource_type($fp)\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0prints:\u00a0domxml\u00a0document\n$doc\u00a0=\u00a0new_xmldoc(\"1.0\");\necho\u00a0get_resource_type($doc->doc)\u00a0.\u00a0\"\\n\";\n?>"}]},"get_resources":{"name":"get_resources","parameters":[{"type":"string","name":"$type","description":"If defined, this will cause get_resources() to only return resources of the given type. A list of resource types is available.\n\nIf the string Unknown is provided as the type, then only resources that are of an unknown type will be returned.\n\nIf omitted, all resources will be returned."}],"return":{"type":"array","values":[]},"short":"Returns active resources","examples":[{"title":"Example #1 Unfiltered get_resources()","content":"<?php\n$fp\u00a0=\u00a0tmpfile();\nvar_dump(get_resources());\n?>"},{"title":"Example #2 Filtered get_resources()","content":"<?php\n$fp\u00a0=\u00a0tmpfile();\nvar_dump(get_resources('stream'));\nvar_dump(get_resources('curl'));\n?>"}]},"getcwd":{"name":"getcwd","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Gets the current working directory","examples":[{"title":"Example #1 getcwd() example","content":"<?php\n\n\/\/\u00a0current\u00a0directory\necho\u00a0getcwd()\u00a0.\u00a0\"\\n\";\n\nchdir('cvs');\n\n\/\/\u00a0current\u00a0directory\necho\u00a0getcwd()\u00a0.\u00a0\"\\n\";\n\n?>"}]},"getdate":{"name":"getdate","parameters":[{"type":"int","name":"$timestamp","default_value":"time()","description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."}],"return":{"type":"array","values":[]},"short":"Get date\/time information","examples":[{"title":"Example #1 getdate() example","content":"<?php\n$today\u00a0=\u00a0getdate();\nprint_r($today);\n?>"}]},"getenv":{"name":"getenv","parameters":[{"type":"string","name":"$varname","description":"The variable name."},{"type":"bool","name":"$local_only","default_value":"FALSE","description":"Set to true to only return local environment variables (set by the operating system or putenv)."}],"return":{"type":"string","values":["FALSE"]},"short":"Gets the value of an environment variable","examples":[{"title":"Example #1 getenv() Example","content":"<?php\n\/\/\u00a0Example\u00a0use\u00a0of\u00a0getenv()\n$ip\u00a0=\u00a0getenv('REMOTE_ADDR');\n\n\/\/\u00a0Or\u00a0simply\u00a0use\u00a0a\u00a0Superglobal\u00a0($_SERVER\u00a0or\u00a0$_ENV)\n$ip\u00a0=\u00a0$_SERVER['REMOTE_ADDR'];\n\n\/\/\u00a0Safely\u00a0get\u00a0the\u00a0value\u00a0of\u00a0an\u00a0environment\u00a0variable,\u00a0ignoring\u00a0whether\u00a0\n\/\/\u00a0or\u00a0not\u00a0it\u00a0was\u00a0set\u00a0by\u00a0a\u00a0SAPI\u00a0or\u00a0has\u00a0been\u00a0changed\u00a0with\u00a0putenv\n$ip\u00a0=\u00a0getenv('REMOTE_ADDR',\u00a0true)\u00a0?:\u00a0getenv('REMOTE_ADDR')\n?>"}]},"gethostbyaddr":{"name":"gethostbyaddr","parameters":[{"type":"string","name":"$ip_address","description":"The host IP address."}],"return":{"type":"string","values":["FALSE"]},"short":"\n   Get the Internet host name corresponding to a given IP address\n  ","examples":[{"title":"Example #1 A simple gethostbyaddr() example","content":"<?php\n$hostname\u00a0=\u00a0gethostbyaddr($_SERVER['REMOTE_ADDR']);\n\necho\u00a0$hostname;\n?>"}]},"gethostbyname":{"name":"gethostbyname","parameters":[{"type":"string","name":"$hostname","description":"The host name."}],"return":{"type":"string","values":[]},"short":"\n   Get the IPv4 address corresponding to a given Internet host name\n  ","examples":[{"title":"Example #1 A simple gethostbyname() example","content":"<?php\n$ip\u00a0=\u00a0gethostbyname('www.example.com');\n\necho\u00a0$ip;\n?>"}]},"gethostbynamel":{"name":"gethostbynamel","parameters":[{"type":"string","name":"$hostname","description":"The host name."}],"return":{"type":"array","values":["FALSE"]},"short":"\n   Get a list of IPv4 addresses corresponding to a given Internet host\n   name\n  ","examples":[{"title":"Example #1 gethostbynamel() example","content":"<?php\n$hosts\u00a0=\u00a0gethostbynamel('www.example.com');\nprint_r($hosts);\n?>"}]},"gethostname":{"name":"gethostname","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Gets the host name","examples":[{"title":"Example #1 A simple gethostname() example","content":"<?php\necho\u00a0gethostname();\u00a0\/\/\u00a0may\u00a0output\u00a0e.g,:\u00a0sandie\n\n\/\/\u00a0Or,\u00a0an\u00a0option\u00a0that\u00a0also\u00a0works\u00a0before\u00a0PHP\u00a05.3\necho\u00a0php_uname('n');\u00a0\/\/\u00a0may\u00a0output\u00a0e.g,:\u00a0sandie\n?>"}]},"getimagesize":{"name":"getimagesize","parameters":[{"type":"string","name":"$filename","description":"This parameter specifies the file you wish to retrieve information about. It can reference a local file or (configuration permitting) a remote file using one of the supported streams."}],"return":{"type":"array","values":["FALSE"]},"short":"Get the size of an image","examples":[{"title":"Example #2 getimagesize() example","content":"<?php\nlist($width,\u00a0$height,\u00a0$type,\u00a0$attr)\u00a0=\u00a0getimagesize(\"img\/flag.jpg\");\necho\u00a0\"<img\u00a0src=\\\"img\/flag.jpg\\\"\u00a0$attr\u00a0alt=\\\"getimagesize()\u00a0example\\\"\u00a0\/>\";\n?>"},{"title":"Example #3 getimagesize (URL)","content":"<?php\n$size\u00a0=\u00a0getimagesize(\"http:\/\/www.example.com\/gifs\/logo.gif\");\n\n\/\/\u00a0if\u00a0the\u00a0file\u00a0name\u00a0has\u00a0space\u00a0in\u00a0it,\u00a0encode\u00a0it\u00a0properly\n$size\u00a0=\u00a0getimagesize(\"http:\/\/www.example.com\/gifs\/lo%20go.gif\");\n\n?>"},{"title":"Example #4 getimagesize() returning IPTC","content":"<?php\n$size\u00a0=\u00a0getimagesize(\"testimg.jpg\",\u00a0$info);\nif\u00a0(isset($info[\"APP13\"]))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$iptc\u00a0=\u00a0iptcparse($info[\"APP13\"]);\n\u00a0\u00a0\u00a0\u00a0var_dump($iptc);\n}\n?>"}]},"getimagesizefromstring":{"name":"getimagesizefromstring","parameters":[{"type":"string","name":"$imagedata","description":"The image data, as a string."}],"return":{"type":"array","values":[]},"short":"Get the size of an image from a string","examples":[{"title":"Example #1 getimagesizefromstring() example","content":"<?php\n$img\u00a0=\u00a0'\/path\/to\/test.png';\n\n\/\/\u00a0Open\u00a0as\u00a0a\u00a0file\n$size_info1\u00a0=\u00a0getimagesize($img);\n\n\/\/\u00a0Or\u00a0open\u00a0as\u00a0a\u00a0string\n$data\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0file_get_contents($img);\n$size_info2\u00a0=\u00a0getimagesizefromstring($data);\n?>"}]},"getlastmod":{"name":"getlastmod","parameters":[],"return":{"type":"int","values":["FALSE"]},"short":"Gets time of last page modification","examples":[{"title":"Example #1 getlastmod() example","content":"<?php\n\/\/\u00a0outputs\u00a0e.g.\u00a0'Last\u00a0modified:\u00a0March\u00a004\u00a01998\u00a020:43:59.'\necho\u00a0\"Last\u00a0modified:\u00a0\"\u00a0.\u00a0date\u00a0(\"F\u00a0d\u00a0Y\u00a0H:i:s.\",\u00a0getlastmod());\n?>"}]},"getmxrr":{"name":"getmxrr","parameters":[{"type":"string","name":"$hostname","description":"The Internet host name."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Get MX records corresponding to a given Internet host name","examples":[]},"getmygid":{"name":"getmygid","parameters":[],"return":{"type":"int","values":["FALSE"]},"short":"Get PHP script owner's GID","examples":[]},"getmyinode":{"name":"getmyinode","parameters":[],"return":{"type":"int","values":["FALSE"]},"short":"Gets the inode of the current script","examples":[]},"getmypid":{"name":"getmypid","parameters":[],"return":{"type":"int","values":["FALSE"]},"short":"Gets PHP's process ID","examples":[]},"getmyuid":{"name":"getmyuid","parameters":[],"return":{"type":"int","values":["FALSE"]},"short":"Gets PHP script owner's UID","examples":[]},"getopt":{"name":"getopt","parameters":[{"type":"string","name":"$options","description":"Each character in this string will be used as option characters and matched against options passed to the script starting with a single hyphen (-).\n\nFor example, an option string \"x\" recognizes an option -x.\n\nOnly a-z, A-Z and 0-9 are allowed."},{"type":"array","name":"$longopts","description":"An array of options. Each element in this array will be used as option strings and matched against options passed to the script starting with two hyphens (--).\n\nFor example, an longopts element \"opt\" recognizes an option --opt."}],"return":{"type":"array","values":["FALSE"]},"short":"Gets options from the command line argument list","examples":[{"title":"Example #1 getopt() example: The basics","content":"<?php\n\/\/\u00a0Script\u00a0example.php\n$options\u00a0=\u00a0getopt(\"f:hp:\");\nvar_dump($options);\n?>"},{"title":"Example #2 getopt() example: Introducing long options","content":"<?php\n\/\/\u00a0Script\u00a0example.php\n$shortopts\u00a0\u00a0=\u00a0\"\";\n$shortopts\u00a0.=\u00a0\"f:\";\u00a0\u00a0\/\/\u00a0Required\u00a0value\n$shortopts\u00a0.=\u00a0\"v::\";\u00a0\/\/\u00a0Optional\u00a0value\n$shortopts\u00a0.=\u00a0\"abc\";\u00a0\/\/\u00a0These\u00a0options\u00a0do\u00a0not\u00a0accept\u00a0values\n\n$longopts\u00a0\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\"required:\",\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Required\u00a0value\n\u00a0\u00a0\u00a0\u00a0\"optional::\",\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Optional\u00a0value\n\u00a0\u00a0\u00a0\u00a0\"option\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0No\u00a0value\n\u00a0\u00a0\u00a0\u00a0\"opt\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0No\u00a0value\n);\n$options\u00a0=\u00a0getopt($shortopts,\u00a0$longopts);\nvar_dump($options);\n?>"},{"title":"Example #3 getopt() example: Passing multiple options as one","content":"<?php\n\/\/\u00a0Script\u00a0example.php\n$options\u00a0=\u00a0getopt(\"abc\");\nvar_dump($options);\n?>"},{"title":"Example #4 getopt() example: Using optind","content":"<?php\n\/\/\u00a0Script\u00a0example.php\n$optind\u00a0=\u00a0null;\n$opts\u00a0=\u00a0getopt('a:b:',\u00a0[],\u00a0$optind);\n$pos_args\u00a0=\u00a0array_slice($argv,\u00a0$optind);\nvar_dump($pos_args);"}]},"getprotobyname":{"name":"getprotobyname","parameters":[{"type":"string","name":"$name","description":"The protocol name."}],"return":{"type":"int","values":["FALSE"]},"short":"Get protocol number associated with protocol name","examples":[{"title":"Example #1 getprotobyname() example","content":"<?php\n$protocol\u00a0=\u00a0'tcp';\n$get_prot\u00a0=\u00a0getprotobyname($protocol);\nif\u00a0($get_prot\u00a0===\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Invalid\u00a0Protocol';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Protocol\u00a0#'\u00a0.\u00a0$get_prot;\n}\n?>"}]},"getprotobynumber":{"name":"getprotobynumber","parameters":[{"type":"int","name":"$number","description":"The protocol number."}],"return":{"type":"string","values":["FALSE"]},"short":"Get protocol name associated with protocol number","examples":[]},"getrandmax":{"name":"getrandmax","parameters":[],"return":{"type":"int","values":[]},"short":"Show largest possible random value","examples":[]},"getrusage":{"name":"getrusage","parameters":[{"type":"int","name":"$who","default_value":"0","description":"If who is 1, getrusage will be called with RUSAGE_CHILDREN."}],"return":{"type":"array","values":[]},"short":"Gets the current resource usages","examples":[{"title":"Example #1 getrusage() example","content":"<?php\n$dat\u00a0=\u00a0getrusage();\necho\u00a0$dat[\"ru_oublock\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0number\u00a0of\u00a0block\u00a0output\u00a0operations\necho\u00a0$dat[\"ru_inblock\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0number\u00a0of\u00a0block\u00a0input\u00a0operations\necho\u00a0$dat[\"ru_msgsnd\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0number\u00a0of\u00a0IPC\u00a0messages\u00a0sent\necho\u00a0$dat[\"ru_msgrcv\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0number\u00a0of\u00a0IPC\u00a0messages\u00a0received\necho\u00a0$dat[\"ru_maxrss\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0maximum\u00a0resident\u00a0set\u00a0size\necho\u00a0$dat[\"ru_ixrss\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0integral\u00a0shared\u00a0memory\u00a0size\necho\u00a0$dat[\"ru_idrss\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0integral\u00a0unshared\u00a0data\u00a0size\necho\u00a0$dat[\"ru_minflt\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0number\u00a0of\u00a0page\u00a0reclaims\u00a0(soft\u00a0page\u00a0faults)\necho\u00a0$dat[\"ru_majflt\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0number\u00a0of\u00a0page\u00a0faults\u00a0(hard\u00a0page\u00a0faults)\necho\u00a0$dat[\"ru_nsignals\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0number\u00a0of\u00a0signals\u00a0received\necho\u00a0$dat[\"ru_nvcsw\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0number\u00a0of\u00a0voluntary\u00a0context\u00a0switches\necho\u00a0$dat[\"ru_nivcsw\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0number\u00a0of\u00a0involuntary\u00a0context\u00a0switches\necho\u00a0$dat[\"ru_nswap\"];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0number\u00a0of\u00a0swaps\necho\u00a0$dat[\"ru_utime.tv_usec\"];\u00a0\/\/\u00a0user\u00a0time\u00a0used\u00a0(microseconds)\necho\u00a0$dat[\"ru_utime.tv_sec\"];\u00a0\u00a0\/\/\u00a0user\u00a0time\u00a0used\u00a0(seconds)\necho\u00a0$dat[\"ru_stime.tv_usec\"];\u00a0\/\/\u00a0system\u00a0time\u00a0used\u00a0(microseconds)\n?>"}]},"getservbyname":{"name":"getservbyname","parameters":[{"type":"string","name":"$service","description":"The Internet service name, as a string."},{"type":"string","name":"$protocol","description":"protocol is either \"tcp\" or \"udp\" (in lowercase)."}],"return":{"type":"int","values":["FALSE"]},"short":"Get port number associated with an Internet service and protocol","examples":[{"title":"Example #1 getservbyname() example","content":"<?php\n$services\u00a0=\u00a0array('http',\u00a0'ftp',\u00a0'ssh',\u00a0'telnet',\u00a0'imap',\n'smtp',\u00a0'nicname',\u00a0'gopher',\u00a0'finger',\u00a0'pop3',\u00a0'www');\n\nforeach\u00a0($services\u00a0as\u00a0$service)\u00a0{\n\u00a0\u00a0\u00a0\u00a0$port\u00a0=\u00a0getservbyname($service,\u00a0'tcp');\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$service\u00a0.\u00a0\":\u00a0\"\u00a0.\u00a0$port\u00a0.\u00a0\"<br\u00a0\/>\\n\";\n}\n?>"}]},"getservbyport":{"name":"getservbyport","parameters":[{"type":"int","name":"$port","description":"The port number."},{"type":"string","name":"$protocol","description":"protocol is either \"tcp\" or \"udp\" (in lowercase)."}],"return":{"type":"string","values":[]},"short":"Get Internet service which corresponds to port and protocol","examples":[]},"gettext":{"name":"gettext","parameters":[{"type":"string","name":"$message","description":"The message being translated."}],"return":{"type":"string","values":[]},"short":"Lookup a message in the current domain","examples":[{"title":"Example #1 gettext()-check","content":"<?php\n\/\/\u00a0Set\u00a0language\u00a0to\u00a0German\nputenv('LC_ALL=de_DE');\nsetlocale(LC_ALL,\u00a0'de_DE');\n\n\/\/\u00a0Specify\u00a0location\u00a0of\u00a0translation\u00a0tables\nbindtextdomain(\"myPHPApp\",\u00a0\".\/locale\");\n\n\/\/\u00a0Choose\u00a0domain\ntextdomain(\"myPHPApp\");\n\n\/\/\u00a0Translation\u00a0is\u00a0looking\u00a0for\u00a0in\u00a0.\/locale\/de_DE\/LC_MESSAGES\/myPHPApp.mo\u00a0now\n\n\/\/\u00a0Print\u00a0a\u00a0test\u00a0message\necho\u00a0gettext(\"Welcome\u00a0to\u00a0My\u00a0PHP\u00a0Application\");\n\n\/\/\u00a0Or\u00a0use\u00a0the\u00a0alias\u00a0_()\u00a0for\u00a0gettext()\necho\u00a0_(\"Have\u00a0a\u00a0nice\u00a0day\");\n?>"}]},"gettimeofday":{"name":"gettimeofday","parameters":[{"type":"bool","name":"$return_float","default_value":"FALSE","description":"When set to TRUE, a float instead of an array is returned."}],"return":{"type":"mixed","values":[]},"short":"Get current time","examples":[{"title":"Example #1 gettimeofday() example","content":"<?php\nprint_r(gettimeofday());\n\necho\u00a0gettimeofday(true);\n?>"}]},"gettype":{"name":"gettype","parameters":[{"type":"mixed","name":"$var","description":"The variable being type checked."}],"return":{"type":"string","values":[]},"short":"Get the type of a variable","examples":[{"title":"Example #1 gettype() example","content":"<?php\n\n$data\u00a0=\u00a0array(1,\u00a01.,\u00a0NULL,\u00a0new\u00a0stdClass,\u00a0'foo');\n\nforeach\u00a0($data\u00a0as\u00a0$value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0gettype($value),\u00a0\"\\n\";\n}\n\n?>"}]},"glob":{"name":"glob","parameters":[{"type":"string","name":"$pattern","description":"The pattern. No tilde expansion or parameter substitution is done."},{"type":"int","name":"$flags","default_value":"0","description":"Valid flags:\n\nGLOB_MARK - Adds a slash to each directory returned\n\n\n\n GLOB_NOSORT - Return files as they appear in the directory (no sorting). When this flag is not used, the pathnames are sorted alphabetically\n\n\n\n GLOB_NOCHECK - Return the search pattern if no files matching it were found\n\n\n\n GLOB_NOESCAPE - Backslashes do not quote metacharacters\n\n\n\n GLOB_BRACE - Expands {a,b,c} to match 'a', 'b', or 'c'\n\n\n\n GLOB_ONLYDIR - Return only directory entries which match the pattern\n\n\n\n GLOB_ERR - Stop on read errors (like unreadable directories), by default errors are ignored."}],"return":{"type":"array","values":["FALSE"]},"short":"Find pathnames matching a pattern","examples":[{"title":"Example #1 \n     Convenient way how glob() can replace\n     opendir() and friends.\n    ","content":"<?php\nforeach\u00a0(glob(\"*.txt\")\u00a0as\u00a0$filename)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$filename\u00a0size\u00a0\"\u00a0.\u00a0filesize($filename)\u00a0.\u00a0\"\\n\";\n}\n?>"}]},"gmdate":{"name":"gmdate","parameters":[{"type":"string","name":"$format","description":"The format of the outputted date string. See the formatting options for the date() function."},{"type":"int","name":"$timestamp","default_value":"time()","description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."}],"return":{"type":"string","values":["FALSE","E_WARNING"]},"short":"Format a GMT\/UTC date\/time","examples":[{"title":"Example #1 gmdate() example","content":"When run in Finland (GMT +0200), the first line below prints \"Jan 01\n     1998 00:00:00\", while the second prints \"Dec 31 1997 22:00:00\"."}]},"gmmktime":{"name":"gmmktime","parameters":[{"type":"int","name":"$hour","default_value":"gmdate(\"H\")","description":"The number of the hour relative to the start of the day determined by month, day and year. Negative values reference the hour before midnight of the day in question. Values greater than 23 reference the appropriate hour in the following day(s)."},{"type":"int","name":"$minute","default_value":"gmdate(\"i\")","description":"The number of the minute relative to the start of the hour. Negative values reference the minute in the previous hour. Values greater than 59 reference the appropriate minute in the following hour(s)."},{"type":"int","name":"$second","default_value":"gmdate(\"s\")","description":"The number of seconds relative to the start of the minute. Negative values reference the second in the previous minute. Values greater than 59 reference the appropriate second in the following minute(s)."},{"type":"int","name":"$month","default_value":"gmdate(\"n\")","description":"The number of the month relative to the end of the previous year. Values 1 to 12 reference the normal calendar months of the year in question. Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc. Values greater than 12 reference the appropriate month in the following year(s)."},{"type":"int","name":"$day","default_value":"gmdate(\"j\")","description":"The number of the day relative to the end of the previous month. Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month. Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc. Values greater than the number of days in the relevant month reference the appropriate day in the following month(s)."},{"type":"int","name":"$year","default_value":"gmdate(\"Y\")","description":"The year"},{"type":"int","name":"$is_dst","default_value":"-1","description":"Parameters always represent a GMT date so is_dst doesn't influence the result.\n\nNote:\n This parameter has been removed in PHP 7.0.0."}],"return":{"type":"int","values":[]},"short":"Get Unix timestamp for a GMT date","examples":[{"title":"Example #1 gmmktime() basic example","content":"<?php\n\/\/\u00a0Prints:\u00a0July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0Saturday\necho\u00a0\"July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0\"\u00a0.\u00a0date(\"l\",\u00a0gmmktime(0,\u00a00,\u00a00,\u00a07,\u00a01,\u00a02000));\n?>"}]},"gmstrftime":{"name":"gmstrftime","parameters":[{"type":"string","name":"$format","description":"See description in strftime()."},{"type":"int","name":"$timestamp","default_value":"time()","description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."}],"return":{"type":"string","values":[]},"short":"Format a GMT\/UTC time\/date according to locale settings","examples":[{"title":"Example #1 gmstrftime() example","content":"<?php\nsetlocale(LC_TIME,\u00a0'en_US');\necho\u00a0strftime(\"%b\u00a0%d\u00a0%Y\u00a0%H:%M:%S\",\u00a0mktime(20,\u00a00,\u00a00,\u00a012,\u00a031,\u00a098))\u00a0.\u00a0\"\\n\";\necho\u00a0gmstrftime(\"%b\u00a0%d\u00a0%Y\u00a0%H:%M:%S\",\u00a0mktime(20,\u00a00,\u00a00,\u00a012,\u00a031,\u00a098))\u00a0.\u00a0\"\\n\";\n?>"}]},"gregoriantojd":{"name":"gregoriantojd","parameters":[{"type":"int","name":"$month","description":"The month as a number from 1 (for January) to 12 (for December)"},{"type":"int","name":"$day","description":"The day as a number from 1 to 31. If the month has less days then given, overflow occurs; see the example below."},{"type":"int","name":"$year","description":"The year as a number between -4714 and 9999. Negative numbers mean years B.C., positive numbers mean years A.D. Note that there is no year 0; December 31, 1 B.C. is immediately followed by January 1, 1 A.D."}],"return":{"type":"int","values":[]},"short":"Converts a Gregorian date to Julian Day Count","examples":[{"title":"Example #1 Calendar functions","content":"<?php\n$jd\u00a0=\u00a0gregoriantojd(10,\u00a011,\u00a01970);\necho\u00a0\"$jd\\n\";\n$gregorian\u00a0=\u00a0jdtogregorian($jd);\necho\u00a0\"$gregorian\\n\";\n?>"},{"title":"Example #2 Overflow behavior","content":"<?php\necho\u00a0gregoriantojd(2,\u00a031,\u00a02018),\u00a0PHP_EOL,\n\u00a0\u00a0\u00a0\u00a0\u00a0gregoriantojd(3,\u00a0\u00a03,\u00a02018),\u00a0PHP_EOL;\n?>"}]},"gzclose":{"name":"gzclose","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Close an open gz-file pointer","examples":[{"title":"Example #1 gzclose() example","content":"<?php\n$gz\u00a0=\u00a0gzopen('somefile.gz','w9');\ngzputs\u00a0($gz,\u00a0'I\u00a0was\u00a0added\u00a0to\u00a0somefile.gz');\ngzclose($gz);\n?>"}]},"gzcompress":{"name":"gzcompress","parameters":[{"type":"string","name":"$data","description":"The data to compress."},{"type":"int","name":"$level","default_value":"-1","description":"The level of compression. Can be given as 0 for no compression up to 9 for maximum compression.\n\nIf -1 is used, the default compression of the zlib library is used which is 6."},{"type":"int","name":"$encoding","default_value":"ZLIB_ENCODING_DEFLATE","description":"One of ZLIB_ENCODING_* constants."}],"return":{"type":"string","values":["FALSE"]},"short":"Compress a string","examples":[{"title":"Example #1 gzcompress() example","content":"<?php\n$compressed\u00a0=\u00a0gzcompress('Compress\u00a0me',\u00a09);\necho\u00a0$compressed;\n?>"}]},"gzdecode":{"name":"gzdecode","parameters":[{"type":"string","name":"$data","description":"The data to decode, encoded by gzencode()."},{"type":"int","name":"$length","description":"The maximum length of data to decode."}],"return":{"type":"string","values":["FALSE"]},"short":"Decodes a gzip compressed string","examples":[]},"gzdeflate":{"name":"gzdeflate","parameters":[{"type":"string","name":"$data","description":"The data to deflate."},{"type":"int","name":"$level","default_value":"-1","description":"The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. If not given, the default compression level will be the default compression level of the zlib library."},{"type":"int","name":"$encoding","default_value":"ZLIB_ENCODING_RAW","description":"One of ZLIB_ENCODING_* constants."}],"return":{"type":"string","values":["FALSE"]},"short":"Deflate a string","examples":[{"title":"Example #1 gzdeflate() example","content":"<?php\n$compressed\u00a0=\u00a0gzdeflate('Compress\u00a0me',\u00a09);\necho\u00a0$compressed;\n?>"}]},"gzencode":{"name":"gzencode","parameters":[{"type":"string","name":"$data","description":"The data to encode."},{"type":"int","name":"$level","default_value":"-1","description":"The level of compression. Can be given as 0 for no compression up to 9 for maximum compression. If not given, the default compression level will be the default compression level of the zlib library."},{"type":"int","name":"$encoding_mode","default_value":"FORCE_GZIP","description":"The encoding mode. Can be FORCE_GZIP (the default) or FORCE_DEFLATE.\n\nPrior to PHP 5.4.0, using FORCE_DEFLATE results in a standard zlib deflated string (inclusive zlib headers) after a gzip file header but without the trailing crc32 checksum.\n\nIn PHP 5.4.0 and later, FORCE_DEFLATE generates RFC 1950 compliant output, consisting of a zlib header, the deflated data, and an Adler checksum."}],"return":{"type":"string","values":["FALSE"]},"short":"Create a gzip compressed string","examples":[{"title":"Example #1 Creating a gzip file","content":"<?php\n$data\u00a0=\u00a0implode(\"\",\u00a0file(\"bigfile.txt\"));\n$gzdata\u00a0=\u00a0gzencode($data,\u00a09);\n$fp\u00a0=\u00a0fopen(\"bigfile.txt.gz\",\u00a0\"w\");\nfwrite($fp,\u00a0$gzdata);\nfclose($fp);\n?>"}]},"gzeof":{"name":"gzeof","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."}],"return":{"type":"int","values":["TRUE","FALSE"]},"short":"Test for EOF on a gz-file pointer","examples":[{"title":"Example #1 gzeof() example","content":"<?php\n$gz\u00a0=\u00a0gzopen('somefile.gz',\u00a0'r');\nwhile\u00a0(!gzeof($gz))\u00a0{\n\u00a0\u00a0echo\u00a0gzgetc($gz);\n}\ngzclose($gz);\n?>"}]},"gzfile":{"name":"gzfile","parameters":[{"type":"string","name":"$filename","description":"The file name."},{"type":"int","name":"$use_include_path","default_value":"0","description":"You can set this optional parameter to 1, if you want to search for the file in the include_path too."}],"return":{"type":"array","values":[]},"short":"Read entire gz-file into an array","examples":[{"title":"Example #1 gzfile() example","content":"<?php\n$lines\u00a0=\u00a0gzfile('somefile.gz');\nforeach\u00a0($lines\u00a0as\u00a0$line)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$line;\n}\n?>"}]},"gzgetc":{"name":"gzgetc","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."}],"return":{"type":"string","values":["FALSE"]},"short":"Get character from gz-file pointer","examples":[{"title":"Example #1 gzgetc() example","content":"<?php\n$gz\u00a0=\u00a0gzopen('somefile.gz',\u00a0'r');\nwhile\u00a0(!gzeof($gz))\u00a0{\n\u00a0\u00a0echo\u00a0gzgetc($gz);\n}\ngzclose($gz);\n?>"}]},"gzgets":{"name":"gzgets","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."},{"type":"int","name":"$length","description":"The length of data to get."}],"return":{"type":"string","values":["FALSE"]},"short":"Get line from file pointer","examples":[{"title":"Example #1 gzgets() example","content":"<?php\n$handle\u00a0=\u00a0gzopen('somefile.gz',\u00a0'r');\nwhile\u00a0(!gzeof($handle))\u00a0{\n\u00a0\u00a0\u00a0$buffer\u00a0=\u00a0gzgets($handle,\u00a04096);\n\u00a0\u00a0\u00a0echo\u00a0$buffer;\n}\ngzclose($handle);\n?>"}]},"gzgetss":{"name":"gzgetss","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."},{"type":"int","name":"$length","description":"The length of data to get."},{"type":"string","name":"$allowable_tags","description":"You can use this optional parameter to specify tags which should not be stripped."}],"return":{"type":"string","values":["FALSE"]},"short":"\n   Get line from gz-file pointer and strip HTML tags\n  ","examples":[{"title":"Example #1 gzgetss() example","content":"<?php\n$handle\u00a0=\u00a0gzopen('somefile.gz',\u00a0'r');\nwhile\u00a0(!gzeof($handle))\u00a0{\n\u00a0\u00a0\u00a0$buffer\u00a0=\u00a0gzgetss($handle,\u00a04096);\n\u00a0\u00a0\u00a0echo\u00a0$buffer;\n}\ngzclose($handle);\n?>"}]},"gzinflate":{"name":"gzinflate","parameters":[{"type":"string","name":"$data","description":"The data compressed by gzdeflate()."},{"type":"int","name":"$length","default_value":"0","description":"The maximum length of data to decode."}],"return":{"type":"string","values":["FALSE"]},"short":"Inflate a deflated string","examples":[{"title":"Example #1 gzinflate() example","content":"<?php\n$compressed\u00a0\u00a0\u00a0=\u00a0gzdeflate('Compress\u00a0me',\u00a09);\n$uncompressed\u00a0=\u00a0gzinflate($compressed);\necho\u00a0$uncompressed;\n?>"}]},"gzopen":{"name":"gzopen","parameters":[{"type":"string","name":"$filename","description":"The file name."},{"type":"string","name":"$mode","description":"As in fopen() (rb or wb) but can also include a compression level (wb9) or a strategy: f for filtered data as in wb6f, h for Huffman only compression as in wb1h. (See the description of deflateInit2 in zlib.h for more information about the strategy parameter.)"},{"type":"int","name":"$use_include_path","default_value":"0","description":"You can set this optional parameter to 1, if you want to search for the file in the include_path too."}],"return":{"type":"resource","values":["FALSE"]},"short":"Open gz-file","examples":[{"title":"Example #1 gzopen() Example","content":"<?php\n$fp\u00a0=\u00a0gzopen(\"\/tmp\/file.gz\",\u00a0\"r\");\n?>"}]},"gzpassthru":{"name":"gzpassthru","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."}],"return":{"type":"int","values":["FALSE"]},"short":"\n   Output all remaining data on a gz-file pointer\n  ","examples":[{"title":"Example #1 gzpassthru() example","content":"<?php\n$fp\u00a0=\u00a0gzopen('file.gz',\u00a0'r');\ngzpassthru($fp);\ngzclose($fp);\n?>"}]},"gzputs":{"name":"gzputs","parameters":[],"return":{"type":"","values":[]},"short":"Alias of gzwrite()","examples":[]},"gzread":{"name":"gzread","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."},{"type":"int","name":"$length","description":"The number of bytes to read."}],"return":{"type":"string","values":[]},"short":"Binary-safe gz-file read","examples":[{"title":"Example #1 gzread() example","content":"<?php\n\/\/\u00a0get\u00a0contents\u00a0of\u00a0a\u00a0gz-file\u00a0into\u00a0a\u00a0string\n$filename\u00a0=\u00a0\"\/usr\/local\/something.txt.gz\";\n$zd\u00a0=\u00a0gzopen($filename,\u00a0\"r\");\n$contents\u00a0=\u00a0gzread($zd,\u00a010000);\ngzclose($zd);\n?>"}]},"gzrewind":{"name":"gzrewind","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Rewind the position of a gz-file pointer","examples":[]},"gzseek":{"name":"gzseek","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."},{"type":"int","name":"$offset","description":"The seeked offset."},{"type":"int","name":"$whence","default_value":"SEEK_SET","description":"whence values are:\n\nSEEK_SET - Set position equal to offset bytes. SEEK_CUR - Set position to current location plus offset.\n\nIf whence is not specified, it is assumed to be SEEK_SET."}],"return":{"type":"int","values":[]},"short":"Seek on a gz-file pointer","examples":[{"title":"Example #1 gzseek() example","content":"<?php\n$gz\u00a0=\u00a0gzopen('somefile.gz',\u00a0'r');\ngzseek($gz,2);\necho\u00a0gzgetc($gz);\ngzclose($gz);\n?>"}]},"gztell":{"name":"gztell","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."}],"return":{"type":"int","values":["FALSE"]},"short":"Tell gz-file pointer read\/write position","examples":[]},"gzuncompress":{"name":"gzuncompress","parameters":[{"type":"string","name":"$data","description":"The data compressed by gzcompress()."},{"type":"int","name":"$length","default_value":"0","description":"The maximum length of data to decode."}],"return":{"type":"string","values":["FALSE"]},"short":"Uncompress a compressed string","examples":[{"title":"Example #1 gzuncompress() example","content":"<?php\n$compressed\u00a0\u00a0\u00a0=\u00a0gzcompress('Compress\u00a0me',\u00a09);\n$uncompressed\u00a0=\u00a0gzuncompress($compressed);\necho\u00a0$uncompressed;\n?>"}]},"gzwrite":{"name":"gzwrite","parameters":[{"type":"resource","name":"$zp","description":"The gz-file pointer. It must be valid, and must point to a file successfully opened by gzopen()."},{"type":"string","name":"$string","description":"The string to write."},{"type":"int","name":"$length","description":"The number of uncompressed bytes to write. If supplied, writing will stop after length (uncompressed) bytes have been written or the end of string is reached, whichever comes first.\n\nNote:\n Note that if the length argument is given, then the magic_quotes_runtime configuration option will be ignored and no slashes will be stripped from string."}],"return":{"type":"int","values":[]},"short":"Binary-safe gz-file write","examples":[{"title":"Example #1 gzwrite() example","content":"<?php\n$string\u00a0=\u00a0'Some\u00a0information\u00a0to\u00a0compress';\n$gz\u00a0=\u00a0gzopen('somefile.gz','w9');\ngzwrite($gz,\u00a0$string);\ngzclose($gz);\n?>"}]},"hash":{"name":"hash","parameters":[{"type":"string","name":"$algo","description":"Name of selected hashing algorithm (e.g. \"md5\", \"sha256\", \"haval160,4\", etc..)"},{"type":"string","name":"$data","description":"Message to be hashed."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."}],"return":{"type":"string","values":[]},"short":"Generate a hash value (message digest)","examples":[{"title":"Example #1 A hash() example","content":"<?php\necho\u00a0hash('ripemd160',\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');\n?>"},{"title":"Example #2 Calculate pre PHP-5.4 tiger hashes with PHP-5.4 and higher","content":"<?php\nfunction\u00a0old_tiger($data\u00a0=\u00a0\"\",\u00a0$width=192,\u00a0$rounds\u00a0=\u00a03)\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0substr(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0implode(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array_map(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function\u00a0($h)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0str_pad(bin2hex(strrev($h)),\u00a016,\u00a0\"0\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0str_split(hash(\"tiger192,$rounds\",\u00a0$data,\u00a0true),\u00a08)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00,\u00a048-(192-$width)\/4\n\u00a0\u00a0\u00a0\u00a0);\n}\necho\u00a0hash('tiger192,3',\u00a0'a-string'),\u00a0PHP_EOL;\necho\u00a0old_tiger('a-string'),\u00a0PHP_EOL;\n?>"}]},"hash_algos":{"name":"hash_algos","parameters":[],"return":{"type":"array","values":[]},"short":"Return a list of registered hashing algorithms","examples":[{"title":"Example #1 hash_algos() example","content":"As of PHP 5.6.0, hash_algos() will return the\n     following list of algorithm names."}]},"hash_copy":{"name":"hash_copy","parameters":[{"type":"HashContext","name":"$context","description":"Hashing context returned by hash_init()."}],"return":{"type":"HashContext","values":[]},"short":"Copy hashing context","examples":[{"title":"Example #1 hash_copy() example","content":"<?php\n$context\u00a0=\u00a0hash_init(\"md5\");\nhash_update($context,\u00a0\"data\");\n\n\/*\u00a0copy\u00a0context\u00a0to\u00a0be\u00a0able\u00a0to\u00a0continue\u00a0using\u00a0it\u00a0*\/\n$copy_context\u00a0=\u00a0hash_copy($context);\n\necho\u00a0hash_final($context),\u00a0\"\\n\";\n\nhash_update($copy_context,\u00a0\"data\");\necho\u00a0hash_final($copy_context),\u00a0\"\\n\";\n?>"}]},"hash_equals":{"name":"hash_equals","parameters":[{"type":"string","name":"$known_string","description":"The string of known length to compare against"},{"type":"string","name":"$user_string","description":"The user-supplied string"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Timing attack safe string comparison","examples":[{"title":"Example #1 hash_equals() example","content":"<?php\n$expected\u00a0\u00a0=\u00a0crypt('12345',\u00a0'$2a$07$usesomesillystringforsalt$');\n$correct\u00a0\u00a0\u00a0=\u00a0crypt('12345',\u00a0'$2a$07$usesomesillystringforsalt$');\n$incorrect\u00a0=\u00a0crypt('apple',\u00a0\u00a0'$2a$07$usesomesillystringforsalt$');\n\nvar_dump(hash_equals($expected,\u00a0$correct));\nvar_dump(hash_equals($expected,\u00a0$incorrect));\n?>"}]},"hash_file":{"name":"hash_file","parameters":[{"type":"string","name":"$algo","description":"Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..)"},{"type":"string","name":"$filename","description":"URL describing location of file to be hashed; Supports fopen wrappers."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."}],"return":{"type":"string","values":[]},"short":"Generate a hash value using the contents of a given file","examples":[{"title":"Example #1 Using hash_file()","content":"<?php\n\/*\u00a0Create\u00a0a\u00a0file\u00a0to\u00a0calculate\u00a0hash\u00a0of\u00a0*\/\nfile_put_contents('example.txt',\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');\n\necho\u00a0hash_file('md5',\u00a0'example.txt');\n?>"}]},"hash_final":{"name":"hash_final","parameters":[{"type":"HashContext","name":"$context","description":"Hashing context returned by hash_init()."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."}],"return":{"type":"string","values":[]},"short":"Finalize an incremental hash and return resulting digest","examples":[{"title":"Example #1 hash_final() example","content":"<?php\n$ctx\u00a0=\u00a0hash_init('sha1');\nhash_update($ctx,\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');\necho\u00a0hash_final($ctx);\n?>"}]},"hash_hkdf":{"name":"hash_hkdf","parameters":[{"type":"string","name":"$algo","description":"Name of selected hashing algorithm (i.e. \"sha256\", \"sha512\", \"haval160,4\", etc..) See hash_algos() for a list of supported algorithms.\n\nNote:\n Non-cryptographic hash functions are not allowed."},{"type":"string","name":"$ikm","description":"Input keying material (raw binary). Cannot be empty."},{"type":"int","name":"$length","default_value":"0","description":"Desired output length in bytes. Cannot be greater than 255 times the chosen hash function size.\n\nIf length is 0, the output length will default to the chosen hash function size."},{"type":"string","name":"$info","default_value":"''","description":"Application\/context-specific info string."},{"type":"string","name":"$salt","default_value":"''","description":"Salt to use during derivation.\n\nWhile optional, adding random salt significantly improves the strength of HKDF."}],"return":{"type":"string","values":["FALSE"]},"short":"Generate a HKDF key derivation of a supplied key input","examples":[{"title":"Example #1 hash_hkdf() example","content":"<?php\n\/\/\u00a0Generate\u00a0a\u00a0random\u00a0key,\u00a0and\u00a0salt\u00a0to\u00a0strengthen\u00a0it\u00a0during\u00a0derivation.\n$inputKey\u00a0=\u00a0random_bytes(32);\n$salt\u00a0=\u00a0random_bytes(16);\n\n\/\/\u00a0Derive\u00a0a\u00a0pair\u00a0of\u00a0separate\u00a0keys,\u00a0using\u00a0the\u00a0same\u00a0input\u00a0created\u00a0above.\n$encryptionKey\u00a0=\u00a0hash_hkdf('sha256',\u00a0$inputKey,\u00a032,\u00a0'aes-256-encryption',\u00a0$salt);\n$authenticationKey\u00a0=\u00a0hash_hkdf('sha256',\u00a0$inputKey,\u00a032,\u00a0'sha-256-authentication',\u00a0$salt);\n\nvar_dump($encryptionKey\u00a0!==\u00a0$authenticationKey);\u00a0\/\/\u00a0bool(true)\n?>"}]},"hash_hmac":{"name":"hash_hmac","parameters":[{"type":"string","name":"$algo","description":"Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..) See hash_hmac_algos() for a list of supported algorithms."},{"type":"string","name":"$data","description":"Message to be hashed."},{"type":"string","name":"$key","description":"Shared secret key used for generating the HMAC variant of the message digest."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."}],"return":{"type":"string","values":["FALSE"]},"short":"Generate a keyed hash value using the HMAC method","examples":[{"title":"Example #1 hash_hmac() example","content":"<?php\necho\u00a0hash_hmac('ripemd160',\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.',\u00a0'secret');\n?>"}]},"hash_hmac_algos":{"name":"hash_hmac_algos","parameters":[],"return":{"type":"array","values":[]},"short":"Return a list of registered hashing algorithms suitable for hash_hmac","examples":[{"title":"Example #1 hash_hmac_algos() example","content":"<?php\nprint_r(hash_hmac_algos());"}]},"hash_hmac_file":{"name":"hash_hmac_file","parameters":[{"type":"string","name":"$algo","description":"Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..) See hash_hmac_algos() for a list of supported algorithms."},{"type":"string","name":"$filename","description":"URL describing location of file to be hashed; Supports fopen wrappers."},{"type":"string","name":"$key","description":"Shared secret key used for generating the HMAC variant of the message digest."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."}],"return":{"type":"string","values":["FALSE"]},"short":"Generate a keyed hash value using the HMAC method and the contents of a given file","examples":[{"title":"Example #1 hash_hmac_file() example","content":"<?php\n\/*\u00a0Create\u00a0a\u00a0file\u00a0to\u00a0calculate\u00a0hash\u00a0of\u00a0*\/\nfile_put_contents('example.txt',\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');\n\necho\u00a0hash_hmac_file('md5',\u00a0'example.txt',\u00a0'secret');\n?>"}]},"hash_init":{"name":"hash_init","parameters":[{"type":"string","name":"$algo","description":"Name of selected hashing algorithm (i.e. \"md5\", \"sha256\", \"haval160,4\", etc..). For a list of supported algorithms see hash_algos()."},{"type":"int","name":"$options","default_value":"0","description":"Optional settings for hash generation, currently supports only one option: HASH_HMAC.  When specified, the key must be specified."},{"type":"string","name":"$key","default_value":"NULL","description":"When HASH_HMAC is specified for options, a shared secret key to be used with the HMAC hashing method must be supplied in this parameter."}],"return":{"type":"HashContext","values":[]},"short":"Initialize an incremental hashing context","examples":[{"title":"Example #1 Incremental hashing example","content":"<?php\n$ctx\u00a0=\u00a0hash_init('md5');\nhash_update($ctx,\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0');\nhash_update($ctx,\u00a0'jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');\necho\u00a0hash_final($ctx);\n?>"}]},"hash_pbkdf2":{"name":"hash_pbkdf2","parameters":[{"type":"string","name":"$algo","description":"Name of selected hashing algorithm (i.e. md5, sha256, haval160,4, etc..) See hash_algos() for a list of supported algorithms."},{"type":"string","name":"$password","description":"The password to use for the derivation."},{"type":"string","name":"$salt","description":"The salt to use for the derivation. This value should be generated randomly."},{"type":"int","name":"$iterations","description":"The number of internal iterations to perform for the derivation."},{"type":"int","name":"$length","default_value":"0","description":"The length of the output string. If raw_output is TRUE this corresponds to the byte-length of the derived key, if raw_output is FALSE this corresponds to twice the byte-length of the derived key (as every byte of the key is returned as two hexits).\n\nIf 0 is passed, the entire output of the supplied algorithm is used."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."}],"return":{"type":"string","values":["TRUE"]},"short":"Generate a PBKDF2 key derivation of a supplied password","examples":[{"title":"Example #1 hash_pbkdf2() example, basic usage","content":"<?php\n$password\u00a0=\u00a0\"password\";\n$iterations\u00a0=\u00a01000;\n\n\/\/\u00a0Generate\u00a0a\u00a0random\u00a0IV\u00a0using\u00a0openssl_random_pseudo_bytes()\n\/\/\u00a0random_bytes()\u00a0or\u00a0another\u00a0suitable\u00a0source\u00a0of\u00a0randomness\n$salt\u00a0=\u00a0openssl_random_pseudo_bytes(16);\n\n$hash\u00a0=\u00a0hash_pbkdf2(\"sha256\",\u00a0$password,\u00a0$salt,\u00a0$iterations,\u00a020);\necho\u00a0$hash;\n?>"}]},"hash_update":{"name":"hash_update","parameters":[{"type":"HashContext","name":"$context","description":"Hashing context returned by hash_init()."},{"type":"string","name":"$data","description":"Message to be included in the hash digest."}],"return":{"type":"bool","values":["TRUE"]},"short":"Pump data into an active hashing context","examples":[]},"hash_update_file":{"name":"hash_update_file","parameters":[{"type":"HashContext","name":"$hcontext","description":"Hashing context returned by hash_init()."},{"type":"string","name":"$filename","description":"URL describing location of file to be hashed; Supports fopen wrappers."},{"type":"resource","name":"$scontext","default_value":"NULL","description":"Stream context as returned by stream_context_create()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Pump data into an active hashing context from a file","examples":[]},"hash_update_stream":{"name":"hash_update_stream","parameters":[{"type":"HashContext","name":"$context","description":"Hashing context returned by hash_init()."},{"type":"resource","name":"$handle","description":"Open file handle as returned by any stream creation function."},{"type":"int","name":"$length","default_value":"-1","description":"Maximum number of characters to copy from handle into the hashing context."}],"return":{"type":"int","values":[]},"short":"Pump data into an active hashing context from an open stream","examples":[{"title":"Example #1 hash_update_stream() example","content":"<?php\n$fp\u00a0=\u00a0tmpfile();\nfwrite($fp,\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.');\nrewind($fp);\n\n$ctx\u00a0=\u00a0hash_init('md5');\nhash_update_stream($ctx,\u00a0$fp);\necho\u00a0hash_final($ctx);\n?>"}]},"header":{"name":"header","parameters":[{"type":"string","name":"$header","description":"The header string.\n\nThere are two special-case header calls.  The first is a header that starts with the string \"HTTP\/\" (case is not significant), which will be used to figure out the HTTP status code to send. For example, if you have configured Apache to use a PHP script to handle requests for missing files (using the ErrorDocument directive), you may want to make sure that your script generates the proper status code.\n\n\n\n<?php header(\"HTTP\/1.0\u00a0404\u00a0Not\u00a0Found\"); ?>\n\nThe second special case is the \"Location:\" header.  Not only does it send this header back to the browser, but it also returns a REDIRECT (302) status code to the browser unless the 201 or a 3xx status code has already been set.\n\n\n\n<?php header(\"Location:\u00a0http:\/\/www.example.com\/\");\u00a0\/*\u00a0Redirect\u00a0browser\u00a0*\/\n \/*\u00a0Make\u00a0sure\u00a0that\u00a0code\u00a0below\u00a0does\u00a0not\u00a0get\u00a0executed\u00a0when\u00a0we\u00a0redirect.\u00a0*\/ exit; ?>"},{"type":"bool","name":"$replace","default_value":"TRUE","description":"The optional replace parameter indicates whether the header should replace a previous similar header, or add a second header of the same type.  By default it will replace, but if you pass in FALSE as the second argument you can force multiple headers of the same type.  For example:\n\n\n\n<?php header('WWW-Authenticate:\u00a0Negotiate'); header('WWW-Authenticate:\u00a0NTLM',\u00a0false); ?>"},{"type":"int","name":"$http_response_code","description":"Forces the HTTP response code to the specified value. Note that this parameter only has an effect if the header is not empty."}],"return":{"type":"void","values":[]},"short":"Send a raw HTTP header","examples":[{"title":"Example #1 Download dialog","content":"If you want the user to be prompted to save the data you are\n     sending, such as a generated PDF file, you can use the \u00bb\u00a0Content-Disposition header to\n     supply a recommended filename and force the browser to display the\n     save dialog."},{"title":"Example #2 Caching directives","content":"PHP scripts often generate dynamic content that must not be cached\n     by the client browser or any proxy caches between the server and the\n     client browser. Many proxies and clients can be forced to disable\n     caching with:"}]},"header_register_callback":{"name":"header_register_callback","parameters":[{"type":"callable","name":"$callback","description":"Function called just before the headers are sent. It gets no parameters and the return value is ignored."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Call a header function","examples":[{"title":"Example #1 header_register_callback() example","content":"<?php\n\nheader('Content-Type:\u00a0text\/plain');\nheader('X-Test:\u00a0foo');\n\nfunction\u00a0foo()\u00a0{\n\u00a0foreach\u00a0(headers_list()\u00a0as\u00a0$header)\u00a0{\n\u00a0\u00a0\u00a0if\u00a0(strpos($header,\u00a0'X-Powered-By:')\u00a0!==\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0header_remove('X-Powered-By');\n\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0header_remove('X-Test');\n\u00a0}\n}\n\n$result\u00a0=\u00a0header_register_callback('foo');\necho\u00a0\"a\";\n?>"}]},"header_remove":{"name":"header_remove","parameters":[{"type":"string","name":"$name","description":"The header name to be removed.\n\nNote:\n This parameter is case-insensitive."}],"return":{"type":"void","values":[]},"short":"Remove previously set headers","examples":[{"title":"Example #1 Unsetting specific header.","content":"<?php\nheader(\"X-Foo:\u00a0Bar\");\nheader(\"X-Bar:\u00a0Baz\");\nheader_remove(\"X-Foo\");\u00a0\n?>"},{"title":"Example #2 Unsetting all previously set headers.","content":"<?php\nheader(\"X-Foo:\u00a0Bar\");\nheader(\"X-Bar:\u00a0Baz\");\nheader_remove();\u00a0\n?>"}]},"headers_list":{"name":"headers_list","parameters":[],"return":{"type":"array","values":[]},"short":"Returns a list of response headers sent (or ready to send)","examples":[{"title":"Example #1 Examples using headers_list()","content":"<?php\n\n\/*\u00a0setcookie()\u00a0will\u00a0add\u00a0a\u00a0response\u00a0header\u00a0on\u00a0its\u00a0own\u00a0*\/\nsetcookie('foo',\u00a0'bar');\n\n\/*\u00a0Define\u00a0a\u00a0custom\u00a0response\u00a0header\n\u00a0\u00a0\u00a0This\u00a0will\u00a0be\u00a0ignored\u00a0by\u00a0most\u00a0clients\u00a0*\/\nheader(\"X-Sample-Test:\u00a0foo\");\n\n\/*\u00a0Specify\u00a0plain\u00a0text\u00a0content\u00a0in\u00a0our\u00a0response\u00a0*\/\nheader('Content-type:\u00a0text\/plain');\n\n\/*\u00a0What\u00a0headers\u00a0are\u00a0going\u00a0to\u00a0be\u00a0sent?\u00a0*\/\nvar_dump(headers_list());\n\n?>"}]},"headers_sent":{"name":"headers_sent","parameters":[],"return":{"type":"bool","values":["FALSE","TRUE"]},"short":"Checks if or where headers have been sent","examples":[{"title":"Example #1 Examples using headers_sent()","content":"<?php\n\n\/\/\u00a0If\u00a0no\u00a0headers\u00a0are\u00a0sent,\u00a0send\u00a0one\nif\u00a0(!headers_sent())\u00a0{\n\u00a0\u00a0\u00a0\u00a0header('Location:\u00a0http:\/\/www.example.com\/');\n\u00a0\u00a0\u00a0\u00a0exit;\n}\n\n\/\/\u00a0An\u00a0example\u00a0using\u00a0the\u00a0optional\u00a0file\u00a0and\u00a0line\u00a0parameters\n\/\/\u00a0Note\u00a0that\u00a0$filename\u00a0and\u00a0$linenum\u00a0are\u00a0passed\u00a0in\u00a0for\u00a0later\u00a0use.\n\/\/\u00a0Do\u00a0not\u00a0assign\u00a0them\u00a0values\u00a0beforehand.\nif\u00a0(!headers_sent($filename,\u00a0$linenum))\u00a0{\n\u00a0\u00a0\u00a0\u00a0header('Location:\u00a0http:\/\/www.example.com\/');\n\u00a0\u00a0\u00a0\u00a0exit;\n\n\/\/\u00a0You\u00a0would\u00a0most\u00a0likely\u00a0trigger\u00a0an\u00a0error\u00a0here.\n}\u00a0else\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Headers\u00a0already\u00a0sent\u00a0in\u00a0$filename\u00a0on\u00a0line\u00a0$linenum\\n\"\u00a0.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cannot\u00a0redirect,\u00a0for\u00a0now\u00a0please\u00a0click\u00a0this\u00a0<a\u00a0\"\u00a0.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"href=\\\"http:\/\/www.example.com\\\">link<\/a>\u00a0instead\\n\";\n\u00a0\u00a0\u00a0\u00a0exit;\n}\n\n?>"}]},"hebrev":{"name":"hebrev","parameters":[{"type":"string","name":"$hebrew_text","description":"A Hebrew input string."},{"type":"int","name":"$max_chars_per_line","default_value":"0","description":"This optional parameter indicates maximum number of characters per line that will be returned."}],"return":{"type":"string","values":[]},"short":"Convert logical Hebrew text to visual text","examples":[]},"hebrevc":{"name":"hebrevc","parameters":[{"type":"string","name":"$hebrew_text","description":"A Hebrew input string."},{"type":"int","name":"$max_chars_per_line","default_value":"0","description":"This optional parameter indicates maximum number of characters per line that will be returned."}],"return":{"type":"string","values":[]},"short":"Convert logical Hebrew text to visual text with newline conversion","examples":[]},"hex2bin":{"name":"hex2bin","parameters":[{"type":"string","name":"$data","description":"Hexadecimal representation of data."}],"return":{"type":"string","values":["FALSE"]},"short":"Decodes a hexadecimally encoded binary string","examples":[{"title":"Example #1 hex2bin() example","content":"<?php\n$hex\u00a0=\u00a0hex2bin(\"6578616d706c65206865782064617461\");\nvar_dump($hex);\n?>"}]},"hexdec":{"name":"hexdec","parameters":[{"type":"string","name":"$hex_string","description":"The hexadecimal string to convert"}],"return":{"type":"number","values":[]},"short":"Hexadecimal to decimal","examples":[{"title":"Example #1 hexdec() example","content":"<?php\nvar_dump(hexdec(\"See\"));\nvar_dump(hexdec(\"ee\"));\n\/\/\u00a0both\u00a0print\u00a0\"int(238)\"\n\nvar_dump(hexdec(\"that\"));\u00a0\/\/\u00a0print\u00a0\"int(10)\"\nvar_dump(hexdec(\"a0\"));\u00a0\/\/\u00a0print\u00a0\"int(160)\"\n?>"}]},"highlight_file":{"name":"highlight_file","parameters":[{"type":"string","name":"$filename","description":"Path to the PHP file to be highlighted."},{"type":"bool","name":"$return","default_value":"FALSE","description":"Set this parameter to TRUE to make this function return the highlighted code."}],"return":{"type":"mixed","values":{"0":"TRUE","2":"FALSE"}},"short":"Syntax highlighting of a file","examples":[]},"highlight_string":{"name":"highlight_string","parameters":[{"type":"string","name":"$str","description":"The PHP code to be highlighted. This should include the opening tag."},{"type":"bool","name":"$return","default_value":"FALSE","description":"Set this parameter to TRUE to make this function return the highlighted code."}],"return":{"type":"mixed","values":{"0":"TRUE","2":"FALSE"}},"short":"Syntax highlighting of a string","examples":[{"title":"Example #1 highlight_string() example","content":"<?php\nhighlight_string('<?php\u00a0phpinfo();\u00a0?>');\n?>"}]},"html_entity_decode":{"name":"html_entity_decode","parameters":[{"type":"string","name":"$string","description":"The input string."},{"type":"int","name":"$flags","default_value":"ENT_COMPAT | ENT_HTML401","description":"A bitmask of one or more of the following flags, which specify how to handle quotes and which document type to use. The default is ENT_COMPAT | ENT_HTML401.\n\nAvailable flags constants\n Constant Name Description ENT_COMPAT Will convert double-quotes and leave single-quotes alone. ENT_QUOTES Will convert both double and single quotes. ENT_NOQUOTES Will leave both double and single quotes unconverted. ENT_HTML401\n Handle code as HTML 4.01.\n ENT_XML1\n Handle code as XML 1.\n ENT_XHTML\n Handle code as XHTML.\n ENT_HTML5\n Handle code as HTML 5."},{"type":"string","name":"$encoding","default_value":"ini_get(\"default_charset\")","description":"An optional argument defining the encoding used when converting characters.\n\nIf omitted, the default value of the encoding varies depending on the PHP version in use. In PHP 5.6 and later, the default_charset configuration option is used as the default value. PHP 5.4 and 5.5 will use UTF-8 as the default. Earlier versions of PHP use ISO-8859-1.\n\nAlthough this argument is technically optional, you are highly encouraged to specify the correct value for your code if you are using PHP 5.5 or earlier, or if your default_charset configuration option may be set incorrectly for the given input.\n\nThe following character sets are supported:\n\nSupported charsets\n Charset Aliases Description ISO-8859-1 ISO8859-1\n Western European, Latin-1.\n ISO-8859-5 ISO8859-5\n Little used cyrillic charset (Latin\/Cyrillic).\n ISO-8859-15 ISO8859-15\n Western European, Latin-9. Adds the Euro sign, French and Finnish letters missing in Latin-1 (ISO-8859-1).\n UTF-8 \u00a0\n ASCII compatible multi-byte 8-bit Unicode.\n cp866 ibm866, 866\n DOS-specific Cyrillic charset.\n cp1251 Windows-1251, win-1251, 1251\n Windows-specific Cyrillic charset.\n cp1252 Windows-1252, 1252\n Windows specific charset for Western European.\n KOI8-R koi8-ru, koi8r\n Russian.\n BIG5 950\n Traditional Chinese, mainly used in Taiwan.\n GB2312 936\n Simplified Chinese, national standard character set.\n BIG5-HKSCS \u00a0\n Big5 with Hong Kong extensions, Traditional Chinese.\n Shift_JIS SJIS, SJIS-win, cp932, 932\n Japanese\n EUC-JP EUCJP, eucJP-win\n Japanese\n MacRoman \u00a0\n Charset that was used by Mac OS.\n '' \u00a0\n An empty string activates detection from script encoding (Zend multibyte), default_charset and current locale (see nl_langinfo() and setlocale()), in this order. Not recommended.\n\nNote:\n Any other character sets are not recognized. The default encoding will be used instead and a warning will be emitted."}],"return":{"type":"string","values":[]},"short":"Convert all HTML entities to their applicable characters","examples":[{"title":"Example #1 Decoding HTML entities","content":"<?php\n$orig\u00a0=\u00a0\"I'll\u00a0\\\"walk\\\"\u00a0the\u00a0<b>dog<\/b>\u00a0now\";\n\n$a\u00a0=\u00a0htmlentities($orig);\n\n$b\u00a0=\u00a0html_entity_decode($a);\n\necho\u00a0$a;\u00a0\/\/\u00a0I'll\u00a0&quot;walk&quot;\u00a0the\u00a0&lt;b&gt;dog&lt;\/b&gt;\u00a0now\n\necho\u00a0$b;\u00a0\/\/\u00a0I'll\u00a0\"walk\"\u00a0the\u00a0<b>dog<\/b>\u00a0now\n?>"}]},"htmlentities":{"name":"htmlentities","parameters":[{"type":"string","name":"$string","description":"The input string."},{"type":"int","name":"$flags","default_value":"ENT_COMPAT | ENT_HTML401","description":"A bitmask of one or more of the following flags, which specify how to handle quotes, invalid code unit sequences and the used document type. The default is ENT_COMPAT | ENT_HTML401.\n\nAvailable flags constants\n Constant Name Description ENT_COMPAT Will convert double-quotes and leave single-quotes alone. ENT_QUOTES Will convert both double and single quotes. ENT_NOQUOTES Will leave both double and single quotes unconverted. ENT_IGNORE\n Silently discard invalid code unit sequences instead of returning an empty string. Using this flag is discouraged as it \u00bb\u00a0may have security implications.\n ENT_SUBSTITUTE\n Replace invalid code unit sequences with a Unicode Replacement Character U+FFFD (UTF-8) or &#FFFD; (otherwise) instead of returning an empty string.\n ENT_DISALLOWED\n Replace invalid code points for the given document type with a Unicode Replacement Character U+FFFD (UTF-8) or &#FFFD; (otherwise) instead of leaving them as is. This may be useful, for instance, to ensure the well-formedness of XML documents with embedded external content.\n ENT_HTML401\n Handle code as HTML 4.01.\n ENT_XML1\n Handle code as XML 1.\n ENT_XHTML\n Handle code as XHTML.\n ENT_HTML5\n Handle code as HTML 5."},{"type":"string","name":"$encoding","default_value":"ini_get(\"default_charset\")","description":"An optional argument defining the encoding used when converting characters.\n\nIf omitted, the default value of the encoding varies depending on the PHP version in use. In PHP 5.6 and later, the default_charset configuration option is used as the default value. PHP 5.4 and 5.5 will use UTF-8 as the default. Earlier versions of PHP use ISO-8859-1.\n\nAlthough this argument is technically optional, you are highly encouraged to specify the correct value for your code if you are using PHP 5.5 or earlier, or if your default_charset configuration option may be set incorrectly for the given input.\n\nThe following character sets are supported:\n\nSupported charsets\n Charset Aliases Description ISO-8859-1 ISO8859-1\n Western European, Latin-1.\n ISO-8859-5 ISO8859-5\n Little used cyrillic charset (Latin\/Cyrillic).\n ISO-8859-15 ISO8859-15\n Western European, Latin-9. Adds the Euro sign, French and Finnish letters missing in Latin-1 (ISO-8859-1).\n UTF-8 \u00a0\n ASCII compatible multi-byte 8-bit Unicode.\n cp866 ibm866, 866\n DOS-specific Cyrillic charset.\n cp1251 Windows-1251, win-1251, 1251\n Windows-specific Cyrillic charset.\n cp1252 Windows-1252, 1252\n Windows specific charset for Western European.\n KOI8-R koi8-ru, koi8r\n Russian.\n BIG5 950\n Traditional Chinese, mainly used in Taiwan.\n GB2312 936\n Simplified Chinese, national standard character set.\n BIG5-HKSCS \u00a0\n Big5 with Hong Kong extensions, Traditional Chinese.\n Shift_JIS SJIS, SJIS-win, cp932, 932\n Japanese\n EUC-JP EUCJP, eucJP-win\n Japanese\n MacRoman \u00a0\n Charset that was used by Mac OS.\n '' \u00a0\n An empty string activates detection from script encoding (Zend multibyte), default_charset and current locale (see nl_langinfo() and setlocale()), in this order. Not recommended.\n\nNote:\n Any other character sets are not recognized. The default encoding will be used instead and a warning will be emitted."},{"type":"bool","name":"$double_encode","default_value":"TRUE","description":"When double_encode is turned off PHP will not encode existing html entities. The default is to convert everything."}],"return":{"type":"string","values":["ENT_IGNORE","ENT_SUBSTITUTE"]},"short":"Convert all applicable characters to HTML entities","examples":[{"title":"Example #1 A htmlentities() example","content":"<?php\n$str\u00a0=\u00a0\"A\u00a0'quote'\u00a0is\u00a0<b>bold<\/b>\";\n\n\/\/\u00a0Outputs:\u00a0A\u00a0'quote'\u00a0is\u00a0&lt;b&gt;bold&lt;\/b&gt;\necho\u00a0htmlentities($str);\n\n\/\/\u00a0Outputs:\u00a0A\u00a0&#039;quote&#039;\u00a0is\u00a0&lt;b&gt;bold&lt;\/b&gt;\necho\u00a0htmlentities($str,\u00a0ENT_QUOTES);\n?>"},{"title":"Example #2 Usage of ENT_IGNORE","content":"<?php\n$str\u00a0=\u00a0\"\\x8F!!!\";\n\n\/\/\u00a0Outputs\u00a0an\u00a0empty\u00a0string\necho\u00a0htmlentities($str,\u00a0ENT_QUOTES,\u00a0\"UTF-8\");\n\n\/\/\u00a0Outputs\u00a0\"!!!\"\necho\u00a0htmlentities($str,\u00a0ENT_QUOTES\u00a0|\u00a0ENT_IGNORE,\u00a0\"UTF-8\");\n?>"}]},"htmlspecialchars":{"name":"htmlspecialchars","parameters":[{"type":"string","name":"$string","description":"The string being converted."},{"type":"int","name":"$flags","default_value":"ENT_COMPAT | ENT_HTML401","description":"A bitmask of one or more of the following flags, which specify how to handle quotes, invalid code unit sequences and the used document type. The default is ENT_COMPAT | ENT_HTML401.\n\nAvailable flags constants\n Constant Name Description ENT_COMPAT Will convert double-quotes and leave single-quotes alone. ENT_QUOTES Will convert both double and single quotes. ENT_NOQUOTES Will leave both double and single quotes unconverted. ENT_IGNORE\n Silently discard invalid code unit sequences instead of returning an empty string. Using this flag is discouraged as it \u00bb\u00a0may have security implications.\n ENT_SUBSTITUTE\n Replace invalid code unit sequences with a Unicode Replacement Character U+FFFD (UTF-8) or &#xFFFD; (otherwise) instead of returning an empty string.\n ENT_DISALLOWED\n Replace invalid code points for the given document type with a Unicode Replacement Character U+FFFD (UTF-8) or &#xFFFD; (otherwise) instead of leaving them as is. This may be useful, for instance, to ensure the well-formedness of XML documents with embedded external content.\n ENT_HTML401\n Handle code as HTML 4.01.\n ENT_XML1\n Handle code as XML 1.\n ENT_XHTML\n Handle code as XHTML.\n ENT_HTML5\n Handle code as HTML 5."},{"type":"string","name":"$encoding","default_value":"ini_get(\"default_charset\")","description":"An optional argument defining the encoding used when converting characters.\n\nIf omitted, the default value of the encoding varies depending on the PHP version in use. In PHP 5.6 and later, the default_charset configuration option is used as the default value. PHP 5.4 and 5.5 will use UTF-8 as the default. Earlier versions of PHP use ISO-8859-1.\n\nAlthough this argument is technically optional, you are highly encouraged to specify the correct value for your code if you are using PHP 5.5 or earlier, or if your default_charset configuration option may be set incorrectly for the given input.\n\nFor the purposes of this function, the encodings ISO-8859-1, ISO-8859-15, UTF-8, cp866, cp1251, cp1252, and KOI8-R are effectively equivalent, provided the string itself is valid for the encoding, as the characters affected by htmlspecialchars() occupy the same positions in all of these encodings.\n\nThe following character sets are supported:\n\nSupported charsets\n Charset Aliases Description ISO-8859-1 ISO8859-1\n Western European, Latin-1.\n ISO-8859-5 ISO8859-5\n Little used cyrillic charset (Latin\/Cyrillic).\n ISO-8859-15 ISO8859-15\n Western European, Latin-9. Adds the Euro sign, French and Finnish letters missing in Latin-1 (ISO-8859-1).\n UTF-8 \u00a0\n ASCII compatible multi-byte 8-bit Unicode.\n cp866 ibm866, 866\n DOS-specific Cyrillic charset.\n cp1251 Windows-1251, win-1251, 1251\n Windows-specific Cyrillic charset.\n cp1252 Windows-1252, 1252\n Windows specific charset for Western European.\n KOI8-R koi8-ru, koi8r\n Russian.\n BIG5 950\n Traditional Chinese, mainly used in Taiwan.\n GB2312 936\n Simplified Chinese, national standard character set.\n BIG5-HKSCS \u00a0\n Big5 with Hong Kong extensions, Traditional Chinese.\n Shift_JIS SJIS, SJIS-win, cp932, 932\n Japanese\n EUC-JP EUCJP, eucJP-win\n Japanese\n MacRoman \u00a0\n Charset that was used by Mac OS.\n '' \u00a0\n An empty string activates detection from script encoding (Zend multibyte), default_charset and current locale (see nl_langinfo() and setlocale()), in this order. Not recommended.\n\nNote:\n Any other character sets are not recognized. The default encoding will be used instead and a warning will be emitted."},{"type":"bool","name":"$double_encode","default_value":"TRUE","description":"When double_encode is turned off PHP will not encode existing html entities, the default is to convert everything."}],"return":{"type":"string","values":["ENT_IGNORE","ENT_SUBSTITUTE"]},"short":"Convert special characters to HTML entities","examples":[{"title":"Example #1 htmlspecialchars() example","content":"<?php\n$new\u00a0=\u00a0htmlspecialchars(\"<a\u00a0href='test'>Test<\/a>\",\u00a0ENT_QUOTES);\necho\u00a0$new;\u00a0\/\/\u00a0&lt;a\u00a0href=&#039;test&#039;&gt;Test&lt;\/a&gt;\n?>"}]},"htmlspecialchars_decode":{"name":"htmlspecialchars_decode","parameters":[{"type":"string","name":"$string","description":"The string to decode."},{"type":"int","name":"$flags","default_value":"ENT_COMPAT | ENT_HTML401","description":"A bitmask of one or more of the following flags, which specify how to handle quotes and which document type to use. The default is ENT_COMPAT | ENT_HTML401.\n\nAvailable flags constants\n Constant Name Description ENT_COMPAT Will convert double-quotes and leave single-quotes alone. ENT_QUOTES Will convert both double and single quotes. ENT_NOQUOTES Will leave both double and single quotes unconverted. ENT_HTML401\n Handle code as HTML 4.01.\n ENT_XML1\n Handle code as XML 1.\n ENT_XHTML\n Handle code as XHTML.\n ENT_HTML5\n Handle code as HTML 5."}],"return":{"type":"string","values":[]},"short":"\n   Convert special HTML entities back to characters\n  ","examples":[{"title":"Example #1 A htmlspecialchars_decode() example","content":"<?php\n$str\u00a0=\u00a0\"<p>this\u00a0-&gt;\u00a0&quot;<\/p>\\n\";\n\necho\u00a0htmlspecialchars_decode($str);\n\n\/\/\u00a0note\u00a0that\u00a0here\u00a0the\u00a0quotes\u00a0aren't\u00a0converted\necho\u00a0htmlspecialchars_decode($str,\u00a0ENT_NOQUOTES);\n?>"}]},"http_build_query":{"name":"http_build_query","parameters":[{"type":"mixed","name":"$query_data","description":"May be an array or object containing properties.\n\nIf query_data is an array, it may be a simple one-dimensional structure, or an array of arrays (which in turn may contain other arrays).\n\nIf query_data is an object, then only public properties will be incorporated into the result."},{"type":"string","name":"$numeric_prefix","description":"If numeric indices are used in the base array and this parameter is provided, it will be prepended to the numeric index for elements in the base array only.\n\nThis is meant to allow for legal variable names when the data is decoded by PHP or another CGI application later on."},{"type":"string","name":"$arg_separator","description":"arg_separator.output is used to separate arguments but may be overridden by specifying this parameter."},{"type":"int","name":"$enc_type","default_value":"PHP_QUERY_RFC1738","description":"By default, PHP_QUERY_RFC1738.\n\nIf enc_type is PHP_QUERY_RFC1738, then encoding is performed per \u00bb\u00a0RFC 1738 and the application\/x-www-form-urlencoded media type, which implies that spaces are encoded as plus (+) signs.\n\nIf enc_type is PHP_QUERY_RFC3986, then encoding is performed according to \u00bb\u00a0RFC 3986, and spaces will be percent encoded (%20)."}],"return":{"type":"string","values":[]},"short":"Generate URL-encoded query string","examples":[{"title":"Example #1 Simple usage of http_build_query()","content":"<?php\n$data\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'foo'\u00a0=>\u00a0'bar',\n\u00a0\u00a0\u00a0\u00a0'baz'\u00a0=>\u00a0'boom',\n\u00a0\u00a0\u00a0\u00a0'cow'\u00a0=>\u00a0'milk',\n\u00a0\u00a0\u00a0\u00a0'php'\u00a0=>\u00a0'hypertext\u00a0processor'\n);\n\necho\u00a0http_build_query($data)\u00a0.\u00a0\"\\n\";\necho\u00a0http_build_query($data,\u00a0'',\u00a0'&amp;');\n\n?>"},{"title":"Example #2 http_build_query() with numerically index elements.","content":"<?php\n$data\u00a0=\u00a0array('foo',\u00a0'bar',\u00a0'baz',\u00a0'boom',\u00a0'cow'\u00a0=>\u00a0'milk',\u00a0'php'\u00a0=>\u00a0'hypertext\u00a0processor');\n\necho\u00a0http_build_query($data)\u00a0.\u00a0\"\\n\";\necho\u00a0http_build_query($data,\u00a0'myvar_');\n?>"},{"title":"Example #3 http_build_query() with complex arrays","content":"<?php\n$data\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'user'\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'name'\u00a0=>\u00a0'Bob\u00a0Smith',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'age'\u00a0\u00a0=>\u00a047,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'sex'\u00a0\u00a0=>\u00a0'M',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'dob'\u00a0\u00a0=>\u00a0'5\/12\/1956'\n\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0'pastimes'\u00a0=>\u00a0array('golf',\u00a0'opera',\u00a0'poker',\u00a0'rap'),\n\u00a0\u00a0\u00a0\u00a0'children'\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'bobby'\u00a0=>\u00a0array('age'=>12,\u00a0'sex'=>'M'),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'sally'\u00a0=>\u00a0array('age'=>8,\u00a0'sex'=>'F')\n\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0'CEO'\n);\n\necho\u00a0http_build_query($data,\u00a0'flags_');\n?>"},{"title":"Example #4 Using http_build_query() with an object","content":"<?php\nclass\u00a0parentClass\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0\u00a0\u00a0\u00a0$pub\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0'publicParent';\n\u00a0\u00a0\u00a0\u00a0protected\u00a0$prot\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0'protectedParent';\n\u00a0\u00a0\u00a0\u00a0private\u00a0\u00a0\u00a0$priv\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0'privateParent';\n\u00a0\u00a0\u00a0\u00a0public\u00a0\u00a0\u00a0\u00a0$pub_bar\u00a0\u00a0=\u00a0Null;\n\u00a0\u00a0\u00a0\u00a0protected\u00a0$prot_bar\u00a0=\u00a0Null;\n\u00a0\u00a0\u00a0\u00a0private\u00a0\u00a0\u00a0$priv_bar\u00a0=\u00a0Null;\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__construct(){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->pub_bar\u00a0\u00a0=\u00a0new\u00a0childClass();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->prot_bar\u00a0=\u00a0new\u00a0childClass();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->priv_bar\u00a0=\u00a0new\u00a0childClass();\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nclass\u00a0childClass\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0\u00a0\u00a0\u00a0$pub\u00a0\u00a0=\u00a0'publicChild';\n\u00a0\u00a0\u00a0\u00a0protected\u00a0$prot\u00a0=\u00a0'protectedChild';\n\u00a0\u00a0\u00a0\u00a0private\u00a0\u00a0\u00a0$priv\u00a0=\u00a0'privateChild';\n}\n\n$parent\u00a0=\u00a0new\u00a0parentClass();\n\necho\u00a0http_build_query($parent);\n?>"}]},"http_response_code":{"name":"http_response_code","parameters":[{"type":"int","name":"$response_code","description":"The optional response_code will set the response code."}],"return":{"type":"mixed","values":["FALSE","TRUE"]},"short":"Get or Set the HTTP response code","examples":[{"title":"Example #1 Using http_response_code() in a web server environment","content":"<?php\n\n\/\/\u00a0Get\u00a0the\u00a0current\u00a0response\u00a0code\u00a0and\u00a0set\u00a0a\u00a0new\u00a0one\nvar_dump(http_response_code(404));\n\n\/\/\u00a0Get\u00a0the\u00a0new\u00a0response\u00a0code\nvar_dump(http_response_code());\n?>"},{"title":"Example #2 Using http_response_code() in a CLI environment","content":"<?php\n\n\/\/\u00a0Get\u00a0the\u00a0current\u00a0default\u00a0response\u00a0code\nvar_dump(http_response_code());\n\n\/\/\u00a0Set\u00a0a\u00a0response\u00a0code\nvar_dump(http_response_code(201));\n\n\/\/\u00a0Get\u00a0the\u00a0new\u00a0response\u00a0code\nvar_dump(http_response_code());\n?>"}]},"hypot":{"name":"hypot","parameters":[{"type":"float","name":"$x","description":"Length of first side"},{"type":"float","name":"$y","description":"Length of second side"}],"return":{"type":"float","values":[]},"short":"\n   Calculate the length of the hypotenuse of a right-angle triangle\n  ","examples":[]},"iconv":{"name":"iconv","parameters":[{"type":"string","name":"$in_charset","description":"The input charset."},{"type":"string","name":"$out_charset","description":"The output charset.\n\nIf you append the string \/\/TRANSLIT to out_charset transliteration is activated. This means that when a character can't be represented in the target charset, it can be approximated through one or several similarly looking characters. If you append the string \/\/IGNORE, characters that cannot be represented in the target charset are silently discarded. Otherwise, E_NOTICE is generated and the function will return FALSE.\n\nCaution\n If and how \/\/TRANSLIT works exactly depends on the system's iconv() implementation (cf. ICONV_IMPL). Some implementations are known to ignore \/\/TRANSLIT, so the conversion is likely to fail for characters which are illegal for the out_charset."},{"type":"string","name":"$str","description":"The string to be converted."}],"return":{"type":"string","values":["FALSE"]},"short":"Convert string to requested character encoding","examples":[{"title":"Example #1 iconv() example","content":"<?php\n$text\u00a0=\u00a0\"This\u00a0is\u00a0the\u00a0Euro\u00a0symbol\u00a0'\u20ac'.\";\n\necho\u00a0'Original\u00a0:\u00a0',\u00a0$text,\u00a0PHP_EOL;\necho\u00a0'TRANSLIT\u00a0:\u00a0',\u00a0iconv(\"UTF-8\",\u00a0\"ISO-8859-1\/\/TRANSLIT\",\u00a0$text),\u00a0PHP_EOL;\necho\u00a0'IGNORE\u00a0\u00a0\u00a0:\u00a0',\u00a0iconv(\"UTF-8\",\u00a0\"ISO-8859-1\/\/IGNORE\",\u00a0$text),\u00a0PHP_EOL;\necho\u00a0'Plain\u00a0\u00a0\u00a0\u00a0:\u00a0',\u00a0iconv(\"UTF-8\",\u00a0\"ISO-8859-1\",\u00a0$text),\u00a0PHP_EOL;\n\n?>"}]},"iconv_get_encoding":{"name":"iconv_get_encoding","parameters":[{"type":"string","name":"$type","default_value":"\"all\"","description":"The value of the optional type can be:\n\nall input_encoding output_encoding internal_encoding"}],"return":{"type":"mixed","values":["FALSE"]},"short":"Retrieve internal configuration variables of iconv extension","examples":[{"title":"Example #1 iconv_get_encoding() example","content":"<pre>\n<?php\niconv_set_encoding(\"internal_encoding\",\u00a0\"UTF-8\");\niconv_set_encoding(\"output_encoding\",\u00a0\"ISO-8859-1\");\nvar_dump(iconv_get_encoding('all'));\n?>\n<\/pre>"}]},"iconv_mime_decode":{"name":"iconv_mime_decode","parameters":[{"type":"string","name":"$encoded_header","description":"The encoded header, as a string."},{"type":"int","name":"$mode","default_value":"0","description":"mode determines the behaviour in the event iconv_mime_decode() encounters a malformed MIME header field. You can specify any combination of the following bitmasks.\n\nBitmasks acceptable to iconv_mime_decode()\n Value Constant Description 1 ICONV_MIME_DECODE_STRICT\n If set, the given header is decoded in full conformance with the standards defined in \u00bb\u00a0RFC2047. This option is disabled by default because there are a lot of broken mail user agents that don't follow the specification and don't produce correct MIME headers.\n 2 ICONV_MIME_DECODE_CONTINUE_ON_ERROR\n If set, iconv_mime_decode_headers() attempts to ignore any grammatical errors and continue to process a given header."},{"type":"string","name":"$charset","default_value":"ini_get(\"iconv.internal_encoding\")","description":"The optional charset parameter specifies the character set to represent the result by. If omitted, iconv.internal_encoding will be used."}],"return":{"type":"string","values":["FALSE"]},"short":"Decodes a MIME header field","examples":[{"title":"Example #1 iconv_mime_decode() example","content":"<?php\n\/\/\u00a0This\u00a0yields\u00a0\"Subject:\u00a0Pr\u00fcfung\u00a0Pr\u00fcfung\"\necho\u00a0iconv_mime_decode(\"Subject:\u00a0=?UTF-8?B?UHLDvGZ1bmcgUHLDvGZ1bmc=?=\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00,\u00a0\"ISO-8859-1\");\n?>"}]},"iconv_mime_decode_headers":{"name":"iconv_mime_decode_headers","parameters":[{"type":"string","name":"$encoded_headers","description":"The encoded headers, as a string."},{"type":"int","name":"$mode","default_value":"0","description":"mode determines the behaviour in the event iconv_mime_decode_headers() encounters a malformed MIME header field. You can specify any combination of the following bitmasks.\n\nBitmasks acceptable to iconv_mime_decode_headers()\n Value Constant Description 1 ICONV_MIME_DECODE_STRICT\n If set, the given header is decoded in full conformance with the standards defined in \u00bb\u00a0RFC2047. This option is disabled by default because there are a lot of broken mail user agents that don't follow the specification and don't produce correct MIME headers.\n 2 ICONV_MIME_DECODE_CONTINUE_ON_ERROR\n If set, iconv_mime_decode_headers() attempts to ignore any grammatical errors and continue to process a given header."},{"type":"string","name":"$charset","default_value":"ini_get(\"iconv.internal_encoding\")","description":"The optional charset parameter specifies the character set to represent the result by. If omitted, iconv.internal_encoding will be used."}],"return":{"type":"array","values":["FALSE"]},"short":"Decodes multiple MIME header fields at once","examples":[{"title":"Example #1 iconv_mime_decode_headers() example","content":"<?php\n$headers_string\u00a0=\u00a0<<<EOF\nSubject:\u00a0=?UTF-8?B?UHLDvGZ1bmcgUHLDvGZ1bmc=?=\nTo:\u00a0example@example.com\nDate:\u00a0Thu,\u00a01\u00a0Jan\u00a01970\u00a000:00:00\u00a0+0000\nMessage-Id:\u00a0<example@example.com>\nReceived:\u00a0from\u00a0localhost\u00a0(localhost\u00a0[127.0.0.1])\u00a0by\u00a0localhost\n\u00a0\u00a0\u00a0\u00a0with\u00a0SMTP\u00a0id\u00a0example\u00a0for\u00a0<example@example.com>;\n\u00a0\u00a0\u00a0\u00a0Thu,\u00a01\u00a0Jan\u00a01970\u00a000:00:00\u00a0+0000\u00a0(UTC)\n\u00a0\u00a0\u00a0\u00a0(envelope-from\u00a0example-return-0000-example=example.com@example.com)\nReceived:\u00a0(qmail\u00a00\u00a0invoked\u00a0by\u00a0uid\u00a065534);\u00a01\u00a0Thu\u00a02003\u00a000:00:00\u00a0+0000\n\nEOF;\n\n$headers\u00a0=\u00a0\u00a0iconv_mime_decode_headers($headers_string,\u00a00,\u00a0\"ISO-8859-1\");\nprint_r($headers);\n?>"}]},"iconv_mime_encode":{"name":"iconv_mime_encode","parameters":[{"type":"string","name":"$field_name","description":"The field name."},{"type":"string","name":"$field_value","description":"The field value."},{"type":"array","name":"$preferences","default_value":"NULL","description":"You can control the behaviour of iconv_mime_encode() by specifying an associative array that contains configuration items to the optional third parameter preferences. The items supported by iconv_mime_encode() are listed below. Note that item names are treated case-sensitive.\n\nConfiguration items supported by iconv_mime_encode()\n Item Type Description Default value Example scheme string\n Specifies the method to encode a field value by. The value of this item may be either \"B\" or \"Q\", where \"B\" stands for base64 encoding scheme and \"Q\" stands for quoted-printable encoding scheme.\n B B input-charset string\n Specifies the character set in which the first parameter field_name and the second parameter field_value are presented. If not given, iconv_mime_encode() assumes those parameters are presented to it in the iconv.internal_encoding ini setting.\n\n iconv.internal_encoding\n ISO-8859-1 output-charset string\n Specifies the character set to use to compose the MIME header.\n\n iconv.internal_encoding\n UTF-8 line-length integer\n Specifies the maximum length of the header lines. The resulting header is \"folded\" to a set of multiple lines in case the resulting header field would be longer than the value of this parameter, according to \u00bb\u00a0RFC2822 - Internet Message Format. If not given, the length will be limited to 76 characters.\n 76 996 line-break-chars string\n Specifies the sequence of characters to append to each line as an end-of-line sign when \"folding\" is performed on a long header field. If not given, this defaults to \"\\r\\n\" (CR LF). Note that this parameter is always treated as an ASCII string regardless of the value of input-charset.\n \\r\\n \\n"}],"return":{"type":"string","values":["FALSE"]},"short":"Composes a MIME header field","examples":[{"title":"Example #1 iconv_mime_encode() example","content":"<?php\n$preferences\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\"input-charset\"\u00a0=>\u00a0\"ISO-8859-1\",\n\u00a0\u00a0\u00a0\u00a0\"output-charset\"\u00a0=>\u00a0\"UTF-8\",\n\u00a0\u00a0\u00a0\u00a0\"line-length\"\u00a0=>\u00a076,\n\u00a0\u00a0\u00a0\u00a0\"line-break-chars\"\u00a0=>\u00a0\"\\n\"\n);\n$preferences[\"scheme\"]\u00a0=\u00a0\"Q\";\n\/\/\u00a0This\u00a0yields\u00a0\"Subject:\u00a0=?UTF-8?Q?Pr=C3=BCfung=20Pr=C3=BCfung?=\"\necho\u00a0iconv_mime_encode(\"Subject\",\u00a0\"Pr\u00fcfung\u00a0Pr\u00fcfung\",\u00a0$preferences);\n\n$preferences[\"scheme\"]\u00a0=\u00a0\"B\";\n\/\/\u00a0This\u00a0yields\u00a0\"Subject:\u00a0=?UTF-8?B?UHLDvGZ1bmcgUHLDvGZ1bmc=?=\"\necho\u00a0iconv_mime_encode(\"Subject\",\u00a0\"Pr\u00fcfung\u00a0Pr\u00fcfung\",\u00a0$preferences);\n?>"}]},"iconv_set_encoding":{"name":"iconv_set_encoding","parameters":[{"type":"string","name":"$type","description":"The value of type can be any one of these:\n\ninput_encoding output_encoding internal_encoding"},{"type":"string","name":"$charset","description":"The character set."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set current setting for character encoding conversion","examples":[{"title":"Example #1 iconv_set_encoding() example","content":"<?php\niconv_set_encoding(\"internal_encoding\",\u00a0\"UTF-8\");\niconv_set_encoding(\"output_encoding\",\u00a0\"ISO-8859-1\");\n?>"}]},"iconv_strlen":{"name":"iconv_strlen","parameters":[{"type":"string","name":"$str","description":"The string."},{"type":"string","name":"$charset","default_value":"ini_get(\"iconv.internal_encoding\")","description":"If charset parameter is omitted, str is assumed to be encoded in iconv.internal_encoding."}],"return":{"type":"int","values":[]},"short":"Returns the character count of string","examples":[]},"iconv_strpos":{"name":"iconv_strpos","parameters":[{"type":"string","name":"$haystack","description":"The entire string."},{"type":"string","name":"$needle","description":"The searched substring."},{"type":"int","name":"$offset","default_value":"0","description":"The optional offset parameter specifies the position from which the search should be performed. If the offset is negative, it is counted from the end of the string."},{"type":"string","name":"$charset","default_value":"ini_get(\"iconv.internal_encoding\")","description":"If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding."}],"return":{"type":"int","values":["FALSE"]},"short":"Finds position of first occurrence of a needle within a haystack","examples":[]},"iconv_strrpos":{"name":"iconv_strrpos","parameters":[{"type":"string","name":"$haystack","description":"The entire string."},{"type":"string","name":"$needle","description":"The searched substring."},{"type":"string","name":"$charset","default_value":"ini_get(\"iconv.internal_encoding\")","description":"If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding."}],"return":{"type":"int","values":["FALSE"]},"short":"Finds the last occurrence of a needle within a haystack","examples":[]},"iconv_substr":{"name":"iconv_substr","parameters":[{"type":"string","name":"$str","description":"The original string."},{"type":"int","name":"$offset","description":"If offset is non-negative, iconv_substr() cuts the portion out of str beginning at offset'th character, counting from zero.\n\nIf offset is negative, iconv_substr() cuts out the portion beginning at the position, offset characters away from the end of str."},{"type":"int","name":"$length","default_value":"iconv_strlen($str, $charset)","description":"If length is given and is positive, the return value will contain at most length characters of the portion that begins at offset (depending on the length of string).\n\nIf negative length is passed, iconv_substr() cuts the portion out of str from the offset'th character up to the character that is length characters away from the end of the string. In case offset is also negative, the start position is calculated beforehand according to the rule explained above."},{"type":"string","name":"$charset","default_value":"ini_get(\"iconv.internal_encoding\")","description":"If charset parameter is omitted, string are assumed to be encoded in iconv.internal_encoding.\n\nNote that offset and length parameters are always deemed to represent offsets that are calculated on the basis of the character set determined by charset, whilst the counterpart substr() always takes these for byte offsets."}],"return":{"type":"string","values":["FALSE"]},"short":"Cut out part of a string","examples":[]},"idate":{"name":"idate","parameters":[{"type":"string","name":"$format","description":"\n\nThe following characters are recognized in the format parameter string\n format character Description B Swatch Beat\/Internet Time d Day of the month h Hour (12 hour format) H Hour (24 hour format) i Minutes I (uppercase i) returns 1 if DST is activated, 0 otherwise L (uppercase l) returns 1 for leap year, 0 otherwise m Month number s Seconds t Days in current month U Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC - this is the same as time() w Day of the week (0 on Sunday) W ISO-8601 week number of year, weeks starting on Monday y Year (1 or 2 digits - check note below) Y Year (4 digits) z Day of the year Z Timezone offset in seconds"},{"type":"int","name":"$timestamp","default_value":"time()","description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."}],"return":{"type":"int","values":[]},"short":"Format a local time\/date as integer","examples":[{"title":"Example #1 idate() example","content":"<?php\n$timestamp\u00a0=\u00a0strtotime('1st\u00a0January\u00a02004');\u00a0\/\/1072915200\n\n\/\/\u00a0this\u00a0prints\u00a0the\u00a0year\u00a0in\u00a0a\u00a0two\u00a0digit\u00a0format\n\/\/\u00a0however,\u00a0as\u00a0this\u00a0would\u00a0start\u00a0with\u00a0a\u00a0\"0\",\u00a0it\n\/\/\u00a0only\u00a0prints\u00a0\"4\"\necho\u00a0idate('y',\u00a0$timestamp);\n?>"}]},"ignore_user_abort":{"name":"ignore_user_abort","parameters":[{"type":"bool","name":"$value","description":"If set, this function will set the ignore_user_abort ini setting to the given value. If not, this function will only return the previous setting without changing it."}],"return":{"type":"int","values":[]},"short":"Set whether a client disconnect should abort script execution","examples":[{"title":"Example #1 A ignore_user_abort() example","content":"<?php\n\/\/\u00a0Ignore\u00a0user\u00a0aborts\u00a0and\u00a0allow\u00a0the\u00a0script\n\/\/\u00a0to\u00a0run\u00a0forever\nignore_user_abort(true);\nset_time_limit(0);\n\necho\u00a0'Testing\u00a0connection\u00a0handling\u00a0in\u00a0PHP';\n\n\/\/\u00a0Run\u00a0a\u00a0pointless\u00a0loop\u00a0that\u00a0sometime\u00a0\n\/\/\u00a0hopefully\u00a0will\u00a0make\u00a0us\u00a0click\u00a0away\u00a0from\u00a0\n\/\/\u00a0page\u00a0or\u00a0click\u00a0the\u00a0\"Stop\"\u00a0button.\nwhile(1)\n{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Did\u00a0the\u00a0connection\u00a0fail?\n\u00a0\u00a0\u00a0\u00a0if(connection_status()\u00a0!=\u00a0CONNECTION_NORMAL)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Sleep\u00a0for\u00a010\u00a0seconds\n\u00a0\u00a0\u00a0\u00a0sleep(10);\n}\n\n\/\/\u00a0If\u00a0this\u00a0is\u00a0reached,\u00a0then\u00a0the\u00a0'break'\u00a0\n\/\/\u00a0was\u00a0triggered\u00a0from\u00a0inside\u00a0the\u00a0while\u00a0loop\n\n\/\/\u00a0So\u00a0here\u00a0we\u00a0can\u00a0log,\u00a0or\u00a0perform\u00a0any\u00a0other\u00a0tasks\n\/\/\u00a0we\u00a0need\u00a0without\u00a0actually\u00a0being\u00a0dependent\u00a0on\u00a0the\u00a0\n\/\/\u00a0browser.\n?>"}]},"image_type_to_extension":{"name":"image_type_to_extension","parameters":[{"type":"int","name":"$imagetype","description":"One of the IMAGETYPE_XXX constant."},{"type":"bool","name":"$include_dot","default_value":"TRUE","description":"Whether to prepend a dot to the extension or not. Default to TRUE."}],"return":{"type":"string","values":[]},"short":"Get file extension for image type","examples":[{"title":"Example #1 image_type_to_extension() example","content":"<?php\n\/\/\u00a0Create\u00a0image\u00a0instance\n$im\u00a0=\u00a0imagecreatetruecolor(100,\u00a0100);\n\n\/\/\u00a0Save\u00a0image\nimagepng($im,\u00a0'.\/test'\u00a0.\u00a0image_type_to_extension(IMAGETYPE_PNG));\nimagedestroy($im);\n?>"}]},"image_type_to_mime_type":{"name":"image_type_to_mime_type","parameters":[{"type":"int","name":"$imagetype","description":"One of the IMAGETYPE_XXX constants."}],"return":{"type":"string","values":[]},"short":"Get Mime-Type for image-type returned by getimagesize,\n   exif_read_data, exif_thumbnail, exif_imagetype","examples":[{"title":"Example #1 image_type_to_mime_type() example","content":"<?php\nheader(\"Content-type:\u00a0\"\u00a0.\u00a0image_type_to_mime_type(IMAGETYPE_PNG));\n?>"}]},"implode":{"name":"implode","parameters":[{"type":"string","name":"$glue","description":"Defaults to an empty string."},{"type":"array","name":"$pieces","description":"The array of strings to implode."}],"return":{"type":"string","values":[]},"short":"Join array elements with a string","examples":[{"title":"Example #1 implode() example","content":"<?php\n\n$array\u00a0=\u00a0array('lastname',\u00a0'email',\u00a0'phone');\n$comma_separated\u00a0=\u00a0implode(\",\",\u00a0$array);\n\necho\u00a0$comma_separated;\u00a0\/\/\u00a0lastname,email,phone\n\n\/\/\u00a0Empty\u00a0string\u00a0when\u00a0using\u00a0an\u00a0empty\u00a0array:\nvar_dump(implode('hello',\u00a0array()));\u00a0\/\/\u00a0string(0)\u00a0\"\"\n\n?>"}]},"in_array":{"name":"in_array","parameters":[{"type":"mixed","name":"$needle","description":"The searched value.\n\nNote:\n If needle is a string, the comparison is done in a case-sensitive manner."},{"type":"array","name":"$haystack","description":"The array."},{"type":"bool","name":"$strict","default_value":"FALSE","description":"If the third parameter strict is set to TRUE then the in_array() function will also check the types of the needle in the haystack."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if a value exists in an array","examples":[{"title":"Example #1 in_array() example","content":"<?php\n$os\u00a0=\u00a0array(\"Mac\",\u00a0\"NT\",\u00a0\"Irix\",\u00a0\"Linux\");\nif\u00a0(in_array(\"Irix\",\u00a0$os))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Got\u00a0Irix\";\n}\nif\u00a0(in_array(\"mac\",\u00a0$os))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Got\u00a0mac\";\n}\n?>"},{"title":"Example #2 in_array() with strict example","content":"<?php\n$a\u00a0=\u00a0array('1.10',\u00a012.4,\u00a01.13);\n\nif\u00a0(in_array('12.4',\u00a0$a,\u00a0true))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'12.4'\u00a0found\u00a0with\u00a0strict\u00a0check\\n\";\n}\n\nif\u00a0(in_array(1.13,\u00a0$a,\u00a0true))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"1.13\u00a0found\u00a0with\u00a0strict\u00a0check\\n\";\n}\n?>"},{"title":"Example #3 in_array() with an array as needle","content":"<?php\n$a\u00a0=\u00a0array(array('p',\u00a0'h'),\u00a0array('p',\u00a0'r'),\u00a0'o');\n\nif\u00a0(in_array(array('p',\u00a0'h'),\u00a0$a))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'ph'\u00a0was\u00a0found\\n\";\n}\n\nif\u00a0(in_array(array('f',\u00a0'i'),\u00a0$a))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'fi'\u00a0was\u00a0found\\n\";\n}\n\nif\u00a0(in_array('o',\u00a0$a))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"'o'\u00a0was\u00a0found\\n\";\n}\n?>"}]},"inet_ntop":{"name":"inet_ntop","parameters":[{"type":"string","name":"$in_addr","description":"A 32bit IPv4, or 128bit IPv6 address."}],"return":{"type":"string","values":["FALSE"]},"short":"Converts a packed internet address to a human readable representation","examples":[{"title":"Example #1 inet_ntop() Example","content":"<?php\n$packed\u00a0=\u00a0chr(127)\u00a0.\u00a0chr(0)\u00a0.\u00a0chr(0)\u00a0.\u00a0chr(1);\n$expanded\u00a0=\u00a0inet_ntop($packed);\n\n\/*\u00a0Outputs:\u00a0127.0.0.1\u00a0*\/\necho\u00a0$expanded;\n\n$packed\u00a0=\u00a0str_repeat(chr(0),\u00a015)\u00a0.\u00a0chr(1);\n$expanded\u00a0=\u00a0inet_ntop($packed);\n\n\/*\u00a0Outputs:\u00a0::1\u00a0*\/\necho\u00a0$expanded;\n?>"}]},"inet_pton":{"name":"inet_pton","parameters":[{"type":"string","name":"$address","description":"A human readable IPv4 or IPv6 address."}],"return":{"type":"string","values":["FALSE"]},"short":"Converts a human readable IP address to its packed in_addr representation","examples":[{"title":"Example #1 inet_pton() Example","content":"<?php\n$in_addr\u00a0=\u00a0inet_pton('127.0.0.1');\n\u00a0\n$in6_addr\u00a0=\u00a0inet_pton('::1');\n?>"}]},"inflate_add":{"name":"inflate_add","parameters":[{"type":"resource","name":"$context","description":"A context created with inflate_init()."},{"type":"string","name":"$encoded_data","description":"A chunk of compressed data."},{"type":"int","name":"$flush_mode","default_value":"ZLIB_SYNC_FLUSH","description":"One of ZLIB_BLOCK, ZLIB_NO_FLUSH, ZLIB_PARTIAL_FLUSH, ZLIB_SYNC_FLUSH (default), ZLIB_FULL_FLUSH, ZLIB_FINISH. Normally you will want to set ZLIB_NO_FLUSH to maximize compression, and ZLIB_FINISH to terminate with the last chunk of data. See the \u00bb\u00a0zlib manual for a detailed description of these constants."}],"return":{"type":"string","values":["FALSE"]},"short":"Incrementally inflate encoded data","examples":[]},"inflate_get_read_len":{"name":"inflate_get_read_len","parameters":[{"type":"resource","name":"$resource","description":""}],"return":{"type":"int","values":["FALSE"]},"short":"Get number of bytes read so far","examples":[]},"inflate_get_status":{"name":"inflate_get_status","parameters":[{"type":"resource","name":"$resource","description":""}],"return":{"type":"int","values":["FALSE"]},"short":"Get decompression status","examples":[]},"inflate_init":{"name":"inflate_init","parameters":[{"type":"int","name":"$encoding","description":"One of the ZLIB_ENCODING_* constants."},{"type":"array","name":"$options","default_value":"array()","description":"An associative array which may contain the following elements:\n\nlevel\n\n\n\n The compression level in range -1..9; defaults to -1.\n\n\n\n\n\n memory\n\n\n\n The compression memory level in range 1..9; defaults to 8.\n\n\n\n\n\n window\n\n\n\n The zlib window size (logarithmic) in range 8..15; defaults to 15.\n\n\n\n\n\n strategy\n\n\n\n One of ZLIB_FILTERED, ZLIB_HUFFMAN_ONLY, ZLIB_RLE, ZLIB_FIXED or ZLIB_DEFAULT_STRATEGY (the default).\n\n\n\n\n\n dictionary\n\n\n\n A string or an array of strings of the preset dictionary (default: no preset dictionary)."}],"return":{"type":"resource","values":["FALSE"]},"short":"Initialize an incremental inflate context","examples":[]},"ini_alter":{"name":"ini_alter","parameters":[],"return":{"type":"","values":[]},"short":"Alias of ini_set()","examples":[]},"ini_get":{"name":"ini_get","parameters":[{"type":"string","name":"$varname","description":"The configuration option name."}],"return":{"type":"string","values":["FALSE"]},"short":"Gets the value of a configuration option","examples":[{"title":"Example #1 A few ini_get() examples","content":"<?php\n\/*\nOur\u00a0php.ini\u00a0contains\u00a0the\u00a0following\u00a0settings:\n\ndisplay_errors\u00a0=\u00a0On\nregister_globals\u00a0=\u00a0Off\npost_max_size\u00a0=\u00a08M\n*\/\n\necho\u00a0'display_errors\u00a0=\u00a0'\u00a0.\u00a0ini_get('display_errors')\u00a0.\u00a0\"\\n\";\necho\u00a0'register_globals\u00a0=\u00a0'\u00a0.\u00a0ini_get('register_globals')\u00a0.\u00a0\"\\n\";\necho\u00a0'post_max_size\u00a0=\u00a0'\u00a0.\u00a0ini_get('post_max_size')\u00a0.\u00a0\"\\n\";\necho\u00a0'post_max_size+1\u00a0=\u00a0'\u00a0.\u00a0(ini_get('post_max_size')+1)\u00a0.\u00a0\"\\n\";\necho\u00a0'post_max_size\u00a0in\u00a0bytes\u00a0=\u00a0'\u00a0.\u00a0return_bytes(ini_get('post_max_size'));\n\nfunction\u00a0return_bytes($val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0$val\u00a0=\u00a0trim($val);\n\u00a0\u00a0\u00a0\u00a0$last\u00a0=\u00a0strtolower($val[strlen($val)-1]);\n\u00a0\u00a0\u00a0\u00a0switch($last)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0The\u00a0'G'\u00a0modifier\u00a0is\u00a0available\u00a0since\u00a0PHP\u00a05.1.0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0'g':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$val\u00a0*=\u00a01024;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0'm':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$val\u00a0*=\u00a01024;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0'k':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$val\u00a0*=\u00a01024;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0return\u00a0$val;\n}\n\n?>"}]},"ini_get_all":{"name":"ini_get_all","parameters":[{"type":"string","name":"$extension","description":"An optional extension name. If set, the function return only options specific for that extension."},{"type":"bool","name":"$details","default_value":"TRUE","description":"Retrieve details settings or only the current value for each setting. Default is TRUE (retrieve details)."}],"return":{"type":"array","values":["TRUE","FALSE"]},"short":"Gets all configuration options","examples":[{"title":"Example #1 ini_get_all() examples","content":"<?php\nprint_r(ini_get_all(\"pcre\"));\nprint_r(ini_get_all());\n?>"},{"title":"Example #2 Disabling details","content":"<?php\nprint_r(ini_get_all(\"pcre\",\u00a0false));\u00a0\/\/\u00a0Added\u00a0in\u00a0PHP\u00a05.3.0\nprint_r(ini_get_all(null,\u00a0false));\u00a0\/\/\u00a0Added\u00a0in\u00a0PHP\u00a05.3.0\n?>"}]},"ini_restore":{"name":"ini_restore","parameters":[{"type":"string","name":"$varname","description":"The configuration option name."}],"return":{"type":"void","values":[]},"short":"Restores the value of a configuration option","examples":[{"title":"Example #1 ini_restore() example","content":"<?php\n$setting\u00a0=\u00a0'y2k_compliance';\n\necho\u00a0'Current\u00a0value\u00a0for\u00a0\\''\u00a0.\u00a0$setting\u00a0.\u00a0'\\':\u00a0'\u00a0.\u00a0ini_get($setting),\u00a0PHP_EOL;\n\nini_set($setting,\u00a0ini_get($setting)\u00a0?\u00a00\u00a0:\u00a01);\necho\u00a0'New\u00a0value\u00a0for\u00a0\\''\u00a0.\u00a0$setting\u00a0.\u00a0'\\':\u00a0'\u00a0.\u00a0ini_get($setting),\u00a0PHP_EOL;\n\nini_restore($setting);\necho\u00a0'Original\u00a0value\u00a0for\u00a0\\''\u00a0.\u00a0$setting\u00a0.\u00a0'\\':\u00a0'\u00a0.\u00a0ini_get($setting),\u00a0PHP_EOL;\n?>"}]},"ini_set":{"name":"ini_set","parameters":[{"type":"string","name":"$varname","description":"\n\nNot all the available options can be changed using ini_set(). There is a list of all available options in the appendix."},{"type":"string","name":"$newvalue","description":"The new value for the option."}],"return":{"type":"string","values":["FALSE"]},"short":"Sets the value of a configuration option","examples":[{"title":"Example #1 Setting an ini option","content":"<?php\necho\u00a0ini_get('display_errors');\n\nif\u00a0(!ini_get('display_errors'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0ini_set('display_errors',\u00a0'1');\n}\n\necho\u00a0ini_get('display_errors');\n?>"}]},"intdiv":{"name":"intdiv","parameters":[{"type":"int","name":"$dividend","description":"Number to be divided."},{"type":"int","name":"$divisor","description":"Number which divides the dividend."}],"return":{"type":"int","values":[]},"short":"Integer division","examples":[{"title":"Example #1 intdiv() example","content":"<?php\nvar_dump(intdiv(3,\u00a02));\nvar_dump(intdiv(-3,\u00a02));\nvar_dump(intdiv(3,\u00a0-2));\nvar_dump(intdiv(-3,\u00a0-2));\nvar_dump(intdiv(PHP_INT_MAX,\u00a0PHP_INT_MAX));\nvar_dump(intdiv(PHP_INT_MIN,\u00a0PHP_INT_MIN));\nvar_dump(intdiv(PHP_INT_MIN,\u00a0-1));\nvar_dump(intdiv(1,\u00a00));\n?>"}]},"interface_exists":{"name":"interface_exists","parameters":[{"type":"string","name":"$interface_name","description":"The interface name"},{"type":"bool","name":"$autoload","default_value":"TRUE","description":"Whether to call __autoload or not by default."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if the interface has been defined","examples":[{"title":"Example #1 interface_exists() example","content":"<?php\n\/\/\u00a0Check\u00a0the\u00a0interface\u00a0exists\u00a0before\u00a0trying\u00a0to\u00a0use\u00a0it\nif\u00a0(interface_exists('MyInterface'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0class\u00a0MyClass\u00a0implements\u00a0MyInterface\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Methods\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n?>"}]},"intval":{"name":"intval","parameters":[{"type":"mixed","name":"$var","description":"The scalar value being converted to an integer"},{"type":"int","name":"$base","default_value":"10","description":"The base for the conversion\n\nNote:\n If base is 0, the base used is determined by the format of var:\n\n if string includes a \"0x\" (or \"0X\") prefix, the base is taken as 16 (hex); otherwise,\n\n\n\n if string starts with \"0\", the base is taken as 8 (octal); otherwise,\n\n\n\n the base is taken as 10 (decimal)."}],"return":{"type":"int","values":[]},"short":"Get the integer value of a variable","examples":[{"title":"Example #1 intval() examples","content":"The following examples are based on a 32 bit system."}]},"ip2long":{"name":"ip2long","parameters":[{"type":"string","name":"$ip_address","description":"A standard format address."}],"return":{"type":"int","values":["FALSE"]},"short":"Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer","examples":[{"title":"Example #1 ip2long() Example","content":"<?php\n$ip\u00a0=\u00a0gethostbyname('www.example.com');\n$out\u00a0=\u00a0\"The\u00a0following\u00a0URLs\u00a0are\u00a0equivalent:<br\u00a0\/>\\n\";\n$out\u00a0.=\u00a0'http:\/\/www.example.com\/,\u00a0http:\/\/'\u00a0.\u00a0$ip\u00a0.\u00a0'\/,\u00a0and\u00a0http:\/\/'\u00a0.\u00a0sprintf(\"%u\",\u00a0ip2long($ip))\u00a0.\u00a0\"\/<br\u00a0\/>\\n\";\necho\u00a0$out;\n?>"},{"title":"Example #2 Displaying an IP address","content":"This second example shows how to print a converted address with the\n     printf() function:"}]},"iptcembed":{"name":"iptcembed","parameters":[{"type":"string","name":"$iptcdata","description":"The data to be written."},{"type":"string","name":"$jpeg_file_name","description":"Path to the JPEG image."},{"type":"int","name":"$spool","default_value":"0","description":"Spool flag. If the spool flag is less than 2 then the JPEG will be returned as a string. Otherwise the JPEG will be printed to STDOUT."}],"return":{"type":"mixed","values":["FALSE","TRUE"]},"short":"Embeds binary IPTC data into a JPEG image","examples":[{"title":"Example #1 Embedding IPTC data into a JPEG","content":"<?php\n\n\/\/\u00a0iptc_make_tag()\u00a0function\u00a0by\u00a0Thies\u00a0C.\u00a0Arntzen\nfunction\u00a0iptc_make_tag($rec,\u00a0$data,\u00a0$value)\n{\n\u00a0\u00a0\u00a0\u00a0$length\u00a0=\u00a0strlen($value);\n\u00a0\u00a0\u00a0\u00a0$retval\u00a0=\u00a0chr(0x1C)\u00a0.\u00a0chr($rec)\u00a0.\u00a0chr($data);\n\n\u00a0\u00a0\u00a0\u00a0if($length\u00a0<\u00a00x8000)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$retval\u00a0.=\u00a0chr($length\u00a0>>\u00a08)\u00a0.\u00a0\u00a0chr($length\u00a0&\u00a00xFF);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$retval\u00a0.=\u00a0chr(0x80)\u00a0.\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chr(0x04)\u00a0.\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chr(($length\u00a0>>\u00a024)\u00a0&\u00a00xFF)\u00a0.\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chr(($length\u00a0>>\u00a016)\u00a0&\u00a00xFF)\u00a0.\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chr(($length\u00a0>>\u00a08)\u00a0&\u00a00xFF)\u00a0.\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chr($length\u00a0&\u00a00xFF);\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0return\u00a0$retval\u00a0.\u00a0$value;\n}\n\n\/\/\u00a0Path\u00a0to\u00a0jpeg\u00a0file\n$path\u00a0=\u00a0'.\/phplogo.jpg';\n\n\/\/\u00a0Set\u00a0the\u00a0IPTC\u00a0tags\n$iptc\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'2#120'\u00a0=>\u00a0'Test\u00a0image',\n\u00a0\u00a0\u00a0\u00a0'2#116'\u00a0=>\u00a0'Copyright\u00a02008-2009,\u00a0The\u00a0PHP\u00a0Group'\n);\n\n\/\/\u00a0Convert\u00a0the\u00a0IPTC\u00a0tags\u00a0into\u00a0binary\u00a0code\n$data\u00a0=\u00a0'';\n\nforeach($iptc\u00a0as\u00a0$tag\u00a0=>\u00a0$string)\n{\n\u00a0\u00a0\u00a0\u00a0$tag\u00a0=\u00a0substr($tag,\u00a02);\n\u00a0\u00a0\u00a0\u00a0$data\u00a0.=\u00a0iptc_make_tag(2,\u00a0$tag,\u00a0$string);\n}\n\n\/\/\u00a0Embed\u00a0the\u00a0IPTC\u00a0data\n$content\u00a0=\u00a0iptcembed($data,\u00a0$path);\n\n\/\/\u00a0Write\u00a0the\u00a0new\u00a0image\u00a0data\u00a0out\u00a0to\u00a0the\u00a0file.\n$fp\u00a0=\u00a0fopen($path,\u00a0\"wb\");\nfwrite($fp,\u00a0$content);\nfclose($fp);\n?>"}]},"iptcparse":{"name":"iptcparse","parameters":[{"type":"string","name":"$iptcblock","description":"A binary IPTC block."}],"return":{"type":"array","values":["FALSE"]},"short":"Parse a binary IPTC block into single tags","examples":[{"title":"Example #1 iptcparse() used together with getimagesize()","content":"<?php\n$size\u00a0=\u00a0getimagesize('.\/test.jpg',\u00a0$info);\nif(isset($info['APP13']))\n{\n\u00a0\u00a0\u00a0\u00a0$iptc\u00a0=\u00a0iptcparse($info['APP13']);\n\u00a0\u00a0\u00a0\u00a0var_dump($iptc);\n}\n?>"}]},"is_a":{"name":"is_a","parameters":[{"type":"object","name":"$object","description":"The tested object"},{"type":"string","name":"$class_name","description":"The class name"},{"type":"bool","name":"$allow_string","default_value":"FALSE","description":"If this parameter set to FALSE, string class name as object is not allowed. This also prevents from calling autoloader if the class doesn't exist."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if the object is of this class or has this class as one of its parents","examples":[{"title":"Example #1 is_a() example","content":"<?php\n\/\/\u00a0define\u00a0a\u00a0class\nclass\u00a0WidgetFactory\n{\n\u00a0\u00a0var\u00a0$oink\u00a0=\u00a0'moo';\n}\n\n\/\/\u00a0create\u00a0a\u00a0new\u00a0object\n$WF\u00a0=\u00a0new\u00a0WidgetFactory();\n\nif\u00a0(is_a($WF,\u00a0'WidgetFactory'))\u00a0{\n\u00a0\u00a0echo\u00a0\"yes,\u00a0\\$WF\u00a0is\u00a0still\u00a0a\u00a0WidgetFactory\\n\";\n}\n?>"},{"title":"Example #2 Using the instanceof operator in PHP 5","content":"<?php\nif\u00a0($WF\u00a0instanceof\u00a0WidgetFactory)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Yes,\u00a0$WF\u00a0is\u00a0a\u00a0WidgetFactory';\n}\n?>"}]},"is_array":{"name":"is_array","parameters":[{"type":"mixed","name":"$var","description":"The variable being evaluated."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Finds whether a variable is an array","examples":[{"title":"Example #1 Check that variable is an array","content":"<?php\n$yes\u00a0=\u00a0array('this',\u00a0'is',\u00a0'an\u00a0array');\n\necho\u00a0is_array($yes)\u00a0?\u00a0'Array'\u00a0:\u00a0'not\u00a0an\u00a0Array';\necho\u00a0\"\\n\";\n\n$no\u00a0=\u00a0'this\u00a0is\u00a0a\u00a0string';\n\necho\u00a0is_array($no)\u00a0?\u00a0'Array'\u00a0:\u00a0'not\u00a0an\u00a0Array';\n?>"}]},"is_bool":{"name":"is_bool","parameters":[{"type":"mixed","name":"$var","description":"The variable being evaluated."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Finds out whether a variable is a boolean\n  ","examples":[{"title":"Example #1 is_bool() examples","content":"<?php\n$a\u00a0=\u00a0false;\n$b\u00a0=\u00a00;\n\n\/\/\u00a0Since\u00a0$a\u00a0is\u00a0a\u00a0boolean,\u00a0it\u00a0will\u00a0return\u00a0true\nif\u00a0(is_bool($a)\u00a0===\u00a0true)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Yes,\u00a0this\u00a0is\u00a0a\u00a0boolean\";\n}\n\n\/\/\u00a0Since\u00a0$b\u00a0is\u00a0not\u00a0a\u00a0boolean,\u00a0it\u00a0will\u00a0return\u00a0false\nif\u00a0(is_bool($b)\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"No,\u00a0this\u00a0is\u00a0not\u00a0a\u00a0boolean\";\n}\n?>"}]},"is_callable":{"name":"is_callable","parameters":[{"type":"mixed","name":"$var","description":"The value to check"},{"type":"bool","name":"$syntax_only","default_value":"FALSE","description":"If set to TRUE the function only verifies that name might be a function or method. It will only reject simple variables that are not strings, or an array that does not have a valid structure to be used as a callback. The valid ones are supposed to have only 2 entries, the first of which is an object or a string, and the second a string."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Verify that the contents of a variable can be called as a function\n  ","examples":[{"title":"Example #1 is_callable() example","content":"<?php\n\/\/\u00a0\u00a0How\u00a0to\u00a0check\u00a0a\u00a0variable\u00a0to\u00a0see\u00a0if\u00a0it\u00a0can\u00a0be\u00a0called\n\/\/\u00a0\u00a0as\u00a0a\u00a0function.\n\n\/\/\n\/\/\u00a0\u00a0Simple\u00a0variable\u00a0containing\u00a0a\u00a0function\n\/\/\n\nfunction\u00a0someFunction()\u00a0\n{\n}\n\n$functionVariable\u00a0=\u00a0'someFunction';\n\nvar_dump(is_callable($functionVariable,\u00a0false,\u00a0$callable_name));\u00a0\u00a0\/\/\u00a0bool(true)\n\necho\u00a0$callable_name,\u00a0\"\\n\";\u00a0\u00a0\/\/\u00a0someFunction\n\n\/\/\n\/\/\u00a0\u00a0Array\u00a0containing\u00a0a\u00a0method\n\/\/\n\nclass\u00a0someClass\u00a0{\n\n\u00a0\u00a0function\u00a0someMethod()\u00a0\n\u00a0\u00a0{\n\u00a0\u00a0}\n\n}\n\n$anObject\u00a0=\u00a0new\u00a0someClass();\n\n$methodVariable\u00a0=\u00a0array($anObject,\u00a0'someMethod');\n\nvar_dump(is_callable($methodVariable,\u00a0true,\u00a0$callable_name));\u00a0\u00a0\/\/\u00a0\u00a0bool(true)\n\necho\u00a0$callable_name,\u00a0\"\\n\";\u00a0\u00a0\/\/\u00a0\u00a0someClass::someMethod\n\n?>"},{"title":"Example #2 is_callable() and constructors","content":"As of PHP 5.3.0 is_callable() reports constructors as\n     not being callable. This affects PHP 5 style constructors\n     (__construct) as well as PHP 4 style constructors (i.e.\n     methods with the same name as the class). Formerly, both cases have been\n     considered callable."}]},"is_dir":{"name":"is_dir","parameters":[{"type":"string","name":"$filename","description":"Path to the file. If filename is a relative filename, it will be checked relative to the current working directory. If filename is a symbolic or hard link then the link will be resolved and checked. If you have enabled safe mode, or open_basedir further restrictions may apply."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Tells whether the filename is a directory","examples":[{"title":"Example #1 is_dir() example","content":"<?php\nvar_dump(is_dir('a_file.txt'));\nvar_dump(is_dir('bogus_dir\/abc'));\n\nvar_dump(is_dir('..'));\u00a0\/\/one\u00a0dir\u00a0up\n?>"}]},"is_double":{"name":"is_double","parameters":[],"return":{"type":"","values":[]},"short":"Alias of is_float()","examples":[]},"is_executable":{"name":"is_executable","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Tells whether the filename is executable","examples":[{"title":"Example #1 is_executable() example","content":"<?php\n\n$file\u00a0=\u00a0'\/home\/vincent\/somefile.sh';\n\nif\u00a0(is_executable($file))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$file.'\u00a0is\u00a0executable';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$file.'\u00a0is\u00a0not\u00a0executable';\n}\n\n?>"}]},"is_file":{"name":"is_file","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Tells whether the filename is a regular file","examples":[{"title":"Example #1 is_file() example","content":"<?php\nvar_dump(is_file('a_file.txt'))\u00a0.\u00a0\"\\n\";\nvar_dump(is_file('\/usr\/bin\/'))\u00a0.\u00a0\"\\n\";\n?>"}]},"is_finite":{"name":"is_finite","parameters":[{"type":"float","name":"$val","description":"The value to check"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Finds whether a value is a legal finite number","examples":[]},"is_float":{"name":"is_float","parameters":[{"type":"mixed","name":"$var","description":"The variable being evaluated."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Finds whether the type of a variable is float","examples":[{"title":"Example #1 is_float() example","content":"var_dump(is_float(27.25));\nvar_dump(is_float('abc'));\nvar_dump(is_float(23));\nvar_dump(is_float(23.5));\nvar_dump(is_float(1e7));\u00a0\u00a0\/\/Scientific\u00a0Notation\nvar_dump(is_float(true));\n?>"}]},"is_infinite":{"name":"is_infinite","parameters":[{"type":"float","name":"$val","description":"The value to check"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Finds whether a value is infinite","examples":[]},"is_int":{"name":"is_int","parameters":[{"type":"mixed","name":"$var","description":"The variable being evaluated."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Find whether the type of a variable is integer","examples":[{"title":"Example #1 is_int() example","content":"<?php\n$values\u00a0=\u00a0array(23,\u00a0\"23\",\u00a023.5,\u00a0\"23.5\",\u00a0null,\u00a0true,\u00a0false);\nforeach\u00a0($values\u00a0as\u00a0$value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"is_int(\";\n\u00a0\u00a0\u00a0\u00a0var_export($value);\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\")\u00a0=\u00a0\";\n\u00a0\u00a0\u00a0\u00a0var_dump(is_int($value));\n}\n?>"}]},"is_integer":{"name":"is_integer","parameters":[],"return":{"type":"","values":[]},"short":"Alias of is_int()","examples":[]},"is_iterable":{"name":"is_iterable","parameters":[{"type":"mixed","name":"$var","description":"The value to check"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Verify that the contents of a variable is an iterable value\n  ","examples":[{"title":"Example #1 is_iterable() examples","content":"<?php\n\nvar_dump(is_iterable([1,\u00a02,\u00a03]));\u00a0\u00a0\/\/\u00a0bool(true)\nvar_dump(is_iterable(new\u00a0ArrayIterator([1,\u00a02,\u00a03])));\u00a0\u00a0\/\/\u00a0bool(true)\nvar_dump(is_iterable((function\u00a0()\u00a0{\u00a0yield\u00a01;\u00a0})()));\u00a0\u00a0\/\/\u00a0bool(true)\nvar_dump(is_iterable(1));\u00a0\u00a0\/\/\u00a0bool(false)\nvar_dump(is_iterable(new\u00a0stdClass()));\u00a0\u00a0\/\/\u00a0bool(false)\n\n?>"}]},"is_link":{"name":"is_link","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Tells whether the filename is a symbolic link","examples":[{"title":"Example #1 Create and confirm if a file is a symbolic link","content":"<?php\n$link\u00a0=\u00a0'uploads';\n\nif\u00a0(is_link($link))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo(readlink($link));\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0symlink('uploads.php',\u00a0$link);\n}\n?>"}]},"is_long":{"name":"is_long","parameters":[],"return":{"type":"","values":[]},"short":"Alias of is_int()","examples":[]},"is_nan":{"name":"is_nan","parameters":[{"type":"float","name":"$val","description":"The value to check"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Finds whether a value is not a number","examples":[{"title":"Example #1 is_nan() example","content":"<?php\n\/\/\u00a0Invalid\u00a0calculation,\u00a0will\u00a0return\u00a0a\u00a0\n\/\/\u00a0NaN\u00a0value\n$nan\u00a0=\u00a0acos(8);\n\nvar_dump($nan,\u00a0is_nan($nan));\n?>"}]},"is_null":{"name":"is_null","parameters":[{"type":"mixed","name":"$var","description":"The variable being evaluated."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Finds whether a variable is NULL\n  ","examples":[{"title":"Example #1 is_null() example","content":"<?php\n\nerror_reporting(E_ALL);\n\n$foo\u00a0=\u00a0NULL;\nvar_dump(is_null($inexistent),\u00a0is_null($foo));\n\n?>"}]},"is_numeric":{"name":"is_numeric","parameters":[{"type":"mixed","name":"$var","description":"The variable being evaluated."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Finds whether a variable is a number or a numeric string\n  ","examples":[{"title":"Example #1 is_numeric() examples","content":"<?php\n$tests\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\"42\",\n\u00a0\u00a0\u00a0\u00a01337,\n\u00a0\u00a0\u00a0\u00a00x539,\n\u00a0\u00a0\u00a0\u00a002471,\n\u00a0\u00a0\u00a0\u00a00b10100111001,\n\u00a0\u00a0\u00a0\u00a01337e0,\n\u00a0\u00a0\u00a0\u00a0\"not\u00a0numeric\",\n\u00a0\u00a0\u00a0\u00a0array(),\n\u00a0\u00a0\u00a0\u00a09.1,\n\u00a0\u00a0\u00a0\u00a0null\n);\n\nforeach\u00a0($tests\u00a0as\u00a0$element)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(is_numeric($element))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0var_export($element,\u00a0true)\u00a0.\u00a0\"\u00a0is\u00a0numeric\",\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0var_export($element,\u00a0true)\u00a0.\u00a0\"\u00a0is\u00a0NOT\u00a0numeric\",\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"is_object":{"name":"is_object","parameters":[{"type":"mixed","name":"$var","description":"The variable being evaluated."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Finds whether a variable is an object","examples":[{"title":"Example #1 is_object() example","content":"<?php\n\/\/\u00a0Declare\u00a0a\u00a0simple\u00a0function\u00a0to\u00a0return\u00a0an\u00a0\n\/\/\u00a0array\u00a0from\u00a0our\u00a0object\nfunction\u00a0get_students($obj)\n{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(!is_object($obj))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0return\u00a0$obj->students;\n}\n\n\/\/\u00a0Declare\u00a0a\u00a0new\u00a0class\u00a0instance\u00a0and\u00a0fill\u00a0up\u00a0\n\/\/\u00a0some\u00a0values\n$obj\u00a0=\u00a0new\u00a0stdClass();\n$obj->students\u00a0=\u00a0array('Kalle',\u00a0'Ross',\u00a0'Felipe');\n\nvar_dump(get_students(null));\nvar_dump(get_students($obj));\n?>"}]},"is_readable":{"name":"is_readable","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Tells whether a file exists and is readable","examples":[{"title":"Example #1 is_readable() example","content":"<?php\n$filename\u00a0=\u00a0'test.txt';\nif\u00a0(is_readable($filename))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'The\u00a0file\u00a0is\u00a0readable';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'The\u00a0file\u00a0is\u00a0not\u00a0readable';\n}\n?>"}]},"is_real":{"name":"is_real","parameters":[],"return":{"type":"","values":[]},"short":"Alias of is_float()","examples":[]},"is_resource":{"name":"is_resource","parameters":[{"type":"mixed","name":"$var","description":"The variable being evaluated."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Finds whether a variable is a resource\n  ","examples":[{"title":"Example #1 is_resource() example","content":"<?php\n\n$db_link\u00a0=\u00a0@mysql_connect('localhost',\u00a0'mysql_user',\u00a0'mysql_pass');\nif\u00a0(!is_resource($db_link))\u00a0{\n\u00a0\u00a0\u00a0\u00a0die('Can\\'t\u00a0connect\u00a0:\u00a0'\u00a0.\u00a0mysql_error());\n}\n\n?>"}]},"is_scalar":{"name":"is_scalar","parameters":[{"type":"mixed","name":"$var","description":"The variable being evaluated."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Finds whether a variable is a scalar\n  ","examples":[{"title":"Example #1 is_scalar() example","content":"<?php\nfunction\u00a0show_var($var)\u00a0\n{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(is_scalar($var))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$var;\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($var);\n\u00a0\u00a0\u00a0\u00a0}\n}\n$pi\u00a0=\u00a03.1416;\n$proteins\u00a0=\u00a0array(\"hemoglobin\",\u00a0\"cytochrome\u00a0c\u00a0oxidase\",\u00a0\"ferredoxin\");\n\nshow_var($pi);\nshow_var($proteins)\n\n?>"}]},"is_string":{"name":"is_string","parameters":[{"type":"mixed","name":"$var","description":"The variable being evaluated."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Find whether the type of a variable is string","examples":[{"title":"Example #1 is_string() example","content":"<?php\n$values\u00a0=\u00a0array(false,\u00a0true,\u00a0null,\u00a0'abc',\u00a0'23',\u00a023,\u00a0'23.5',\u00a023.5,\u00a0'',\u00a0'\u00a0',\u00a0'0',\u00a00);\nforeach\u00a0($values\u00a0as\u00a0$value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"is_string(\";\n\u00a0\u00a0\u00a0\u00a0var_export($value);\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\")\u00a0=\u00a0\";\n\u00a0\u00a0\u00a0\u00a0echo\u00a0var_dump(is_string($value));\n}\n?>"}]},"is_subclass_of":{"name":"is_subclass_of","parameters":[{"type":"mixed","name":"$object","description":"A class name or an object instance. No error is generated if the class does not exist."},{"type":"string","name":"$class_name","description":"The class name"},{"type":"bool","name":"$allow_string","default_value":"TRUE","description":"If this parameter set to false, string class name as object is not allowed. This also prevents from calling autoloader if the class doesn't exist."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if the object has this class as one of its parents or implements it","examples":[{"title":"Example #1 is_subclass_of() example","content":"<?php\n\/\/\u00a0define\u00a0a\u00a0class\nclass\u00a0WidgetFactory\n{\n\u00a0\u00a0var\u00a0$oink\u00a0=\u00a0'moo';\n}\n\n\/\/\u00a0define\u00a0a\u00a0child\u00a0class\nclass\u00a0WidgetFactory_Child\u00a0extends\u00a0WidgetFactory\n{\n\u00a0\u00a0var\u00a0$oink\u00a0=\u00a0'oink';\n}\n\n\/\/\u00a0create\u00a0a\u00a0new\u00a0object\n$WF\u00a0=\u00a0new\u00a0WidgetFactory();\n$WFC\u00a0=\u00a0new\u00a0WidgetFactory_Child();\n\nif\u00a0(is_subclass_of($WFC,\u00a0'WidgetFactory'))\u00a0{\n\u00a0\u00a0echo\u00a0\"yes,\u00a0\\$WFC\u00a0is\u00a0a\u00a0subclass\u00a0of\u00a0WidgetFactory\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0echo\u00a0\"no,\u00a0\\$WFC\u00a0is\u00a0not\u00a0a\u00a0subclass\u00a0of\u00a0WidgetFactory\\n\";\n}\n\n\nif\u00a0(is_subclass_of($WF,\u00a0'WidgetFactory'))\u00a0{\n\u00a0\u00a0echo\u00a0\"yes,\u00a0\\$WF\u00a0is\u00a0a\u00a0subclass\u00a0of\u00a0WidgetFactory\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0echo\u00a0\"no,\u00a0\\$WF\u00a0is\u00a0not\u00a0a\u00a0subclass\u00a0of\u00a0WidgetFactory\\n\";\n}\n\n\n\/\/\u00a0usable\u00a0only\u00a0since\u00a0PHP\u00a05.0.3\nif\u00a0(is_subclass_of('WidgetFactory_Child',\u00a0'WidgetFactory'))\u00a0{\n\u00a0\u00a0echo\u00a0\"yes,\u00a0WidgetFactory_Child\u00a0is\u00a0a\u00a0subclass\u00a0of\u00a0WidgetFactory\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0echo\u00a0\"no,\u00a0WidgetFactory_Child\u00a0is\u00a0not\u00a0a\u00a0subclass\u00a0of\u00a0WidgetFactory\\n\";\n}\n?>"},{"title":"Example #2 is_subclass_of() using interface example","content":"<?php\n\/\/\u00a0Define\u00a0the\u00a0Interface\ninterface\u00a0MyInterface\n{\n\u00a0\u00a0public\u00a0function\u00a0MyFunction();\n}\n\n\/\/\u00a0Define\u00a0the\u00a0class\u00a0implementation\u00a0of\u00a0the\u00a0interface\nclass\u00a0MyClass\u00a0implements\u00a0MyInterface\n{\n\u00a0\u00a0public\u00a0function\u00a0MyFunction()\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0\"MyClass\u00a0Implements\u00a0MyInterface!\";\n\u00a0\u00a0}\n}\n\n\/\/\u00a0Instantiate\u00a0the\u00a0object\n$my_object\u00a0=\u00a0new\u00a0MyClass;\n\n\/\/\u00a0Works\u00a0since\u00a05.3.7\n\n\/\/\u00a0Test\u00a0using\u00a0the\u00a0object\u00a0instance\u00a0of\u00a0the\u00a0class\nif\u00a0(is_subclass_of($my_object,\u00a0'MyInterface'))\u00a0{\n\u00a0\u00a0echo\u00a0\"Yes,\u00a0\\$my_object\u00a0is\u00a0a\u00a0subclass\u00a0of\u00a0MyInterface\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0echo\u00a0\"No,\u00a0\\$my_object\u00a0is\u00a0not\u00a0a\u00a0subclass\u00a0of\u00a0MyInterface\\n\";\n}\n\n\/\/\u00a0Test\u00a0using\u00a0a\u00a0string\u00a0of\u00a0the\u00a0class\u00a0name\nif\u00a0(is_subclass_of('MyClass',\u00a0'MyInterface'))\u00a0{\n\u00a0\u00a0echo\u00a0\"Yes,\u00a0MyClass\u00a0is\u00a0a\u00a0subclass\u00a0of\u00a0MyInterface\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0echo\u00a0\"No,\u00a0MyClass\u00a0is\u00a0not\u00a0a\u00a0subclass\u00a0of\u00a0MyInterface\\n\";\n}\n?>"}]},"is_uploaded_file":{"name":"is_uploaded_file","parameters":[{"type":"string","name":"$filename","description":"The filename being checked."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Tells whether the file was uploaded via HTTP POST","examples":[{"title":"Example #1 is_uploaded_file() example","content":"<?php\n\nif\u00a0(is_uploaded_file($_FILES['userfile']['tmp_name']))\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"File\u00a0\".\u00a0$_FILES['userfile']['name']\u00a0.\"\u00a0uploaded\u00a0successfully.\\n\";\n\u00a0\u00a0\u00a0echo\u00a0\"Displaying\u00a0contents\\n\";\n\u00a0\u00a0\u00a0readfile($_FILES['userfile']['tmp_name']);\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"Possible\u00a0file\u00a0upload\u00a0attack:\u00a0\";\n\u00a0\u00a0\u00a0echo\u00a0\"filename\u00a0'\".\u00a0$_FILES['userfile']['tmp_name']\u00a0.\u00a0\"'.\";\n}\n\n?>"}]},"is_writable":{"name":"is_writable","parameters":[{"type":"string","name":"$filename","description":"The filename being checked."}],"return":{"type":"bool","values":["TRUE"]},"short":"Tells whether the filename is writable","examples":[{"title":"Example #1 is_writable() example","content":"<?php\n$filename\u00a0=\u00a0'test.txt';\nif\u00a0(is_writable($filename))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'The\u00a0file\u00a0is\u00a0writable';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'The\u00a0file\u00a0is\u00a0not\u00a0writable';\n}\n?>"}]},"is_writeable":{"name":"is_writeable","parameters":[],"return":{"type":"","values":[]},"short":"Alias of is_writable()","examples":[]},"iterator_apply":{"name":"iterator_apply","parameters":[{"type":"Traversable","name":"$iterator","description":"The class to iterate over."},{"type":"callable","name":"$function","description":"The callback function to call on every element.\n\nNote:\n The function must return TRUE in order to continue iterating over the iterator."},{"type":"array","name":"$args","description":"Arguments to pass to the callback function."}],"return":{"type":"int","values":[]},"short":"Call a function for every element in an iterator","examples":[{"title":"Example #1 iterator_apply() example","content":"<?php\nfunction\u00a0print_caps(Iterator\u00a0$iterator)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0strtoupper($iterator->current())\u00a0.\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0return\u00a0TRUE;\n}\n\n$it\u00a0=\u00a0new\u00a0ArrayIterator(array(\"Apples\",\u00a0\"Bananas\",\u00a0\"Cherries\"));\niterator_apply($it,\u00a0\"print_caps\",\u00a0array($it));\n?>"}]},"iterator_count":{"name":"iterator_count","parameters":[{"type":"Traversable","name":"$iterator","description":"The iterator being counted."}],"return":{"type":"int","values":[]},"short":"Count the elements in an iterator","examples":[{"title":"Example #1 iterator_count() example","content":"<?php\n$iterator\u00a0=\u00a0new\u00a0ArrayIterator(array('recipe'=>'pancakes',\u00a0'egg',\u00a0'milk',\u00a0'flour'));\nvar_dump(iterator_count($iterator));\n?>"},{"title":"Example #2 iterator_count() modifies position","content":"<?php\n$iterator\u00a0=\u00a0new\u00a0ArrayIterator(['one',\u00a0'two',\u00a0'three']);\nvar_dump($iterator->current());\nvar_dump(iterator_count($iterator));\nvar_dump($iterator->current());\n?>"},{"title":"Example #3 iterator_count() in foreach loops","content":"<?php\n$iterator\u00a0=\u00a0new\u00a0ArrayIterator(['one',\u00a0'two',\u00a0'three']);\nforeach\u00a0($iterator\u00a0as\u00a0$key\u00a0=>\u00a0$value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key:\u00a0$value\u00a0(\",\u00a0iterator_count($iterator),\u00a0\")\\n\";\n}?>"}]},"iterator_to_array":{"name":"iterator_to_array","parameters":[{"type":"Traversable","name":"$iterator","description":"The iterator being copied."},{"type":"bool","name":"$use_keys","default_value":"TRUE","description":"Whether to use the iterator element keys as index.\n\nIn PHP 5.5 and later, if a key is an array or object, a warning will be generated. NULL keys will be converted to an empty string, float keys will be truncated to their integer counterpart, resource keys will generate a warning and be converted to their resource ID, and boolean keys will be converted to integers.\n\nNote:\n If this parameter is not set or set to TRUE, duplicate keys will be overwritten. The last value with a given key will be in the returned array. Set this paramater to FALSE to get all the values in any case."}],"return":{"type":"array","values":[]},"short":"Copy the iterator into an array","examples":[{"title":"Example #1 iterator_to_array() example","content":"<?php\n$iterator\u00a0=\u00a0new\u00a0ArrayIterator(array('recipe'=>'pancakes',\u00a0'egg',\u00a0'milk',\u00a0'flour'));\nvar_dump(iterator_to_array($iterator,\u00a0true));\nvar_dump(iterator_to_array($iterator,\u00a0false));\n?>"}]},"jddayofweek":{"name":"jddayofweek","parameters":[{"type":"int","name":"$julianday","description":"A julian day number as integer"},{"type":"int","name":"$mode","default_value":"CAL_DOW_DAYNO","description":"Calendar week modes\n Mode Meaning 0 (Default)\n Return the day number as an int (0=Sunday, 1=Monday, etc)\n 1\n Returns string containing the day of week (English-Gregorian)\n 2\n Return a string containing the abbreviated day of week (English-Gregorian)"}],"return":{"type":"mixed","values":[]},"short":"Returns the day of the week","examples":[]},"jdmonthname":{"name":"jdmonthname","parameters":[{"type":"int","name":"$julianday"},{"type":"int","name":"$mode","description":"The calendar mode (see table above)."}],"return":{"type":"string","values":[]},"short":"Returns a month name","examples":[]},"jdtofrench":{"name":"jdtofrench","parameters":[{"type":"int","name":"$juliandaycount"}],"return":{"type":"string","values":[]},"short":"Converts a Julian Day Count to the French Republican Calendar","examples":[]},"jdtogregorian":{"name":"jdtogregorian","parameters":[{"type":"int","name":"$julianday","description":"A julian day number as integer"}],"return":{"type":"string","values":[]},"short":"Converts Julian Day Count to Gregorian date","examples":[]},"jdtojewish":{"name":"jdtojewish","parameters":[{"type":"int","name":"$juliandaycount"},{"type":"bool","name":"$hebrew","default_value":"FALSE","description":"If the hebrew parameter is set to TRUE, the fl parameter is used for Hebrew, ISO-8859-8 encoded string based, output format."},{"type":"int","name":"$fl","default_value":"0","description":"A bitmask which may consist of CAL_JEWISH_ADD_ALAFIM_GERESH, CAL_JEWISH_ADD_ALAFIM and CAL_JEWISH_ADD_GERESHAYIM."}],"return":{"type":"string","values":[]},"short":"Converts a Julian day count to a Jewish calendar date","examples":[{"title":"Example #1 jdtojewish() Example","content":"<?php\n$jd\u00a0=\u00a0gregoriantojd(10,\u00a08,\u00a02002);\necho\u00a0jdtojewish($jd,\u00a0true),\u00a0PHP_EOL,\n\u00a0\u00a0\u00a0\u00a0\u00a0jdtojewish($jd,\u00a0true,\u00a0CAL_JEWISH_ADD_GERESHAYIM),\u00a0PHP_EOL,\n\u00a0\u00a0\u00a0\u00a0\u00a0jdtojewish($jd,\u00a0true,\u00a0CAL_JEWISH_ADD_ALAFIM),\u00a0PHP_EOL,\n\u00a0\u00a0\u00a0\u00a0\u00a0jdtojewish($jd,\u00a0true,CAL_JEWISH_ADD_ALAFIM_GERESH),\u00a0PHP_EOL;\n?>"}]},"jdtojulian":{"name":"jdtojulian","parameters":[{"type":"int","name":"$julianday","description":"A julian day number as integer"}],"return":{"type":"string","values":[]},"short":"Converts a Julian Day Count to a Julian Calendar Date","examples":[]},"jdtounix":{"name":"jdtounix","parameters":[{"type":"int","name":"$jday","description":"A julian day number between 2440588 and 2465342."}],"return":{"type":"int","values":[]},"short":"Convert Julian Day to Unix timestamp","examples":[]},"jewishtojd":{"name":"jewishtojd","parameters":[{"type":"int","name":"$month","description":"The month as a number from 1 to 13, where 1 means Tishri, 13 means Elul, and 6 and 7 mean Adar in regular years, but Adar I and Adar II, respectively, in leap years."},{"type":"int","name":"$day","description":"The day as a number from 1 to 30. If the month has only 29 days, the first day of the following month is assumed."},{"type":"int","name":"$year","description":"The year as a number between 1 and 9999"}],"return":{"type":"int","values":[]},"short":"Converts a date in the Jewish Calendar to Julian Day Count","examples":[]},"join":{"name":"join","parameters":[],"return":{"type":"","values":[]},"short":"Alias of implode()","examples":[]},"json_decode":{"name":"json_decode","parameters":[{"type":"string","name":"$json","description":"The json string being decoded.\n\nThis function only works with UTF-8 encoded strings.\n\nNote:\n PHP implements a superset of JSON as specified in the original \u00bb\u00a0RFC 7159."},{"type":"bool","name":"$assoc","default_value":"FALSE","description":"When TRUE, returned objects will be converted into associative arrays."},{"type":"int","name":"$depth","default_value":"512","description":"User specified recursion depth."},{"type":"int","name":"$options","default_value":"0","description":"Bitmask of JSON decode options. Currently there are two supported options. The first is JSON_BIGINT_AS_STRING that allows casting big integers to string instead of floats which is the default. The second option is JSON_OBJECT_AS_ARRAY that has the same effect as setting assoc to TRUE."}],"return":{"type":"mixed","values":["TRUE","FALSE","NULL"]},"short":"Decodes a JSON string","examples":[{"title":"Example #1 json_decode() examples","content":"<?php\n$json\u00a0=\u00a0'{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}';\n\nvar_dump(json_decode($json));\nvar_dump(json_decode($json,\u00a0true));\n\n?>"},{"title":"Example #2 Accessing invalid object properties","content":"Accessing elements within an object that contain characters not\n     permitted under PHP's naming convention (e.g. the hyphen) can be\n     accomplished by encapsulating the element name within braces and the apostrophe."},{"title":"Example #3 common mistakes using json_decode()","content":"<?php\n\n\/\/\u00a0the\u00a0following\u00a0strings\u00a0are\u00a0valid\u00a0JavaScript\u00a0but\u00a0not\u00a0valid\u00a0JSON\n\n\/\/\u00a0the\u00a0name\u00a0and\u00a0value\u00a0must\u00a0be\u00a0enclosed\u00a0in\u00a0double\u00a0quotes\n\/\/\u00a0single\u00a0quotes\u00a0are\u00a0not\u00a0valid\u00a0\n$bad_json\u00a0=\u00a0\"{\u00a0'bar':\u00a0'baz'\u00a0}\";\njson_decode($bad_json);\u00a0\/\/\u00a0null\n\n\/\/\u00a0the\u00a0name\u00a0must\u00a0be\u00a0enclosed\u00a0in\u00a0double\u00a0quotes\n$bad_json\u00a0=\u00a0'{\u00a0bar:\u00a0\"baz\"\u00a0}';\njson_decode($bad_json);\u00a0\/\/\u00a0null\n\n\/\/\u00a0trailing\u00a0commas\u00a0are\u00a0not\u00a0allowed\n$bad_json\u00a0=\u00a0'{\u00a0bar:\u00a0\"baz\",\u00a0}';\njson_decode($bad_json);\u00a0\/\/\u00a0null\n\n?>"},{"title":"Example #4 depth errors","content":"<?php\n\/\/\u00a0Encode\u00a0the\u00a0data.\n$json\u00a0=\u00a0json_encode(\n\u00a0\u00a0\u00a0\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'English'\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'One',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'January'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'French'\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Une',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Janvier'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n\u00a0\u00a0\u00a0\u00a0)\n);\n\n\/\/\u00a0Define\u00a0the\u00a0errors.\n$constants\u00a0=\u00a0get_defined_constants(true);\n$json_errors\u00a0=\u00a0array();\nforeach\u00a0($constants[\"json\"]\u00a0as\u00a0$name\u00a0=>\u00a0$value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(!strncmp($name,\u00a0\"JSON_ERROR_\",\u00a011))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$json_errors[$value]\u00a0=\u00a0$name;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/\u00a0Show\u00a0the\u00a0errors\u00a0for\u00a0different\u00a0depths.\nforeach\u00a0(range(4,\u00a03,\u00a0-1)\u00a0as\u00a0$depth)\u00a0{\n\u00a0\u00a0\u00a0\u00a0var_dump(json_decode($json,\u00a0true,\u00a0$depth));\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Last\u00a0error:\u00a0',\u00a0$json_errors[json_last_error()],\u00a0PHP_EOL,\u00a0PHP_EOL;\n}\n?>"},{"title":"Example #5 json_decode() of large integers","content":"<?php\n$json\u00a0=\u00a0'{\"number\":\u00a012345678901234567890}';\n\nvar_dump(json_decode($json));\nvar_dump(json_decode($json,\u00a0false,\u00a0512,\u00a0JSON_BIGINT_AS_STRING));\n\n?>"}]},"json_encode":{"name":"json_encode","parameters":[{"type":"mixed","name":"$value","description":"The value being encoded. Can be any type except a resource.\n\nAll string data must be UTF-8 encoded.\n\nNote:\n PHP implements a superset of JSON as specified in the original \u00bb\u00a0RFC 7159."},{"type":"int","name":"$options","default_value":"0","description":"Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT, JSON_PRESERVE_ZERO_FRACTION, JSON_UNESCAPED_UNICODE, JSON_PARTIAL_OUTPUT_ON_ERROR. The behaviour of these constants is described on the JSON constants page."},{"type":"int","name":"$depth","default_value":"512","description":"Set the maximum depth. Must be greater than zero."}],"return":{"type":"string","values":["FALSE"]},"short":"Returns the JSON representation of a value","examples":[{"title":"Example #1 A json_encode() example","content":"<?php\n$arr\u00a0=\u00a0array('a'\u00a0=>\u00a01,\u00a0'b'\u00a0=>\u00a02,\u00a0'c'\u00a0=>\u00a03,\u00a0'd'\u00a0=>\u00a04,\u00a0'e'\u00a0=>\u00a05);\n\necho\u00a0json_encode($arr);\n?>"},{"title":"Example #2 \n     A json_encode() example showing some options in use\n    ","content":"<?php\n$a\u00a0=\u00a0array('<foo>',\"'bar'\",'\"baz\"','&blong&',\u00a0\"\\xc3\\xa9\");\n\necho\u00a0\"Normal:\u00a0\",\u00a0\u00a0json_encode($a),\u00a0\"\\n\";\necho\u00a0\"Tags:\u00a0\",\u00a0\u00a0\u00a0\u00a0json_encode($a,\u00a0JSON_HEX_TAG),\u00a0\"\\n\";\necho\u00a0\"Apos:\u00a0\",\u00a0\u00a0\u00a0\u00a0json_encode($a,\u00a0JSON_HEX_APOS),\u00a0\"\\n\";\necho\u00a0\"Quot:\u00a0\",\u00a0\u00a0\u00a0\u00a0json_encode($a,\u00a0JSON_HEX_QUOT),\u00a0\"\\n\";\necho\u00a0\"Amp:\u00a0\",\u00a0\u00a0\u00a0\u00a0\u00a0json_encode($a,\u00a0JSON_HEX_AMP),\u00a0\"\\n\";\necho\u00a0\"Unicode:\u00a0\",\u00a0json_encode($a,\u00a0JSON_UNESCAPED_UNICODE),\u00a0\"\\n\";\necho\u00a0\"All:\u00a0\",\u00a0\u00a0\u00a0\u00a0\u00a0json_encode($a,\u00a0JSON_HEX_TAG\u00a0|\u00a0JSON_HEX_APOS\u00a0|\u00a0JSON_HEX_QUOT\u00a0|\u00a0JSON_HEX_AMP\u00a0|\u00a0JSON_UNESCAPED_UNICODE),\u00a0\"\\n\\n\";\n\n$b\u00a0=\u00a0array();\n\necho\u00a0\"Empty\u00a0array\u00a0output\u00a0as\u00a0array:\u00a0\",\u00a0json_encode($b),\u00a0\"\\n\";\necho\u00a0\"Empty\u00a0array\u00a0output\u00a0as\u00a0object:\u00a0\",\u00a0json_encode($b,\u00a0JSON_FORCE_OBJECT),\u00a0\"\\n\\n\";\n\n$c\u00a0=\u00a0array(array(1,2,3));\n\necho\u00a0\"Non-associative\u00a0array\u00a0output\u00a0as\u00a0array:\u00a0\",\u00a0json_encode($c),\u00a0\"\\n\";\necho\u00a0\"Non-associative\u00a0array\u00a0output\u00a0as\u00a0object:\u00a0\",\u00a0json_encode($c,\u00a0JSON_FORCE_OBJECT),\u00a0\"\\n\\n\";\n\n$d\u00a0=\u00a0array('foo'\u00a0=>\u00a0'bar',\u00a0'baz'\u00a0=>\u00a0'long');\n\necho\u00a0\"Associative\u00a0array\u00a0always\u00a0output\u00a0as\u00a0object:\u00a0\",\u00a0json_encode($d),\u00a0\"\\n\";\necho\u00a0\"Associative\u00a0array\u00a0always\u00a0output\u00a0as\u00a0object:\u00a0\",\u00a0json_encode($d,\u00a0JSON_FORCE_OBJECT),\u00a0\"\\n\\n\";\n?>"},{"title":"Example #3 JSON_NUMERIC_CHECK option example","content":"<?php\necho\u00a0\"Strings\u00a0representing\u00a0numbers\u00a0automatically\u00a0turned\u00a0into\u00a0numbers\".PHP_EOL;\n$numbers\u00a0=\u00a0array('+123123',\u00a0'-123123',\u00a0'1.2e3',\u00a0'0.00001');\nvar_dump(\n\u00a0$numbers,\n\u00a0json_encode($numbers,\u00a0JSON_NUMERIC_CHECK)\n);\necho\u00a0\"Strings\u00a0containing\u00a0improperly\u00a0formatted\u00a0numbers\".PHP_EOL;\n$strings\u00a0=\u00a0array('+a33123456789',\u00a0'a123');\nvar_dump(\n\u00a0$strings,\n\u00a0json_encode($strings,\u00a0JSON_NUMERIC_CHECK)\n);\n?>"},{"title":"Example #4 Sequential versus non-sequential array example","content":"<?php\necho\u00a0\"Sequential\u00a0array\".PHP_EOL;\n$sequential\u00a0=\u00a0array(\"foo\",\u00a0\"bar\",\u00a0\"baz\",\u00a0\"blong\");\nvar_dump(\n\u00a0$sequential,\n\u00a0json_encode($sequential)\n);\n\necho\u00a0PHP_EOL.\"Non-sequential\u00a0array\".PHP_EOL;\n$nonsequential\u00a0=\u00a0array(1=>\"foo\",\u00a02=>\"bar\",\u00a03=>\"baz\",\u00a04=>\"blong\");\nvar_dump(\n\u00a0$nonsequential,\n\u00a0json_encode($nonsequential)\n);\n\necho\u00a0PHP_EOL.\"Sequential\u00a0array\u00a0with\u00a0one\u00a0key\u00a0unset\".PHP_EOL;\nunset($sequential[1]);\nvar_dump(\n\u00a0$sequential,\n\u00a0json_encode($sequential)\n);\n?>"},{"title":"Example #5 JSON_PRESERVE_ZERO_FRACTION option example","content":"<?php\nvar_dump(json_encode(12.0,\u00a0JSON_PRESERVE_ZERO_FRACTION));\nvar_dump(json_encode(12.0));\n?>"}]},"json_last_error":{"name":"json_last_error","parameters":[],"return":{"type":"int","values":[]},"short":"Returns the last error occurred","examples":[{"title":"Example #1 json_last_error() example","content":"<?php\n\/\/\u00a0A\u00a0valid\u00a0json\u00a0string\n$json[]\u00a0=\u00a0'{\"Organization\":\u00a0\"PHP\u00a0Documentation\u00a0Team\"}';\n\n\/\/\u00a0An\u00a0invalid\u00a0json\u00a0string\u00a0which\u00a0will\u00a0cause\u00a0an\u00a0syntax\u00a0\n\/\/\u00a0error,\u00a0in\u00a0this\u00a0case\u00a0we\u00a0used\u00a0'\u00a0instead\u00a0of\u00a0\"\u00a0for\u00a0quotation\n$json[]\u00a0=\u00a0\"{'Organization':\u00a0'PHP\u00a0Documentation\u00a0Team'}\";\n\n\nforeach\u00a0($json\u00a0as\u00a0$string)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Decoding:\u00a0'\u00a0.\u00a0$string;\n\u00a0\u00a0\u00a0\u00a0json_decode($string);\n\n\u00a0\u00a0\u00a0\u00a0switch\u00a0(json_last_error())\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_NONE:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0No\u00a0errors';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_DEPTH:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Maximum\u00a0stack\u00a0depth\u00a0exceeded';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_STATE_MISMATCH:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Underflow\u00a0or\u00a0the\u00a0modes\u00a0mismatch';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_CTRL_CHAR:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Unexpected\u00a0control\u00a0character\u00a0found';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_SYNTAX:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Syntax\u00a0error,\u00a0malformed\u00a0JSON';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0JSON_ERROR_UTF8:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Malformed\u00a0UTF-8\u00a0characters,\u00a0possibly\u00a0incorrectly\u00a0encoded';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'\u00a0-\u00a0Unknown\u00a0error';\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0echo\u00a0PHP_EOL;\n}\n?>"},{"title":"Example #2 json_last_error() with json_encode()","content":"<?php\n\/\/\u00a0An\u00a0invalid\u00a0UTF8\u00a0sequence\n$text\u00a0=\u00a0\"\\xB1\\x31\";\n\n$json\u00a0\u00a0=\u00a0json_encode($text);\n$error\u00a0=\u00a0json_last_error();\n\nvar_dump($json,\u00a0$error\u00a0===\u00a0JSON_ERROR_UTF8);\n?>"}]},"json_last_error_msg":{"name":"json_last_error_msg","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Returns the error string of the last json_encode() or json_decode() call","examples":[]},"juliantojd":{"name":"juliantojd","parameters":[{"type":"int","name":"$month","description":"The month as a number from 1 (for January) to 12 (for December)"},{"type":"int","name":"$day","description":"The day as a number from 1 to 31"},{"type":"int","name":"$year","description":"The year as a number between -4713 and 9999"}],"return":{"type":"int","values":[]},"short":"Converts a Julian Calendar date to Julian Day Count","examples":[]},"key":{"name":"key","parameters":[{"type":"array","name":"$array","description":"The array."}],"return":{"type":"mixed","values":["NULL"]},"short":"Fetch a key from an array","examples":[{"title":"Example #1 key() example","content":"<?php\n$array\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'fruit1'\u00a0=>\u00a0'apple',\n\u00a0\u00a0\u00a0\u00a0'fruit2'\u00a0=>\u00a0'orange',\n\u00a0\u00a0\u00a0\u00a0'fruit3'\u00a0=>\u00a0'grape',\n\u00a0\u00a0\u00a0\u00a0'fruit4'\u00a0=>\u00a0'apple',\n\u00a0\u00a0\u00a0\u00a0'fruit5'\u00a0=>\u00a0'apple');\n\n\/\/\u00a0this\u00a0cycle\u00a0echoes\u00a0all\u00a0associative\u00a0array\n\/\/\u00a0key\u00a0where\u00a0value\u00a0equals\u00a0\"apple\"\nwhile\u00a0($fruit_name\u00a0=\u00a0current($array))\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0($fruit_name\u00a0==\u00a0'apple')\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0key($array).'<br\u00a0\/>';\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0next($array);\n}\n?>"}]},"key_exists":{"name":"key_exists","parameters":[],"return":{"type":"","values":[]},"short":"Alias of array_key_exists()","examples":[]},"krsort":{"name":"krsort","parameters":[{"type":"int","name":"$sort_flags","default_value":"SORT_REGULAR","description":"You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array by key in reverse order","examples":[{"title":"Example #1 krsort() example","content":"<?php\n$fruits\u00a0=\u00a0array(\"d\"=>\"lemon\",\u00a0\"a\"=>\"orange\",\u00a0\"b\"=>\"banana\",\u00a0\"c\"=>\"apple\");\nkrsort($fruits);\nforeach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=\u00a0$val\\n\";\n}\n?>"}]},"ksort":{"name":"ksort","parameters":[{"type":"int","name":"$sort_flags","default_value":"SORT_REGULAR","description":"You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array by key","examples":[{"title":"Example #1 ksort() example","content":"<?php\n$fruits\u00a0=\u00a0array(\"d\"=>\"lemon\",\u00a0\"a\"=>\"orange\",\u00a0\"b\"=>\"banana\",\u00a0\"c\"=>\"apple\");\nksort($fruits);\nforeach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=\u00a0$val\\n\";\n}\n?>"}]},"lcfirst":{"name":"lcfirst","parameters":[{"type":"string","name":"$str","description":"The input string."}],"return":{"type":"string","values":[]},"short":"Make a string's first character lowercase","examples":[{"title":"Example #1 lcfirst() example","content":"<?php\n$foo\u00a0=\u00a0'HelloWorld';\n$foo\u00a0=\u00a0lcfirst($foo);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0helloWorld\n\n$bar\u00a0=\u00a0'HELLO\u00a0WORLD!';\n$bar\u00a0=\u00a0lcfirst($bar);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0hELLO\u00a0WORLD!\n$bar\u00a0=\u00a0lcfirst(strtoupper($bar));\u00a0\/\/\u00a0hELLO\u00a0WORLD!\n?>"}]},"lcg_value":{"name":"lcg_value","parameters":[],"return":{"type":"float","values":[]},"short":"Combined linear congruential generator","examples":[]},"lchgrp":{"name":"lchgrp","parameters":[{"type":"string","name":"$filename","description":"Path to the symlink."},{"type":"mixed","name":"$group","description":"The group specified by name or number."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Changes group ownership of symlink","examples":[{"title":"Example #1 Changing the group of a symbolic link","content":"<?php\n$target\u00a0=\u00a0'output.php';\n$link\u00a0=\u00a0'output.html';\nsymlink($target,\u00a0$link);\n\nlchgrp($link,\u00a08);\n?>"}]},"lchown":{"name":"lchown","parameters":[{"type":"string","name":"$filename","description":"Path to the file."},{"type":"mixed","name":"$user","description":"User name or number."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Changes user ownership of symlink","examples":[{"title":"Example #1 Changing the owner of a symbolic link","content":"<?php\n$target\u00a0=\u00a0'output.php';\n$link\u00a0=\u00a0'output.html';\nsymlink($target,\u00a0$link);\n\nlchown($link,\u00a08);\n?>"}]},"levenshtein":{"name":"levenshtein","parameters":[{"type":"string","name":"$str1","description":"One of the strings being evaluated for Levenshtein distance."},{"type":"string","name":"$str2","description":"One of the strings being evaluated for Levenshtein distance."},{"type":"int","name":"$cost_ins","description":"Defines the cost of insertion."},{"type":"int","name":"$cost_rep","description":"Defines the cost of replacement."},{"type":"int","name":"$cost_del","description":"Defines the cost of deletion."}],"return":{"type":"int","values":[]},"short":"Calculate Levenshtein distance between two strings","examples":[{"title":"Example #1 levenshtein() example","content":"<?php\n\/\/\u00a0input\u00a0misspelled\u00a0word\n$input\u00a0=\u00a0'carrrot';\n\n\/\/\u00a0array\u00a0of\u00a0words\u00a0to\u00a0check\u00a0against\n$words\u00a0\u00a0=\u00a0array('apple','pineapple','banana','orange',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'radish','carrot','pea','bean','potato');\n\n\/\/\u00a0no\u00a0shortest\u00a0distance\u00a0found,\u00a0yet\n$shortest\u00a0=\u00a0-1;\n\n\/\/\u00a0loop\u00a0through\u00a0words\u00a0to\u00a0find\u00a0the\u00a0closest\nforeach\u00a0($words\u00a0as\u00a0$word)\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0calculate\u00a0the\u00a0distance\u00a0between\u00a0the\u00a0input\u00a0word,\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0and\u00a0the\u00a0current\u00a0word\n\u00a0\u00a0\u00a0\u00a0$lev\u00a0=\u00a0levenshtein($input,\u00a0$word);\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0check\u00a0for\u00a0an\u00a0exact\u00a0match\n\u00a0\u00a0\u00a0\u00a0if\u00a0($lev\u00a0==\u00a00)\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0closest\u00a0word\u00a0is\u00a0this\u00a0one\u00a0(exact\u00a0match)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$closest\u00a0=\u00a0$word;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$shortest\u00a0=\u00a00;\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0break\u00a0out\u00a0of\u00a0the\u00a0loop;\u00a0we've\u00a0found\u00a0an\u00a0exact\u00a0match\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0if\u00a0this\u00a0distance\u00a0is\u00a0less\u00a0than\u00a0the\u00a0next\u00a0found\u00a0shortest\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0distance,\u00a0OR\u00a0if\u00a0a\u00a0next\u00a0shortest\u00a0word\u00a0has\u00a0not\u00a0yet\u00a0been\u00a0found\n\u00a0\u00a0\u00a0\u00a0if\u00a0($lev\u00a0<=\u00a0$shortest\u00a0||\u00a0$shortest\u00a0<\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0set\u00a0the\u00a0closest\u00a0match,\u00a0and\u00a0shortest\u00a0distance\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$closest\u00a0\u00a0=\u00a0$word;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$shortest\u00a0=\u00a0$lev;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\necho\u00a0\"Input\u00a0word:\u00a0$input\\n\";\nif\u00a0($shortest\u00a0==\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Exact\u00a0match\u00a0found:\u00a0$closest\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Did\u00a0you\u00a0mean:\u00a0$closest?\\n\";\n}\n\n?>"}]},"libxml_clear_errors":{"name":"libxml_clear_errors","parameters":[],"return":{"type":"void","values":[]},"short":"\n   Clear libxml error buffer\n  ","examples":[]},"libxml_disable_entity_loader":{"name":"libxml_disable_entity_loader","parameters":[{"type":"bool","name":"$disable","default_value":"TRUE","description":"Disable (TRUE) or enable (FALSE) libxml extensions (such as DOM, XMLWriter and XMLReader) to load external entities."}],"return":{"type":"bool","values":[]},"short":"Disable the ability to load external entities","examples":[]},"libxml_get_errors":{"name":"libxml_get_errors","parameters":[],"return":{"type":"array","values":[]},"short":"\n   Retrieve array of errors\n  ","examples":[{"title":"Example #1 A libxml_get_errors() example","content":"This example demonstrates how to build a simple libxml error handler."}]},"libxml_get_last_error":{"name":"libxml_get_last_error","parameters":[],"return":{"type":"LibXMLError","values":["FALSE"]},"short":"\n   Retrieve last error from libxml\n  ","examples":[]},"libxml_set_external_entity_loader":{"name":"libxml_set_external_entity_loader","parameters":[{"type":"callable","name":"$resolver_function","description":"A callable that takes three arguments. Two strings, a public id and system id, and a context (an array with four keys) as the third argument. This callback should return a resource, a string from which a resource can be opened, or NULL."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Changes the default external entity loader","examples":[{"title":"Example #1 libxml_set_external_entity_loader() example","content":"<?php\n$xml\u00a0=\u00a0<<<XML\n<!DOCTYPE\u00a0foo\u00a0PUBLIC\u00a0\"-\/\/FOO\/BAR\"\u00a0\"http:\/\/example.com\/foobar\">\n<foo>bar<\/foo>\nXML;\n\n$dtd\u00a0=\u00a0<<<DTD\n<!ELEMENT\u00a0foo\u00a0(#PCDATA)>\nDTD;\n\nlibxml_set_external_entity_loader(\n\u00a0\u00a0\u00a0\u00a0function\u00a0($public,\u00a0$system,\u00a0$context)\u00a0use($dtd)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($public);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($system);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($context);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$f\u00a0=\u00a0fopen(\"php:\/\/temp\",\u00a0\"r+\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fwrite($f,\u00a0$dtd);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rewind($f);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0$f;\n\u00a0\u00a0\u00a0\u00a0}\n);\n\n$dd\u00a0=\u00a0new\u00a0DOMDocument;\n$r\u00a0\u00a0=\u00a0$dd->loadXML($xml);\n\nvar_dump($dd->validate());\n?>"}]},"libxml_set_streams_context":{"name":"libxml_set_streams_context","parameters":[{"type":"resource","name":"$streams_context","description":"The stream context resource (created with stream_context_create())"}],"return":{"type":"void","values":[]},"short":"\n   Set the streams context for the next libxml document load or write\n  ","examples":[{"title":"Example #1 A libxml_set_streams_context() example","content":"<?php\n\n$opts\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'http'\u00a0=>\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'user_agent'\u00a0=>\u00a0'PHP\u00a0libxml\u00a0agent',\n\u00a0\u00a0\u00a0\u00a0)\n);\n\n$context\u00a0=\u00a0stream_context_create($opts);\nlibxml_set_streams_context($context);\n\n\/\/\u00a0request\u00a0a\u00a0file\u00a0through\u00a0HTTP\n$doc\u00a0=\u00a0DOMDocument::load('http:\/\/www.example.com\/file.xml');\n\n?>"}]},"libxml_use_internal_errors":{"name":"libxml_use_internal_errors","parameters":[{"type":"bool","name":"$use_errors","default_value":"FALSE","description":"Enable (TRUE) user error handling or disable (FALSE) user error handling. Disabling will also clear any existing libxml errors."}],"return":{"type":"bool","values":[]},"short":"\n   Disable libxml errors and allow user to fetch error information as needed\n  ","examples":[{"title":"Example #1 A libxml_use_internal_errors() example","content":"This example demonstrates the basic usage of libxml errors and the value\n     returned by this function."}]},"link":{"name":"link","parameters":[{"type":"string","name":"$target","description":"Target of the link."},{"type":"string","name":"$link","description":"The link name."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create a hard link","examples":[{"title":"Example #1 Creating a simple hard link","content":"<?php\n$target\u00a0=\u00a0'source.ext';\u00a0\/\/\u00a0This\u00a0is\u00a0the\u00a0file\u00a0that\u00a0already\u00a0exists\n$link\u00a0=\u00a0'newfile.ext';\u00a0\/\/\u00a0This\u00a0the\u00a0filename\u00a0that\u00a0you\u00a0want\u00a0to\u00a0link\u00a0it\u00a0to\n\nlink($target,\u00a0$link);\n?>"}]},"linkinfo":{"name":"linkinfo","parameters":[{"type":"string","name":"$path","description":"Path to the link."}],"return":{"type":"int","values":["FALSE"]},"short":"Gets information about a link","examples":[{"title":"Example #1 linkinfo() example","content":"<?php\n\necho\u00a0linkinfo('\/vmlinuz');\u00a0\/\/\u00a0835\n\n?>"}]},"localeconv":{"name":"localeconv","parameters":[],"return":{"type":"array","values":["CHAR_MAX"]},"short":"Get numeric formatting information","examples":[{"title":"Example #1 localeconv() example","content":"<?php\nif\u00a0(false\u00a0!==\u00a0setlocale(LC_ALL,\u00a0'nl_NL.UTF-8@euro'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$locale_info\u00a0=\u00a0localeconv();\n\u00a0\u00a0\u00a0\u00a0print_r($locale_info);\n}\n?>"}]},"localtime":{"name":"localtime","parameters":[{"type":"int","name":"$timestamp","default_value":"time()","description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."},{"type":"bool","name":"$is_associative","default_value":"FALSE","description":"If set to FALSE or not supplied then the array is returned as a regular, numerically indexed array.  If the argument is set to TRUE then localtime() returns an associative array containing all the different elements of the structure returned by the C function call to localtime.  The names of the different keys of the associative array are as follows:\n\n\n\n\"tm_sec\" - seconds, 0 to 59\n\n\n\n \"tm_min\" - minutes, 0 to 59\n\n\n\n \"tm_hour\" - hours, 0 to 23\n\n\n\n \"tm_mday\" - day of the month, 1 to 31\n\n\n\n \"tm_mon\" - month of the year, 0 (Jan) to 11 (Dec)\n\n\n\n \"tm_year\" - years since 1900\n\n\n\n \"tm_wday\" - day of the week, 0 (Sun) to 6 (Sat)\n\n\n\n \"tm_yday\" - day of the year, 0 to 365\n\n\n\n \"tm_isdst\" - is daylight savings time in effect?\n\n Positive if yes, 0 if not, negative if unknown."}],"return":{"type":"array","values":[]},"short":"Get the local time","examples":[{"title":"Example #1 localtime() example","content":"<?php\n$localtime\u00a0=\u00a0localtime();\n$localtime_assoc\u00a0=\u00a0localtime(time(),\u00a0true);\nprint_r($localtime);\nprint_r($localtime_assoc);\n?>"}]},"log":{"name":"log","parameters":[{"type":"float","name":"$arg","description":"The value to calculate the logarithm for"},{"type":"float","name":"$base","default_value":"M_E","description":"The optional logarithmic base to use (defaults to 'e' and so to the natural logarithm)."}],"return":{"type":"float","values":[]},"short":"Natural logarithm","examples":[]},"log10":{"name":"log10","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Base-10 logarithm","examples":[]},"log1p":{"name":"log1p","parameters":[{"type":"float","name":"$number","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"\n   Returns log(1 + number), computed in a way that is accurate even when\n   the value of number is close to zero\n  ","examples":[]},"long2ip":{"name":"long2ip","parameters":[{"type":"int","name":"$proper_address","description":"A proper address representation in long integer."}],"return":{"type":"string","values":[]},"short":"Converts an long integer address into a string in (IPv4) Internet standard dotted format","examples":[]},"lstat":{"name":"lstat","parameters":[{"type":"string","name":"$filename","description":"Path to a file or a symbolic link."}],"return":{"type":"array","values":[]},"short":"Gives information about a file or symbolic link","examples":[{"title":"Example #1 Comparison of stat() and lstat()","content":"<?php\nsymlink('uploads.php',\u00a0'uploads');\n\n\/\/\u00a0Contrast\u00a0information\u00a0for\u00a0uploads.php\u00a0and\u00a0uploads\narray_diff(stat('uploads'),\u00a0lstat('uploads'));\n?>"}]},"ltrim":{"name":"ltrim","parameters":[{"type":"string","name":"$str","description":"The input string."},{"type":"string","name":"$character_mask","description":"You can also specify the characters you want to strip, by means of the character_mask parameter. Simply list all characters that you want to be stripped. With .. you can specify a range of characters."}],"return":{"type":"string","values":[]},"short":"Strip whitespace (or other characters) from the beginning of a string","examples":[{"title":"Example #1 Usage example of ltrim()","content":"<?php\n\n$text\u00a0=\u00a0\"\\t\\tThese\u00a0are\u00a0a\u00a0few\u00a0words\u00a0:)\u00a0...\u00a0\u00a0\";\n$binary\u00a0=\u00a0\"\\x09Example\u00a0string\\x0A\";\n$hello\u00a0\u00a0=\u00a0\"Hello\u00a0World\";\nvar_dump($text,\u00a0$binary,\u00a0$hello);\n\nprint\u00a0\"\\n\";\n\n\n$trimmed\u00a0=\u00a0ltrim($text);\nvar_dump($trimmed);\n\n$trimmed\u00a0=\u00a0ltrim($text,\u00a0\"\u00a0\\t.\");\nvar_dump($trimmed);\n\n$trimmed\u00a0=\u00a0ltrim($hello,\u00a0\"Hdle\");\nvar_dump($trimmed);\n\n\/\/\u00a0trim\u00a0the\u00a0ASCII\u00a0control\u00a0characters\u00a0at\u00a0the\u00a0beginning\u00a0of\u00a0$binary\n\/\/\u00a0(from\u00a00\u00a0to\u00a031\u00a0inclusive)\n$clean\u00a0=\u00a0ltrim($binary,\u00a0\"\\x00..\\x1F\");\nvar_dump($clean);\n\n?>"}]},"mail":{"name":"mail","parameters":[{"type":"string","name":"$to","description":"Receiver, or receivers of the mail.\n\nThe formatting of this string must comply with \u00bb\u00a0RFC 2822. Some examples are:\n\nuser@example.com user@example.com, anotheruser@example.com User <user@example.com> User <user@example.com>, Another User <anotheruser@example.com>"},{"type":"string","name":"$subject","description":"Subject of the email to be sent.\n\nCaution\n Subject must satisfy \u00bb\u00a0RFC 2047."},{"type":"string","name":"$message","description":"Message to be sent.\n\nEach line should be separated with a CRLF (\\r\\n). Lines should not be larger than 70 characters.\n\nCaution\n (Windows only) When PHP is talking to a SMTP server directly, if a full stop is found on the start of a line, it is removed. To counter-act this, replace these occurrences with a double dot.\n\n <?php $text\u00a0=\u00a0str_replace(\"\\n.\",\u00a0\"\\n..\",\u00a0$text); ?>"},{"type":"string","name":"$additional_headers"},{"type":"string","name":"$additional_parameters"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Send mail","examples":[{"title":"Example #1 Sending mail.","content":"Using mail() to send a simple email:"},{"title":"Example #2 Sending mail with extra headers.","content":"The addition of basic headers, telling the MUA\n     the From and Reply-To addresses:"},{"title":"Example #3 Sending mail with an additional command line parameter.","content":"The additional_parameters parameter\n     can be used to pass an additional parameter to the program configured\n     to use when sending mail using the sendmail_path."},{"title":"Example #4 Sending HTML email","content":"It is also possible to send HTML email with mail()."}]},"max":{"name":"max","parameters":[{"type":"array","name":"$values","description":"An array containing the values."},{"type":"mixed","name":"$value1","description":"Any comparable value."},{"type":"mixed","name":"$value2","description":"Any comparable value."},{"type":"mixed","name":"$...","description":"Any comparable value."}],"return":{"type":"mixed","values":["FALSE","E_WARNING"]},"short":"Find highest value","examples":[{"title":"Example #1 Example uses of max()","content":"<?php\necho\u00a0max(2,\u00a03,\u00a01,\u00a06,\u00a07);\u00a0\u00a0\/\/\u00a07\necho\u00a0max(array(2,\u00a04,\u00a05));\u00a0\/\/\u00a05\n\n\/\/\u00a0The\u00a0string\u00a0'hello'\u00a0when\u00a0compared\u00a0to\u00a0an\u00a0int\u00a0is\u00a0treated\u00a0as\u00a00\n\/\/\u00a0Since\u00a0the\u00a0two\u00a0values\u00a0are\u00a0equal,\u00a0the\u00a0order\u00a0they\u00a0are\u00a0provided\u00a0determines\u00a0the\u00a0result\necho\u00a0max(0,\u00a0'hello');\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a00\necho\u00a0max('hello',\u00a00);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0hello\n\n\/\/\u00a0Here\u00a0we\u00a0are\u00a0comparing\u00a0-1\u00a0<\u00a00,\u00a0so\u00a0'hello'\u00a0is\u00a0the\u00a0highest\u00a0value\necho\u00a0max('hello',\u00a0-1);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0hello\n\n\/\/\u00a0With\u00a0multiple\u00a0arrays\u00a0of\u00a0different\u00a0lengths,\u00a0max\u00a0returns\u00a0the\u00a0longest\n$val\u00a0=\u00a0max(array(2,\u00a02,\u00a02),\u00a0array(1,\u00a01,\u00a01,\u00a01));\u00a0\/\/\u00a0array(1,\u00a01,\u00a01,\u00a01)\n\n\/\/\u00a0Multiple\u00a0arrays\u00a0of\u00a0the\u00a0same\u00a0length\u00a0are\u00a0compared\u00a0from\u00a0left\u00a0to\u00a0right\n\/\/\u00a0so\u00a0in\u00a0our\u00a0example:\u00a02\u00a0==\u00a02,\u00a0but\u00a05\u00a0>\u00a04\n$val\u00a0=\u00a0max(array(2,\u00a04,\u00a08),\u00a0array(2,\u00a05,\u00a01));\u00a0\/\/\u00a0array(2,\u00a05,\u00a01)\n\n\/\/\u00a0If\u00a0both\u00a0an\u00a0array\u00a0and\u00a0non-array\u00a0are\u00a0given,\u00a0the\u00a0array\u00a0will\u00a0be\u00a0returned\n\/\/\u00a0as\u00a0comparisons\u00a0treat\u00a0arrays\u00a0as\u00a0greater\u00a0than\u00a0any\u00a0other\u00a0value\n$val\u00a0=\u00a0max('string',\u00a0array(2,\u00a05,\u00a07),\u00a042);\u00a0\u00a0\u00a0\/\/\u00a0array(2,\u00a05,\u00a07)\n\n\/\/\u00a0If\u00a0one\u00a0argument\u00a0is\u00a0NULL\u00a0or\u00a0a\u00a0boolean,\u00a0it\u00a0will\u00a0be\u00a0compared\u00a0against\n\/\/\u00a0other\u00a0values\u00a0using\u00a0the\u00a0rule\u00a0FALSE\u00a0<\u00a0TRUE\u00a0regardless\u00a0of\u00a0the\u00a0other\u00a0types\u00a0involved\n\/\/\u00a0In\u00a0the\u00a0below\u00a0example,\u00a0-10\u00a0is\u00a0treated\u00a0as\u00a0TRUE\u00a0in\u00a0the\u00a0comparison\n$val\u00a0=\u00a0max(-10,\u00a0FALSE);\u00a0\/\/\u00a0-10\n\n\/\/\u00a00,\u00a0on\u00a0the\u00a0other\u00a0hand,\u00a0is\u00a0treated\u00a0as\u00a0FALSE,\u00a0so\u00a0is\u00a0\"lower\u00a0than\"\u00a0TRUE\n$val\u00a0=\u00a0max(0,\u00a0TRUE);\u00a0\/\/\u00a0TRUE\n?>"}]},"md5":{"name":"md5","parameters":[{"type":"string","name":"$str","description":"The string."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"If the optional raw_output is set to TRUE, then the md5 digest is instead returned in raw binary format with a length of 16."}],"return":{"type":"string","values":[]},"short":"Calculate the md5 hash of a string","examples":[{"title":"Example #1 A md5() example","content":"<?php\n$str\u00a0=\u00a0'apple';\n\nif\u00a0(md5($str)\u00a0===\u00a0'1f3870be274f6c49b3e31a0c6728957f')\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Would\u00a0you\u00a0like\u00a0a\u00a0green\u00a0or\u00a0red\u00a0apple?\";\n}\n?>"}]},"md5_file":{"name":"md5_file","parameters":[{"type":"string","name":"$filename","description":"The filename"},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"When TRUE, returns the digest in raw binary format with a length of 16."}],"return":{"type":"string","values":["FALSE"]},"short":"Calculates the md5 hash of a given file","examples":[{"title":"Example #1 Usage example of md5_file()","content":"<?php\n$file\u00a0=\u00a0'php-5.3.0alpha2-Win32-VC9-x64.zip';\n\necho\u00a0'MD5\u00a0file\u00a0hash\u00a0of\u00a0'\u00a0.\u00a0$file\u00a0.\u00a0':\u00a0'\u00a0.\u00a0md5_file($file);\n?>"}]},"memory_get_peak_usage":{"name":"memory_get_peak_usage","parameters":[{"type":"bool","name":"$real_usage","default_value":"FALSE","description":"Set this to TRUE to get the real size of memory allocated from system. If not set or FALSE only the memory used by emalloc() is reported."}],"return":{"type":"int","values":[]},"short":"Returns the peak of memory allocated by PHP","examples":[]},"memory_get_usage":{"name":"memory_get_usage","parameters":[{"type":"bool","name":"$real_usage","default_value":"FALSE","description":"Set this to TRUE to get total memory allocated from system, including unused pages. If not set or FALSE only the used memory is reported."}],"return":{"type":"int","values":[]},"short":"Returns the amount of memory allocated to PHP","examples":[{"title":"Example #1 A memory_get_usage() example","content":"<?php\n\/\/\u00a0This\u00a0is\u00a0only\u00a0an\u00a0example,\u00a0the\u00a0numbers\u00a0below\u00a0will\n\/\/\u00a0differ\u00a0depending\u00a0on\u00a0your\u00a0system\n\necho\u00a0memory_get_usage()\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a036640\n\n$a\u00a0=\u00a0str_repeat(\"Hello\",\u00a04242);\n\necho\u00a0memory_get_usage()\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a057960\n\nunset($a);\n\necho\u00a0memory_get_usage()\u00a0.\u00a0\"\\n\";\u00a0\/\/\u00a036744\n\n?>"}]},"metaphone":{"name":"metaphone","parameters":[{"type":"string","name":"$str","description":"The input string."},{"type":"int","name":"$phonemes","default_value":"0","description":"This parameter restricts the returned metaphone key to phonemes characters in length. The default value of 0 means no restriction."}],"return":{"type":"string","values":["FALSE"]},"short":"Calculate the metaphone key of a string","examples":[{"title":"Example #1 metaphone() basic example","content":"<?php\nvar_dump(metaphone('programming'));\nvar_dump(metaphone('programmer'));\n?>"},{"title":"Example #2 Using the phonemes parameter","content":"<?php\nvar_dump(metaphone('programming',\u00a05));\nvar_dump(metaphone('programmer',\u00a05));\n?>"}]},"method_exists":{"name":"method_exists","parameters":[{"type":"mixed","name":"$object","description":"An object instance or a class name"},{"type":"string","name":"$method_name","description":"The method name"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if the class method exists","examples":[{"title":"Example #1 method_exists() example","content":"<?php\n$directory\u00a0=\u00a0new\u00a0Directory('.');\nvar_dump(method_exists($directory,'read'));\n?>"},{"title":"Example #2 Static method_exists() example","content":"<?php\nvar_dump(method_exists('Directory','read'));\n?>"}]},"mhash":{"name":"mhash","parameters":[{"type":"int","name":"$hash","description":"The hash ID. One of the MHASH_hashname constants."},{"type":"string","name":"$data","description":"The user input, as a string."},{"type":"string","name":"$key","description":"If specified, the function will return the resulting HMAC instead. HMAC is keyed hashing for message authentication, or simply a message digest that depends on the specified key. Not all algorithms supported in mhash can be used in HMAC mode."}],"return":{"type":"string","values":["FALSE"]},"short":"Computes hash","examples":[]},"mhash_count":{"name":"mhash_count","parameters":[],"return":{"type":"int","values":[]},"short":"Gets the highest available hash ID","examples":[{"title":"Example #1 Traversing all hashes","content":"<?php\n\n$nr\u00a0=\u00a0mhash_count();\n\nfor\u00a0($i\u00a0=\u00a00;\u00a0$i\u00a0<=\u00a0$nr;\u00a0$i++)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0sprintf(\"The\u00a0blocksize\u00a0of\u00a0%s\u00a0is\u00a0%d\\n\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mhash_get_hash_name($i),\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mhash_get_block_size($i));\n}\n?>"}]},"mhash_get_block_size":{"name":"mhash_get_block_size","parameters":[{"type":"int","name":"$hash","description":"The hash ID. One of the MHASH_hashname constants."}],"return":{"type":"int","values":["FALSE"]},"short":"Gets the block size of the specified hash","examples":[{"title":"Example #1 mhash_get_block_size() Example","content":"<?php\n\necho\u00a0mhash_get_block_size(MHASH_MD5);\u00a0\/\/\u00a016\n\n?>"}]},"mhash_get_hash_name":{"name":"mhash_get_hash_name","parameters":[{"type":"int","name":"$hash","description":"The hash ID. One of the MHASH_hashname constants."}],"return":{"type":"string","values":["FALSE"]},"short":"Gets the name of the specified hash","examples":[{"title":"Example #1 mhash_get_hash_name() Example","content":"<?php\n\necho\u00a0mhash_get_hash_name(MHASH_MD5);\u00a0\/\/\u00a0MD5\n\n?>"}]},"mhash_keygen_s2k":{"name":"mhash_keygen_s2k","parameters":[{"type":"int","name":"$hash","description":"The hash ID used to create the key. One of the MHASH_hashname constants."},{"type":"string","name":"$password","description":"An user supplied password."},{"type":"string","name":"$salt","description":"Must be different and random enough for every key you generate in order to create different keys. Because salt must be known when you check the keys, it is a good idea to append the key to it. Salt has a fixed length of 8 bytes and will be padded with zeros if you supply less bytes."},{"type":"int","name":"$bytes","description":"The key length, in bytes."}],"return":{"type":"string","values":["FALSE"]},"short":"Generates a key","examples":[]},"microtime":{"name":"microtime","parameters":[{"type":"bool","name":"$get_as_float","default_value":"FALSE","description":"If used and set to TRUE, microtime() will return a float instead of a string, as described in the return values section below."}],"return":{"type":"mixed","values":["TRUE"]},"short":"Return current Unix timestamp with microseconds","examples":[{"title":"Example #1 Timing script execution with microtime()","content":"<?php\n\/**\n\u00a0*\u00a0Simple\u00a0function\u00a0to\u00a0replicate\u00a0PHP\u00a05\u00a0behaviour\n\u00a0*\/\nfunction\u00a0microtime_float()\n{\n\u00a0\u00a0\u00a0\u00a0list($usec,\u00a0$sec)\u00a0=\u00a0explode(\"\u00a0\",\u00a0microtime());\n\u00a0\u00a0\u00a0\u00a0return\u00a0((float)$usec\u00a0+\u00a0(float)$sec);\n}\n\n$time_start\u00a0=\u00a0microtime_float();\n\n\/\/\u00a0Sleep\u00a0for\u00a0a\u00a0while\nusleep(100);\n\n$time_end\u00a0=\u00a0microtime_float();\n$time\u00a0=\u00a0$time_end\u00a0-\u00a0$time_start;\n\necho\u00a0\"Did\u00a0nothing\u00a0in\u00a0$time\u00a0seconds\\n\";\n?>"},{"title":"Example #2 Timing script execution in PHP 5","content":"<?php\n$time_start\u00a0=\u00a0microtime(true);\n\n\/\/\u00a0Sleep\u00a0for\u00a0a\u00a0while\nusleep(100);\n\n$time_end\u00a0=\u00a0microtime(true);\n$time\u00a0=\u00a0$time_end\u00a0-\u00a0$time_start;\n\necho\u00a0\"Did\u00a0nothing\u00a0in\u00a0$time\u00a0seconds\\n\";\n?>"},{"title":"Example #3 microtime() and REQUEST_TIME_FLOAT (as of PHP 5.4.0)","content":"<?php\n\/\/\u00a0Randomize\u00a0sleeping\u00a0time\nusleep(mt_rand(100,\u00a010000));\n\n\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.4.0,\u00a0REQUEST_TIME_FLOAT\u00a0is\u00a0available\u00a0in\u00a0the\u00a0$_SERVER\u00a0superglobal\u00a0array.\n\/\/\u00a0It\u00a0contains\u00a0the\u00a0timestamp\u00a0of\u00a0the\u00a0start\u00a0of\u00a0the\u00a0request\u00a0with\u00a0microsecond\u00a0precision.\n$time\u00a0=\u00a0microtime(true)\u00a0-\u00a0$_SERVER[\"REQUEST_TIME_FLOAT\"];\n\necho\u00a0\"Did\u00a0nothing\u00a0in\u00a0$time\u00a0seconds\\n\";\n?>"}]},"mime_content_type":{"name":"mime_content_type","parameters":[{"type":"string","name":"$filename","description":"Path to the tested file."}],"return":{"type":"string","values":[]},"short":"Detect MIME Content-type for a file","examples":[{"title":"Example #1 mime_content_type() Example","content":"<?php\necho\u00a0mime_content_type('php.gif')\u00a0.\u00a0\"\\n\";\necho\u00a0mime_content_type('test.php');\n?>"}]},"min":{"name":"min","parameters":[{"type":"array","name":"$values","description":"An array containing the values."},{"type":"mixed","name":"$value1","description":"Any comparable value."},{"type":"mixed","name":"$value2","description":"Any comparable value."},{"type":"mixed","name":"$...","description":"Any comparable value."}],"return":{"type":"mixed","values":["FALSE","E_WARNING"]},"short":"Find lowest value","examples":[{"title":"Example #1 Example uses of min()","content":"<?php\necho\u00a0min(2,\u00a03,\u00a01,\u00a06,\u00a07);\u00a0\u00a0\/\/\u00a01\necho\u00a0min(array(2,\u00a04,\u00a05));\u00a0\/\/\u00a02\n\n\/\/\u00a0The\u00a0string\u00a0'hello'\u00a0when\u00a0compared\u00a0to\u00a0an\u00a0int\u00a0is\u00a0treated\u00a0as\u00a00\n\/\/\u00a0Since\u00a0the\u00a0two\u00a0values\u00a0are\u00a0equal,\u00a0the\u00a0order\u00a0they\u00a0are\u00a0provided\u00a0determines\u00a0the\u00a0result\necho\u00a0min(0,\u00a0'hello');\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a00\necho\u00a0min('hello',\u00a00);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0hello\n\n\/\/\u00a0Here\u00a0we\u00a0are\u00a0comparing\u00a0-1\u00a0<\u00a00,\u00a0so\u00a0-1\u00a0is\u00a0the\u00a0lowest\u00a0value\necho\u00a0min('hello',\u00a0-1);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0-1\n\n\/\/\u00a0With\u00a0multiple\u00a0arrays\u00a0of\u00a0different\u00a0lengths,\u00a0min\u00a0returns\u00a0the\u00a0shortest\n$val\u00a0=\u00a0min(array(2,\u00a02,\u00a02),\u00a0array(1,\u00a01,\u00a01,\u00a01));\u00a0\/\/\u00a0array(2,\u00a02,\u00a02)\n\n\/\/\u00a0Multiple\u00a0arrays\u00a0of\u00a0the\u00a0same\u00a0length\u00a0are\u00a0compared\u00a0from\u00a0left\u00a0to\u00a0right\n\/\/\u00a0so\u00a0in\u00a0our\u00a0example:\u00a02\u00a0==\u00a02,\u00a0but\u00a04\u00a0<\u00a05\n$val\u00a0=\u00a0min(array(2,\u00a04,\u00a08),\u00a0array(2,\u00a05,\u00a01));\u00a0\/\/\u00a0array(2,\u00a04,\u00a08)\n\n\/\/\u00a0If\u00a0both\u00a0an\u00a0array\u00a0and\u00a0non-array\u00a0are\u00a0given,\u00a0the\u00a0array\u00a0is\u00a0never\u00a0returned\n\/\/\u00a0as\u00a0comparisons\u00a0treat\u00a0arrays\u00a0as\u00a0greater\u00a0than\u00a0any\u00a0other\u00a0value\n$val\u00a0=\u00a0min('string',\u00a0array(2,\u00a05,\u00a07),\u00a042);\u00a0\u00a0\u00a0\/\/\u00a0string\n\n\/\/\u00a0If\u00a0one\u00a0argument\u00a0is\u00a0NULL\u00a0or\u00a0a\u00a0boolean,\u00a0it\u00a0will\u00a0be\u00a0compared\u00a0against\n\/\/\u00a0other\u00a0values\u00a0using\u00a0the\u00a0rules\u00a0FALSE\u00a0<\u00a0TRUE\u00a0and\u00a0NULL\u00a0==\u00a0FALSE\u00a0regardless\u00a0of\u00a0the\u00a0\n\/\/\u00a0other\u00a0types\u00a0involved\n\/\/\u00a0In\u00a0the\u00a0below\u00a0examples,\u00a0both\u00a0-10\u00a0and\u00a010\u00a0are\u00a0treated\u00a0as\u00a0TRUE\u00a0in\u00a0the\u00a0comparison\n$val\u00a0=\u00a0min(-10,\u00a0FALSE,\u00a010);\u00a0\/\/\u00a0FALSE\n$val\u00a0=\u00a0min(-10,\u00a0NULL,\u00a010);\u00a0\u00a0\/\/\u00a0NULL\n\n\/\/\u00a00,\u00a0on\u00a0the\u00a0other\u00a0hand,\u00a0is\u00a0treated\u00a0as\u00a0FALSE,\u00a0so\u00a0is\u00a0\"lower\u00a0than\"\u00a0TRUE\n$val\u00a0=\u00a0min(0,\u00a0TRUE);\u00a0\/\/\u00a00\n?>"}]},"mkdir":{"name":"mkdir","parameters":[{"type":"string","name":"$pathname","description":"The directory path."},{"type":"int","name":"$mode","default_value":"0777","description":"The mode is 0777 by default, which means the widest possible access. For more information on modes, read the details on the chmod() page.\n\nNote:\n mode is ignored on Windows.\n\nNote that you probably want to specify the mode as an octal number, which means it should have a leading zero. The mode is also modified by the current umask, which you can change using umask()."},{"type":"bool","name":"$recursive","default_value":"FALSE","description":"Allows the creation of nested directories specified in the pathname."},{"type":"resource","name":"$context","description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Makes directory","examples":[{"title":"Example #1 mkdir() example","content":"<?php\nmkdir(\"\/path\/to\/my\/dir\",\u00a00700);\n?>"},{"title":"Example #2 mkdir() using the recursive parameter","content":"<?php\n\/\/\u00a0Desired\u00a0folder\u00a0structure\n$structure\u00a0=\u00a0'.\/depth1\/depth2\/depth3\/';\n\n\/\/\u00a0To\u00a0create\u00a0the\u00a0nested\u00a0structure,\u00a0the\u00a0$recursive\u00a0parameter\u00a0\n\/\/\u00a0to\u00a0mkdir()\u00a0must\u00a0be\u00a0specified.\n\nif\u00a0(!mkdir($structure,\u00a00777,\u00a0true))\u00a0{\n\u00a0\u00a0\u00a0\u00a0die('Failed\u00a0to\u00a0create\u00a0folders...');\n}\n\n\/\/\u00a0...\n?>"}]},"mktime":{"name":"mktime","parameters":[{"type":"int","name":"$hour","default_value":"date(\"H\")","description":"The number of the hour relative to the start of the day determined by month, day and year. Negative values reference the hour before midnight of the day in question. Values greater than 23 reference the appropriate hour in the following day(s)."},{"type":"int","name":"$minute","default_value":"date(\"i\")","description":"The number of the minute relative to the start of the hour. Negative values reference the minute in the previous hour. Values greater than 59 reference the appropriate minute in the following hour(s)."},{"type":"int","name":"$second","default_value":"date(\"s\")","description":"The number of seconds relative to the start of the minute. Negative values reference the second in the previous minute. Values greater than 59 reference the appropriate second in the following minute(s)."},{"type":"int","name":"$month","default_value":"date(\"n\")","description":"The number of the month relative to the end of the previous year. Values 1 to 12 reference the normal calendar months of the year in question. Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc. Values greater than 12 reference the appropriate month in the following year(s)."},{"type":"int","name":"$day","default_value":"date(\"j\")","description":"The number of the day relative to the end of the previous month. Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month. Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc. Values greater than the number of days in the relevant month reference the appropriate day in the following month(s)."},{"type":"int","name":"$year","default_value":"date(\"Y\")","description":"The number of the year, may be a two or four digit value, with values between 0-69 mapping to 2000-2069 and 70-100 to 1970-2000. On systems where time_t is a 32bit signed integer, as most common today, the valid range for year is somewhere between 1901 and 2038. However, before PHP 5.1.0 this range was limited from 1970 to 2038 on some systems (e.g. Windows)."},{"type":"int","name":"$is_dst","default_value":"-1","description":"This parameter can be set to 1 if the time is during daylight savings time (DST), 0 if it is not, or -1 (the default) if it is unknown whether the time is within daylight savings time or not. If it's unknown, PHP tries to figure it out itself. This can cause unexpected (but not incorrect) results. Some times are invalid if DST is enabled on the system PHP is running on or is_dst is set to 1. If DST is enabled in e.g. 2:00, all times between 2:00 and 3:00 are invalid and mktime() returns an undefined (usually negative) value. Some systems (e.g. Solaris 8) enable DST at midnight so time 0:30 of the day when DST is enabled is evaluated as 23:30 of the previous day.\n\nNote:\n As of PHP 5.1.0, this parameter became deprecated. As a result, the new timezone handling features should be used instead.\n\nNote:\n This parameter has been removed in PHP 7.0.0."}],"return":{"type":"int","values":["FALSE"]},"short":"Get Unix timestamp for a date","examples":[{"title":"Example #1 mktime() basic example","content":"<?php\n\/\/\u00a0Set\u00a0the\u00a0default\u00a0timezone\u00a0to\u00a0use.\u00a0Available\u00a0as\u00a0of\u00a0PHP\u00a05.1\ndate_default_timezone_set('UTC');\n\n\/\/\u00a0Prints:\u00a0July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0Saturday\necho\u00a0\"July\u00a01,\u00a02000\u00a0is\u00a0on\u00a0a\u00a0\"\u00a0.\u00a0date(\"l\",\u00a0mktime(0,\u00a00,\u00a00,\u00a07,\u00a01,\u00a02000));\n\n\/\/\u00a0Prints\u00a0something\u00a0like:\u00a02006-04-05T01:02:03+00:00\necho\u00a0date('c',\u00a0mktime(1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a02006));\n?>"},{"title":"Example #2 mktime() example","content":"mktime() is useful for doing date arithmetic\n     and validation, as it will automatically calculate the correct\n     value for out-of-range input. For example, each of the following\n     lines produces the string \"Jan-01-1998\"."},{"title":"Example #3 Last day of a month","content":"The last day of any given month can be expressed as the \"0\" day\n     of the next month, not the -1 day. Both of the following examples\n     will produce the string \"The last day in Feb 2000 is: 29\"."}]},"money_format":{"name":"money_format","parameters":[{"type":"string","name":"$format","description":"The format specification consists of the following sequence:\n\na % character optional flags optional field width optional left precision optional right precision a required conversion character\n\n\n\nFlags\n\nOne or more of the optional flags below can be used:\n\n=f\n\n\n\n The character = followed by a (single byte) character f to be used as the numeric fill character. The default fill character is space.\n\n\n\n\n\n ^\n\n\n\n Disable the use of grouping characters (as defined by the current locale).\n\n\n\n\n\n + or (\n\n\n\n Specify the formatting style for positive and negative numbers. If + is used, the locale's equivalent for + and - will be used. If ( is used, negative amounts are enclosed in parenthesis. If no specification is given, the default is +.\n\n\n\n\n\n !\n\n\n\n Suppress the currency symbol from the output string.\n\n\n\n\n\n -\n\n\n\n If present, it will make all fields left-justified (padded to the right), as opposed to the default which is for the fields to be right-justified (padded to the left).\n\n\n\nField width\n\n\n\nw\n\n\n\n A decimal digit string specifying a minimum field width. Field will be right-justified unless the flag - is used. Default value is 0 (zero).\n\n\n\nLeft precision\n\n\n\n#n\n\n\n\n The maximum number of digits (n) expected to the left of the decimal character (e.g. the decimal point). It is used usually to keep formatted output aligned in the same columns, using the fill character if the number of digits is less than n. If the number of actual digits is bigger than n, then this specification is ignored.\n\n If grouping has not been suppressed using the ^ flag, grouping separators will be inserted before the fill characters (if any) are added. Grouping separators will not be applied to fill characters, even if the fill character is a digit.\n\n To ensure alignment, any characters appearing before or after the number in the formatted output such as currency or sign symbols are padded as necessary with space characters to make their positive and negative formats an equal length.\n\n\n\nRight precision\n\n\n\n.p\n\n\n\n A period followed by the number of digits (p) after the decimal character. If the value of p is 0 (zero), the decimal character and the digits to its right will be omitted. If no right precision is included, the default will dictated by the current local in use. The amount being formatted is rounded to the specified number of digits prior to formatting.\n\n\n\nConversion characters\n\n\n\ni\n\n\n\n The number is formatted according to the locale's international currency format (e.g. for the USA locale: USD 1,234.56).\n\n\n\n\n\n n\n\n\n\n The number is formatted according to the locale's national currency format (e.g. for the de_DE locale: EU1.234,56).\n\n\n\n\n\n %\n\n\n\n Returns the % character."},{"type":"float","name":"$number","description":"The number to be formatted."}],"return":{"type":"string","values":["NULL","E_WARNING"]},"short":"Formats a number as a currency string","examples":[{"title":"Example #1 money_format() Example","content":"We will use different locales and format specifications to\n     illustrate the use of this function."}]},"move_uploaded_file":{"name":"move_uploaded_file","parameters":[{"type":"string","name":"$filename","description":"The filename of the uploaded file."},{"type":"string","name":"$destination","description":"The destination of the moved file."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Moves an uploaded file to a new location","examples":[{"title":"Example #1 Uploading multiple files","content":"<?php\n$uploads_dir\u00a0=\u00a0'\/uploads';\nforeach\u00a0($_FILES[\"pictures\"][\"error\"]\u00a0as\u00a0$key\u00a0=>\u00a0$error)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0($error\u00a0==\u00a0UPLOAD_ERR_OK)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$tmp_name\u00a0=\u00a0$_FILES[\"pictures\"][\"tmp_name\"][$key];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0basename()\u00a0may\u00a0prevent\u00a0filesystem\u00a0traversal\u00a0attacks;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0further\u00a0validation\/sanitation\u00a0of\u00a0the\u00a0filename\u00a0may\u00a0be\u00a0appropriate\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$name\u00a0=\u00a0basename($_FILES[\"pictures\"][\"name\"][$key]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0move_uploaded_file($tmp_name,\u00a0\"$uploads_dir\/$name\");\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"msg_get_queue":{"name":"msg_get_queue","parameters":[{"type":"int","name":"$key","description":"Message queue numeric ID"},{"type":"int","name":"$perms","default_value":"0666","description":"Queue permissions. Default to 0666. If the message queue already exists, the perms will be ignored."}],"return":{"type":"resource","values":[]},"short":"Create or attach to a message queue","examples":[]},"msg_queue_exists":{"name":"msg_queue_exists","parameters":[{"type":"int","name":"$key","description":"Queue key."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check whether a message queue exists","examples":[]},"msg_receive":{"name":"msg_receive","parameters":[{"type":"resource","name":"$queue","description":""},{"type":"int","name":"$desiredmsgtype","description":"If desiredmsgtype is 0, the message from the front of the queue is returned. If desiredmsgtype is greater than 0, then the first message of that type is returned. If desiredmsgtype is less than 0, the first message on the queue with the lowest type less than or equal to the absolute value of desiredmsgtype will be read. If no messages match the criteria, your script will wait until a suitable message arrives on the queue.  You can prevent the script from blocking by specifying MSG_IPC_NOWAIT in the flags parameter."},{"type":"int","name":"$maxsize","description":"The maximum size of message to be accepted is specified by the maxsize; if the message in the queue is larger than this size the function will fail (unless you set flags as described below)."},{"type":"bool","name":"$unserialize","default_value":"TRUE","description":"If set to TRUE, the message is treated as though it was serialized using the same mechanism as the session module. The message will be unserialized and then returned to your script. This allows you to easily receive arrays or complex object structures from other PHP scripts, or if you are using the WDDX serializer, from any WDDX compatible source.\n\nIf unserialize is FALSE, the message will be returned as a binary-safe string."},{"type":"int","name":"$flags","default_value":"0","description":"The optional flags allows you to pass flags to the low-level msgrcv system call.  It defaults to 0, but you may specify one or more of the following values (by adding or ORing them together).\n\nFlag values for msg_receive\n MSG_IPC_NOWAIT If there are no messages of the desiredmsgtype, return immediately and do not wait.  The function will fail and return an integer value corresponding to MSG_ENOMSG.\n MSG_EXCEPT Using this flag in combination with a desiredmsgtype greater than 0 will cause the function to receive the first message that is not equal to desiredmsgtype. MSG_NOERROR\n If the message is longer than maxsize, setting this flag will truncate the message to maxsize and will not signal an error."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Receive a message from a message queue","examples":[]},"msg_remove_queue":{"name":"msg_remove_queue","parameters":[{"type":"resource","name":"$queue","description":"Message queue resource handle"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Destroy a message queue","examples":[]},"msg_send":{"name":"msg_send","parameters":[{"type":"resource","name":"$queue","description":""},{"type":"int","name":"$msgtype","description":""},{"type":"mixed","name":"$message","description":""},{"type":"bool","name":"$serialize","default_value":"TRUE","description":"The optional serialize controls how the message is sent.  serialize defaults to TRUE which means that the message is serialized using the same mechanism as the session module before being sent to the queue.  This allows complex arrays and objects to be sent to other PHP scripts, or if you are using the WDDX serializer, to any WDDX compatible client."},{"type":"bool","name":"$blocking","default_value":"TRUE","description":"If the message is too large to fit in the queue, your script will wait until another process reads messages from the queue and frees enough space for your message to be sent. This is called blocking; you can prevent blocking by setting the optional blocking parameter to FALSE, in which case msg_send() will immediately return FALSE if the message is too big for the queue, and set the optional errorcode to MSG_EAGAIN, indicating that you should try to send your message again a little later on."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Send a message to a message queue","examples":[]},"msg_set_queue":{"name":"msg_set_queue","parameters":[{"type":"resource","name":"$queue","description":"Message queue resource handle"},{"type":"array","name":"$data","description":"You specify the values you require by setting the value of the keys that you require in the data array."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set information in the message queue data structure","examples":[]},"msg_stat_queue":{"name":"msg_stat_queue","parameters":[{"type":"resource","name":"$queue","description":"Message queue resource handle"}],"return":{"type":"array","values":[]},"short":"Returns information from the message queue data structure","examples":[]},"mt_getrandmax":{"name":"mt_getrandmax","parameters":[],"return":{"type":"int","values":[]},"short":"Show largest possible random value","examples":[{"title":"Example #1 Calculate a random floating-point number","content":"<?php\nfunction\u00a0randomFloat($min\u00a0=\u00a00,\u00a0$max\u00a0=\u00a01)\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0$min\u00a0+\u00a0mt_rand()\u00a0\/\u00a0mt_getrandmax()\u00a0*\u00a0($max\u00a0-\u00a0$min);\n}\n\nvar_dump(randomFloat());\nvar_dump(randomFloat(2,\u00a020));\n?>"}]},"mt_rand":{"name":"mt_rand","parameters":[{"type":"int","name":"$min","description":"Optional lowest value to be returned (default: 0)"},{"type":"int","name":"$max","description":"Optional highest value to be returned (default: mt_getrandmax())"}],"return":{"type":"int","values":["FALSE"]},"short":"Generate a random value via the Mersenne Twister Random Number Generator","examples":[{"title":"Example #1 mt_rand() example","content":"<?php\necho\u00a0mt_rand()\u00a0.\u00a0\"\\n\";\necho\u00a0mt_rand()\u00a0.\u00a0\"\\n\";\n\necho\u00a0mt_rand(5,\u00a015);\n?>"}]},"mt_srand":{"name":"mt_srand","parameters":[{"type":"int","name":"$seed","description":"An arbitrary integer seed value."},{"type":"int","name":"$mode","default_value":"MT_RAND_MT19937","description":"Use one of the following constants to specify the implementation of the algorithm to use.\n\nConstant Description MT_RAND_MT19937\n Uses the fixed, correct, Mersenne Twister implementation, available as of PHP 7.1.0.\n MT_RAND_PHP\n Uses an incorrect Mersenne Twister implementation which was used as the default up till PHP 7.1.0. This mode is available for backward compatibility."}],"return":{"type":"void","values":[]},"short":"Seeds the Mersenne Twister Random Number Generator","examples":[{"title":"Example #1 mt_srand() example","content":"<?php\n\/\/\u00a0seed\u00a0with\u00a0microseconds\nfunction\u00a0make_seed()\n{\n\u00a0\u00a0list($usec,\u00a0$sec)\u00a0=\u00a0explode('\u00a0',\u00a0microtime());\n\u00a0\u00a0return\u00a0$sec\u00a0+\u00a0$usec\u00a0*\u00a01000000;\n}\nmt_srand(make_seed());\n$randval\u00a0=\u00a0mt_rand();\n?>"}]},"natcasesort":{"name":"natcasesort","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array using a case insensitive \"natural order\" algorithm","examples":[{"title":"Example #1 natcasesort() example","content":"<?php\n$array1\u00a0=\u00a0$array2\u00a0=\u00a0array('IMG0.png',\u00a0'img12.png',\u00a0'img10.png',\u00a0'img2.png',\u00a0'img1.png',\u00a0'IMG3.png');\n\nsort($array1);\necho\u00a0\"Standard\u00a0sorting\\n\";\nprint_r($array1);\n\nnatcasesort($array2);\necho\u00a0\"\\nNatural\u00a0order\u00a0sorting\u00a0(case-insensitive)\\n\";\nprint_r($array2);\n?>"}]},"natsort":{"name":"natsort","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array using a \"natural order\" algorithm","examples":[{"title":"Example #1 natsort() examples demonstrating basic usage","content":"<?php\n$array1\u00a0=\u00a0$array2\u00a0=\u00a0array(\"img12.png\",\u00a0\"img10.png\",\u00a0\"img2.png\",\u00a0\"img1.png\");\n\nasort($array1);\necho\u00a0\"Standard\u00a0sorting\\n\";\nprint_r($array1);\n\nnatsort($array2);\necho\u00a0\"\\nNatural\u00a0order\u00a0sorting\\n\";\nprint_r($array2);\n?>"},{"title":"Example #2 natsort() examples demonstrating potential gotchas","content":"<?php\necho\u00a0\"Negative\u00a0numbers\\n\";\n$negative\u00a0=\u00a0array('-5','3','-2','0','-1000','9','1');\nprint_r($negative);\nnatsort($negative);\nprint_r($negative);\n\necho\u00a0\"Zero\u00a0padding\\n\";\n$zeros\u00a0=\u00a0array('09',\u00a0'8',\u00a0'10',\u00a0'009',\u00a0'011',\u00a0'0');\u00a0\nprint_r($zeros);\nnatsort($zeros);\nprint_r($zeros);\n?>"}]},"next":{"name":"next","parameters":[],"return":{"type":"mixed","values":["FALSE"]},"short":"Advance the internal pointer of an array","examples":[{"title":"Example #1 Example use of next() and friends","content":"<?php\n$transport\u00a0=\u00a0array('foot',\u00a0'bike',\u00a0'car',\u00a0'plane');\n$mode\u00a0=\u00a0current($transport);\u00a0\/\/\u00a0$mode\u00a0=\u00a0'foot';\n$mode\u00a0=\u00a0next($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';\n$mode\u00a0=\u00a0next($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'car';\n$mode\u00a0=\u00a0prev($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';\n$mode\u00a0=\u00a0end($transport);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'plane';\n?>"}]},"ngettext":{"name":"ngettext","parameters":[{"type":"string","name":"$msgid1","description":"The singular message ID."},{"type":"string","name":"$msgid2","description":"The plural message ID."},{"type":"int","name":"$n","description":"The number (e.g. item count) to determine the translation for the respective grammatical number."}],"return":{"type":"string","values":[]},"short":"Plural version of gettext","examples":[{"title":"Example #1 ngettext() example","content":"<?php\n\nsetlocale(LC_ALL,\u00a0'cs_CZ');\nprintf(ngettext(\"%d\u00a0window\",\u00a0\"%d\u00a0windows\",\u00a01),\u00a01);\u00a0\/\/\u00a01\u00a0okno\nprintf(ngettext(\"%d\u00a0window\",\u00a0\"%d\u00a0windows\",\u00a02),\u00a02);\u00a0\/\/\u00a02\u00a0okna\nprintf(ngettext(\"%d\u00a0window\",\u00a0\"%d\u00a0windows\",\u00a05),\u00a05);\u00a0\/\/\u00a05\u00a0oken\n\n?>"}]},"nl2br":{"name":"nl2br","parameters":[{"type":"string","name":"$string","description":"The input string."},{"type":"bool","name":"$is_xhtml","default_value":"TRUE","description":"Whether to use XHTML compatible line breaks or not."}],"return":{"type":"string","values":[]},"short":"Inserts HTML line breaks before all newlines in a string","examples":[{"title":"Example #1 Using nl2br()","content":"<?php\necho\u00a0nl2br(\"foo\u00a0isn't\\n\u00a0bar\");\n?>"},{"title":"Example #2 Generating valid HTML markup using the is_xhtml parameter","content":"<?php\necho\u00a0nl2br(\"Welcome\\r\\nThis\u00a0is\u00a0my\u00a0HTML\u00a0document\",\u00a0false);\n?>"},{"title":"Example #3 Various newline separators","content":"<?php\n$string\u00a0=\u00a0\"This\\r\\nis\\n\\ra\\nstring\\r\";\necho\u00a0nl2br($string);\n?>"}]},"nl_langinfo":{"name":"nl_langinfo","parameters":[{"type":"int","name":"$item","description":"item may be an integer value of the element or the constant name of the element. The following is a list of constant names for item that may be used and their description. Some of these constants may not be defined or hold no value for certain locales.\n\nnl_langinfo Constants\n Constant Description LC_TIME Category Constants ABDAY_(1-7) Abbreviated name of n-th day of the week. DAY_(1-7) Name of the n-th day of the week (DAY_1 = Sunday). ABMON_(1-12) Abbreviated name of the n-th month of the year. MON_(1-12) Name of the n-th month of the year. AM_STR String for Ante meridian. PM_STR String for Post meridian. D_T_FMT String that can be used as the format string for strftime() to represent time and date. D_FMT String that can be used as the format string for strftime() to represent date. T_FMT String that can be used as the format string for strftime() to represent time. T_FMT_AMPM String that can be used as the format string for strftime() to represent time in 12-hour format with ante\/post meridian. ERA Alternate era. ERA_YEAR Year in alternate era format. ERA_D_T_FMT Date and time in alternate era format (string can be used in strftime()). ERA_D_FMT Date in alternate era format (string can be used in strftime()). ERA_T_FMT Time in alternate era format (string can be used in strftime()). LC_MONETARY Category Constants INT_CURR_SYMBOL International currency symbol. CURRENCY_SYMBOL Local currency symbol. CRNCYSTR Same value as CURRENCY_SYMBOL. MON_DECIMAL_POINT Decimal point character. MON_THOUSANDS_SEP Thousands separator (groups of three digits). MON_GROUPING Like \"grouping\" element. POSITIVE_SIGN Sign for positive values. NEGATIVE_SIGN Sign for negative values. INT_FRAC_DIGITS International fractional digits. FRAC_DIGITS Local fractional digits. P_CS_PRECEDES Returns 1 if CURRENCY_SYMBOL precedes a positive value. P_SEP_BY_SPACE Returns 1 if a space separates CURRENCY_SYMBOL from a positive value. N_CS_PRECEDES Returns 1 if CURRENCY_SYMBOL precedes a negative value. N_SEP_BY_SPACE Returns 1 if a space separates CURRENCY_SYMBOL from a negative value. P_SIGN_POSN\n\n\n Returns 0 if parentheses surround the quantity and CURRENCY_SYMBOL.\n\n\n\n Returns 1 if the sign string precedes the quantity and CURRENCY_SYMBOL.\n\n\n\n Returns 2 if the sign string follows the quantity and CURRENCY_SYMBOL.\n\n\n\n Returns 3 if the sign string immediately precedes the CURRENCY_SYMBOL.\n\n\n\n Returns 4 if the sign string immediately follows the CURRENCY_SYMBOL.\n\n\n N_SIGN_POSN LC_NUMERIC Category Constants DECIMAL_POINT Decimal point character. RADIXCHAR Same value as DECIMAL_POINT. THOUSANDS_SEP Separator character for thousands (groups of three digits). THOUSEP Same value as THOUSANDS_SEP. GROUPING \u00a0 LC_MESSAGES Category Constants YESEXPR Regex string for matching \"yes\" input. NOEXPR Regex string for matching \"no\" input. YESSTR Output string for \"yes\". NOSTR Output string for \"no\". LC_CTYPE Category Constants CODESET Return a string with the name of the character encoding."}],"return":{"type":"string","values":["FALSE"]},"short":"Query language and locale information","examples":[]},"number_format":{"name":"number_format","parameters":[{"type":"float","name":"$number","description":"The number being formatted."},{"type":"int","name":"$decimals","default_value":"0","description":"Sets the number of decimal points."},{"type":"string","name":"$dec_point","default_value":"\".\"","description":"Sets the separator for the decimal point."},{"type":"string","name":"$thousands_sep","default_value":"\",\"","description":"Sets the thousands separator."}],"return":{"type":"string","values":[]},"short":"Format a number with grouped thousands","examples":[{"title":"Example #1 number_format() Example","content":"For instance, French notation usually use two decimals,\n     comma (',') as decimal separator, and space (' ') as\n     thousand separator. The following example demonstrates various way to format a number:"}]},"ob_clean":{"name":"ob_clean","parameters":[],"return":{"type":"void","values":[]},"short":"Clean (erase) the output buffer","examples":[]},"ob_end_clean":{"name":"ob_end_clean","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Clean (erase) the output buffer and turn off output buffering","examples":[{"title":"Example #1 ob_end_clean() example","content":"<?php\nob_start();\necho\u00a0'Text\u00a0that\u00a0won\\'t\u00a0get\u00a0displayed.';\nob_end_clean();\n?>"}]},"ob_end_flush":{"name":"ob_end_flush","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Flush (send) the output buffer and turn off output buffering","examples":[{"title":"Example #1 ob_end_flush() example","content":"The following example shows an easy way to flush and end all output\n     buffers:"}]},"ob_flush":{"name":"ob_flush","parameters":[],"return":{"type":"void","values":[]},"short":"Flush (send) the output buffer","examples":[]},"ob_get_clean":{"name":"ob_get_clean","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Get current buffer contents and delete current output buffer","examples":[{"title":"Example #1 A simple ob_get_clean() example","content":"<?php\n\nob_start();\n\necho\u00a0\"Hello\u00a0World\";\n\n$out\u00a0=\u00a0ob_get_clean();\n$out\u00a0=\u00a0strtolower($out);\n\nvar_dump($out);\n?>"}]},"ob_get_contents":{"name":"ob_get_contents","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Return the contents of the output buffer","examples":[{"title":"Example #1 A simple ob_get_contents() example","content":"<?php\n\nob_start();\n\necho\u00a0\"Hello\u00a0\";\n\n$out1\u00a0=\u00a0ob_get_contents();\n\necho\u00a0\"World\";\n\n$out2\u00a0=\u00a0ob_get_contents();\n\nob_end_clean();\n\nvar_dump($out1,\u00a0$out2);\n?>"}]},"ob_get_flush":{"name":"ob_get_flush","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Flush the output buffer, return it as a string and turn off output buffering","examples":[{"title":"Example #1 ob_get_flush() example","content":"<?php\n\/\/using\u00a0output_buffering=On\nprint_r(ob_list_handlers());\n\n\/\/save\u00a0buffer\u00a0in\u00a0a\u00a0file\n$buffer\u00a0=\u00a0ob_get_flush();\nfile_put_contents('buffer.txt',\u00a0$buffer);\n\nprint_r(ob_list_handlers());\n?>"}]},"ob_get_length":{"name":"ob_get_length","parameters":[],"return":{"type":"int","values":["FALSE"]},"short":"Return the length of the output buffer","examples":[{"title":"Example #1 A simple ob_get_length() example","content":"<?php\n\nob_start();\n\necho\u00a0\"Hello\u00a0\";\n\n$len1\u00a0=\u00a0ob_get_length();\n\necho\u00a0\"World\";\n\n$len2\u00a0=\u00a0ob_get_length();\n\nob_end_clean();\n\necho\u00a0$len1\u00a0.\u00a0\",\u00a0.\"\u00a0.\u00a0$len2;\n?>"}]},"ob_get_level":{"name":"ob_get_level","parameters":[],"return":{"type":"int","values":[]},"short":"Return the nesting level of the output buffering mechanism","examples":[]},"ob_get_status":{"name":"ob_get_status","parameters":[{"type":"bool","name":"$full_status","default_value":"FALSE","description":"TRUE to return all active output buffer levels. If FALSE or not set, only the top level output buffer is returned."}],"return":{"type":"array","values":["FALSE","TRUE"]},"short":"Get status of output buffers","examples":[]},"ob_gzhandler":{"name":"ob_gzhandler","parameters":[{"type":"string","name":"$buffer","description":""},{"type":"int","name":"$mode","description":""}],"return":{"type":"string","values":[]},"short":"ob_start callback function to gzip output buffer","examples":[{"title":"Example #1 ob_gzhandler() example","content":"<?php\n\nob_start(\"ob_gzhandler\");\n\n?>\n<html>\n<body>\n<p>This\u00a0should\u00a0be\u00a0a\u00a0compressed\u00a0page.<\/p>\n<\/body>\n<\/html>"}]},"ob_implicit_flush":{"name":"ob_implicit_flush","parameters":[{"type":"int","name":"$flag","default_value":"1","description":"1 to turn implicit flushing on, 0 otherwise."}],"return":{"type":"void","values":[]},"short":"Turn implicit flush on\/off","examples":[]},"ob_list_handlers":{"name":"ob_list_handlers","parameters":[],"return":{"type":"array","values":[]},"short":"List all output handlers in use","examples":[{"title":"Example #1 ob_list_handlers() example","content":"<?php\n\/\/using\u00a0output_buffering=On\nprint_r(ob_list_handlers());\nob_end_flush();\n\nob_start(\"ob_gzhandler\");\nprint_r(ob_list_handlers());\nob_end_flush();\n\n\/\/\u00a0anonymous\u00a0functions\nob_start(function($string)\u00a0{\u00a0return\u00a0$string;\u00a0});\nprint_r(ob_list_handlers());\nob_end_flush();\n?>"}]},"ob_start":{"name":"ob_start","parameters":[{"type":"callable","name":"$output_callback","default_value":"NULL","description":"An optional output_callback function may be specified. This function takes a string as a parameter and should return a string. The function will be called when the output buffer is flushed (sent) or cleaned (with ob_flush(), ob_clean() or similar function) or when the output buffer is flushed to the browser at the end of the request.  When output_callback is called, it will receive the contents of the output buffer as its parameter and is expected to return a new output buffer as a result, which will be sent to the browser. If the output_callback is not a callable function, this function will return FALSE. This is the callback signature:\n\n\n\nstring handler ( string $buffer [, int $phase ] )\n\nbuffer\n\n\n\n Contents of the output buffer.\n\n\n\n\n\n phase\n\n\n\n Bitmask of PHP_OUTPUT_HANDLER_* constants.\n\nIf output_callback returns FALSE original input is sent to the browser.\n\nThe output_callback parameter may be bypassed by passing a NULL value.\n\nob_end_clean(), ob_end_flush(), ob_clean(), ob_flush() and ob_start() may not be called from a callback function. If you call them from callback function, the behavior is undefined. If you would like to delete the contents of a buffer, return \"\" (a null string) from callback function. You can't even call functions using the output buffering functions like print_r($expression, true) or highlight_file($filename, true) from a callback function.\n\nNote:\n ob_gzhandler() function exists to facilitate sending gz-encoded data to web browsers that support compressed web pages.  ob_gzhandler() determines what type of content encoding the browser will accept and will return its output accordingly."},{"type":"int","name":"$chunk_size","default_value":"0","description":"If the optional parameter chunk_size is passed, the buffer will be flushed after any output call which causes the buffer's length to equal or exceed chunk_size. The default value 0 means that the output function will only be called when the output buffer is closed.\n\nPrior to PHP 5.4.0, the value 1 was a special case value that set the chunk size to 4096 bytes."},{"type":"int","name":"$flags","default_value":"PHP_OUTPUT_HANDLER_STDFLAGS","description":"The flags parameter is a bitmask that controls the operations that can be performed on the output buffer. The default is to allow output buffers to be cleaned, flushed and removed, which can be set explicitly via PHP_OUTPUT_HANDLER_CLEANABLE | PHP_OUTPUT_HANDLER_FLUSHABLE | PHP_OUTPUT_HANDLER_REMOVABLE, or PHP_OUTPUT_HANDLER_STDFLAGS as shorthand.\n\nEach flag controls access to a set of functions, as described below:\n\nConstant Functions PHP_OUTPUT_HANDLER_CLEANABLE\n ob_clean(), ob_end_clean(), and ob_get_clean().\n PHP_OUTPUT_HANDLER_FLUSHABLE\n ob_end_flush(), ob_flush(), and ob_get_flush().\n PHP_OUTPUT_HANDLER_REMOVABLE\n ob_end_clean(), ob_end_flush(), and ob_get_flush()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Turn on output buffering","examples":[{"title":"Example #1 User defined callback function example","content":"<?php\n\nfunction\u00a0callback($buffer)\n{\n\u00a0\u00a0\/\/\u00a0replace\u00a0all\u00a0the\u00a0apples\u00a0with\u00a0oranges\n\u00a0\u00a0return\u00a0(str_replace(\"apples\",\u00a0\"oranges\",\u00a0$buffer));\n}\n\nob_start(\"callback\");\n\n?>\n<html>\n<body>\n<p>It's\u00a0like\u00a0comparing\u00a0apples\u00a0to\u00a0oranges.<\/p>\n<\/body>\n<\/html>\n<?php\n\nob_end_flush();\n\n?>"},{"title":"Example #2 Creating an uneraseable output buffer in a way compatible with both PHP 5.3 and 5.4","content":"<?php\n\nif\u00a0(version_compare(PHP_VERSION,\u00a0'5.4.0',\u00a0'>='))\u00a0{\n\u00a0\u00a0ob_start(null,\u00a00,\u00a0PHP_OUTPUT_HANDLER_STDFLAGS\u00a0^\n\u00a0\u00a0\u00a0\u00a0PHP_OUTPUT_HANDLER_REMOVABLE);\n}\u00a0else\u00a0{\n\u00a0\u00a0ob_start(null,\u00a00,\u00a0false);\n}\n\n?>"}]},"octdec":{"name":"octdec","parameters":[{"type":"string","name":"$octal_string","description":"The octal string to convert"}],"return":{"type":"number","values":[]},"short":"Octal to decimal","examples":[{"title":"Example #1 octdec() example","content":"<?php\necho\u00a0octdec('77')\u00a0.\u00a0\"\\n\";\necho\u00a0octdec(decoct(45));\n?>"}]},"opcache_compile_file":{"name":"opcache_compile_file","parameters":[{"type":"string","name":"$file","description":"The path to the PHP script to be compiled."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Compiles and caches a PHP script without executing it","examples":[]},"opcache_get_configuration":{"name":"opcache_get_configuration","parameters":[],"return":{"type":"array","values":[]},"short":"Get configuration information about the cache","examples":[]},"opcache_get_status":{"name":"opcache_get_status","parameters":[{"type":"bool","name":"$get_scripts","default_value":"TRUE","description":"Include script specific state information"}],"return":{"type":"array","values":[]},"short":"Get status information about the cache","examples":[]},"opcache_invalidate":{"name":"opcache_invalidate","parameters":[{"type":"string","name":"$script","description":"The path to the script being invalidated."},{"type":"bool","name":"$force","default_value":"FALSE","description":"If set to TRUE, the script will be invalidated regardless of whether invalidation is necessary."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Invalidates a cached script","examples":[]},"opcache_is_script_cached":{"name":"opcache_is_script_cached","parameters":[{"type":"string","name":"$file","description":"The path to the PHP script to be checked."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Tells whether a script is cached in OPCache","examples":[]},"opcache_reset":{"name":"opcache_reset","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Resets the contents of the opcode cache","examples":[]},"opendir":{"name":"opendir","parameters":[{"type":"string","name":"$path","description":"The directory path that is to be opened"},{"type":"resource","name":"$context","description":"For a description of the context parameter, refer to the streams section of the manual."}],"return":{"type":"resource","values":["FALSE"]},"short":"Open directory handle","examples":[{"title":"Example #1 opendir() example","content":"<?php\n$dir\u00a0=\u00a0\"\/etc\/php5\/\";\n\n\/\/\u00a0Open\u00a0a\u00a0known\u00a0directory,\u00a0and\u00a0proceed\u00a0to\u00a0read\u00a0its\u00a0contents\nif\u00a0(is_dir($dir))\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0($dh\u00a0=\u00a0opendir($dir))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0while\u00a0(($file\u00a0=\u00a0readdir($dh))\u00a0!==\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"filename:\u00a0$file\u00a0:\u00a0filetype:\u00a0\"\u00a0.\u00a0filetype($dir\u00a0.\u00a0$file)\u00a0.\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0closedir($dh);\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"openlog":{"name":"openlog","parameters":[{"type":"string","name":"$ident","description":"The string ident is added to each message."},{"type":"int","name":"$option","description":"The option argument is used to indicate what logging options will be used when generating a log message.\n\nopenlog() Options\n Constant Description LOG_CONS\n if there is an error while sending data to the system logger, write directly to the system console\n LOG_NDELAY\n open the connection to the logger immediately\n LOG_ODELAY\n (default) delay opening the connection until the first message is logged\n LOG_PERROR print log message also to standard error LOG_PID include PID with each message\n\nOR\n\nLOG_CONS | LOG_NDELAY | LOG_PID"},{"type":"int","name":"$facility","description":"The facility argument is used to specify what type of program is logging the message. This allows you to specify (in your machine's syslog configuration) how messages coming from different facilities will be handled.\n\nopenlog() Facilities\n Constant Description LOG_AUTH\n security\/authorization messages (use LOG_AUTHPRIV instead in systems where that constant is defined)\n LOG_AUTHPRIV security\/authorization messages (private) LOG_CRON clock daemon (cron and at) LOG_DAEMON other system daemons LOG_KERN kernel messages LOG_LOCAL0 ... LOG_LOCAL7 reserved for local use, these are not available in Windows LOG_LPR line printer subsystem LOG_MAIL mail subsystem LOG_NEWS USENET news subsystem LOG_SYSLOG messages generated internally by syslogd LOG_USER generic user-level messages LOG_UUCP UUCP subsystem\n\nNote:\n LOG_USER is the only valid log type under Windows operating systems"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Open connection to system logger","examples":[]},"openssl_cipher_iv_length":{"name":"openssl_cipher_iv_length","parameters":[{"type":"string","name":"$method","description":"The cipher method, see openssl_get_cipher_methods() for a list of potential values."}],"return":{"type":"int","values":["FALSE"]},"short":"Gets the cipher iv length","examples":[{"title":"Example #1 openssl_cipher_iv_length() example","content":"<?php\n$method\u00a0=\u00a0'AES-128-CBC';\n$ivlen\u00a0=\u00a0openssl_cipher_iv_length($method);\n\necho\u00a0$ivlen;\n?>"}]},"openssl_csr_export":{"name":"openssl_csr_export","parameters":[{"type":"mixed","name":"$csr","description":"See CSR parameters for a list of valid values."},{"type":"bool","name":"$notext","default_value":"TRUE","description":"The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. The default value of notext is TRUE."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Exports a CSR as a string","examples":[{"title":"Example #1 openssl_csr_export() example","content":"<?php\n$subject\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\"commonName\"\u00a0=>\u00a0\"example.com\",\n);\n$private_key\u00a0=\u00a0openssl_pkey_new(array(\n\u00a0\u00a0\u00a0\u00a0\"private_key_bits\"\u00a0=>\u00a02048,\n\u00a0\u00a0\u00a0\u00a0\"private_key_type\"\u00a0=>\u00a0OPENSSL_KEYTYPE_RSA,\n));\n$configargs\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'digest_alg'\u00a0=>\u00a0'sha256WithRSAEncryption'\n);\n$csr\u00a0=\u00a0openssl_csr_new($subject,\u00a0$private_key,\u00a0$configargs);\nopenssl_csr_export($csr,\u00a0$csr_string);\necho\u00a0$csr_string;\n?>"}]},"openssl_csr_export_to_file":{"name":"openssl_csr_export_to_file","parameters":[{"type":"mixed","name":"$csr","description":"See CSR parameters for a list of valid values."},{"type":"string","name":"$outfilename","description":"Path to the output file."},{"type":"bool","name":"$notext","default_value":"TRUE","description":"The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. The default value of notext is TRUE."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Exports a CSR to a file","examples":[{"title":"Example #1 openssl_csr_export_to_file() example","content":"<?php\n$subject\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\"commonName\"\u00a0=>\u00a0\"example.com\",\n);\n$private_key\u00a0=\u00a0openssl_pkey_new(array(\n\u00a0\u00a0\u00a0\u00a0\"private_key_bits\"\u00a0=>\u00a02048,\n\u00a0\u00a0\u00a0\u00a0\"private_key_type\"\u00a0=>\u00a0OPENSSL_KEYTYPE_RSA,\n));\n$csr\u00a0=\u00a0openssl_csr_new($subject,\u00a0$private_key,\u00a0array('digest_alg'\u00a0=>\u00a0'sha384')\u00a0);\nopenssl_pkey_export_to_file($private_key,\u00a0'example-priv.key');\n\/\/\u00a0Along\u00a0with\u00a0the\u00a0subject,\u00a0the\u00a0CSR\u00a0contains\u00a0the\u00a0public\u00a0key\u00a0corresponding\u00a0to\u00a0the\u00a0private\u00a0key\nopenssl_csr_export_to_file($csr,\u00a0'example-csr.pem');\n?>"}]},"openssl_csr_get_public_key":{"name":"openssl_csr_get_public_key","parameters":[{"type":"mixed","name":"$csr","description":"See CSR parameters for a list of valid values."},{"type":"bool","name":"$use_shortnames","default_value":"TRUE","description":"Warning\n This parameter is ignored"}],"return":{"type":"resource","values":[]},"short":"Returns the public key of a CSR","examples":[{"title":"Example #1 openssl_csr_get_public_key() example","content":"<?php\n$subject\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\"commonName\"\u00a0=>\u00a0\"example.com\",\n);\n$private_key\u00a0=\u00a0openssl_pkey_new(array(\n\u00a0\u00a0\u00a0\u00a0\"private_key_bits\"\u00a0=>\u00a02048,\n\u00a0\u00a0\u00a0\u00a0\"private_key_type\"\u00a0=>\u00a0OPENSSL_KEYTYPE_RSA,\n));\n$csr\u00a0=\u00a0openssl_csr_new($subject,\u00a0$private_key,\u00a0array('digest_alg'\u00a0=>\u00a0'sha256')\u00a0);\n$public_key\u00a0=\u00a0openssl_csr_get_public_key($csr);\n$info\u00a0=\u00a0openssl_pkey_get_details($public_key);\necho\u00a0$info['key'];\n?>"}]},"openssl_csr_get_subject":{"name":"openssl_csr_get_subject","parameters":[{"type":"mixed","name":"$csr","description":"See CSR parameters for a list of valid values."},{"type":"bool","name":"$use_shortnames","default_value":"TRUE","description":"shortnames controls how the data is indexed in the array - if shortnames is TRUE (the default) then fields will be indexed with the short name form, otherwise, the long name form will be used - e.g.: CN is the shortname form of commonName."}],"return":{"type":"array","values":["TRUE","FALSE"]},"short":"Returns the subject of a CSR","examples":[{"title":"Example #1 openssl_csr_get_subject() example","content":"<?php\n$subject\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\"countryName\"\u00a0=>\u00a0\"CA\",\n\u00a0\u00a0\u00a0\u00a0\"stateOrProvinceName\"\u00a0=>\u00a0\"Alberta\",\n\u00a0\u00a0\u00a0\u00a0\"localityName\"\u00a0=>\u00a0\"Calgary\",\n\u00a0\u00a0\u00a0\u00a0\"organizationName\"\u00a0=>\u00a0\"XYZ\u00a0Widgets\u00a0Inc\",\n\u00a0\u00a0\u00a0\u00a0\"organizationalUnitName\"\u00a0=>\u00a0\"PHP\u00a0Documentation\u00a0Team\",\n\u00a0\u00a0\u00a0\u00a0\"commonName\"\u00a0=>\u00a0\"Wez\u00a0Furlong\",\n\u00a0\u00a0\u00a0\u00a0\"emailAddress\"\u00a0=>\u00a0\"wez@example.com\",\n);\n$private_key\u00a0=\u00a0openssl_pkey_new(array(\n\u00a0\u00a0\u00a0\u00a0\"private_key_bits\"\u00a0=>\u00a02048,\n\u00a0\u00a0\u00a0\u00a0\"private_key_type\"\u00a0=>\u00a0OPENSSL_KEYTYPE_RSA,\n));\n$configargs\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'digest_alg'\u00a0=>\u00a0'sha512WithRSAEncryption'\n);\n$csr\u00a0=\u00a0openssl_csr_new($subject,\u00a0$privkey,\u00a0$configargs);\nprint_r(openssl_csr_get_subject($csr));\n?>"}]},"openssl_csr_new":{"name":"openssl_csr_new","parameters":[{"type":"array","name":"$dn","description":"The Distinguished Name or subject fields to be used in the certificate."},{"type":"array","name":"$configargs","description":"By default, the information in your system openssl.conf is used to initialize the request; you can specify a configuration file section by setting the config_section_section key of configargs.  You can also specify an alternative openssl configuration file by setting the value of the config key to the path of the file you want to use. The following keys, if present in configargs behave as their equivalents in the openssl.conf, as listed in the table below.\n\nConfiguration overrides\n configargs key type openssl.conf equivalent description digest_alg string default_md Digest method or signature hash, usually one of openssl_get_md_methods() x509_extensions string x509_extensions Selects which extensions should be used when creating an x509 certificate req_extensions string req_extensions Selects which extensions should be used when creating a CSR private_key_bits integer default_bits Specifies how many bits should be used to generate a private key private_key_type integer none Specifies the type of private key to create.  This can be one of OPENSSL_KEYTYPE_DSA, OPENSSL_KEYTYPE_DH, OPENSSL_KEYTYPE_RSA or OPENSSL_KEYTYPE_EC. The default value is OPENSSL_KEYTYPE_RSA.\n encrypt_key boolean encrypt_key Should an exported key (with passphrase) be encrypted? encrypt_key_cipher integer none\n One of cipher constants.\n curve_name string none\n PHP 7.1+, One of openssl_get_curve_names().\n config string N\/A\n Path to your own alternative openssl.conf file."},{"type":"array","name":"$extraattribs","description":"extraattribs is used to specify additional configuration options for the CSR.  Both dn and extraattribs are associative arrays whose keys are converted to OIDs and applied to the relevant part of the request."}],"return":{"type":"mixed","values":["FALSE"]},"short":"Generates a CSR","examples":[{"title":"Example #1 Creating a self-signed certificate","content":"<?php\n\/\/\u00a0for\u00a0SSL\u00a0server\u00a0certificates\u00a0the\u00a0commonName\u00a0is\u00a0the\u00a0domain\u00a0name\u00a0to\u00a0be\u00a0secured\n\/\/\u00a0for\u00a0S\/MIME\u00a0email\u00a0certificates\u00a0the\u00a0commonName\u00a0is\u00a0the\u00a0owner\u00a0of\u00a0the\u00a0email\u00a0address\n\/\/\u00a0location\u00a0and\u00a0identification\u00a0fields\u00a0refer\u00a0to\u00a0the\u00a0owner\u00a0of\u00a0domain\u00a0or\u00a0email\u00a0subject\u00a0to\u00a0be\u00a0secured\n$dn\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\"countryName\"\u00a0=>\u00a0\"GB\",\n\u00a0\u00a0\u00a0\u00a0\"stateOrProvinceName\"\u00a0=>\u00a0\"Somerset\",\n\u00a0\u00a0\u00a0\u00a0\"localityName\"\u00a0=>\u00a0\"Glastonbury\",\n\u00a0\u00a0\u00a0\u00a0\"organizationName\"\u00a0=>\u00a0\"The\u00a0Brain\u00a0Room\u00a0Limited\",\n\u00a0\u00a0\u00a0\u00a0\"organizationalUnitName\"\u00a0=>\u00a0\"PHP\u00a0Documentation\u00a0Team\",\n\u00a0\u00a0\u00a0\u00a0\"commonName\"\u00a0=>\u00a0\"Wez\u00a0Furlong\",\n\u00a0\u00a0\u00a0\u00a0\"emailAddress\"\u00a0=>\u00a0\"wez@example.com\"\n);\n\n\/\/\u00a0Generate\u00a0a\u00a0new\u00a0private\u00a0(and\u00a0public)\u00a0key\u00a0pair\n$privkey\u00a0=\u00a0openssl_pkey_new(array(\n\u00a0\u00a0\u00a0\u00a0\"private_key_bits\"\u00a0=>\u00a02048,\n\u00a0\u00a0\u00a0\u00a0\"private_key_type\"\u00a0=>\u00a0OPENSSL_KEYTYPE_RSA,\n));\n\n\/\/\u00a0Generate\u00a0a\u00a0certificate\u00a0signing\u00a0request\n$csr\u00a0=\u00a0openssl_csr_new($dn,\u00a0$privkey,\u00a0array('digest_alg'\u00a0=>\u00a0'sha256'));\n\n\/\/\u00a0Generate\u00a0a\u00a0self-signed\u00a0cert,\u00a0valid\u00a0for\u00a0365\u00a0days\n$x509\u00a0=\u00a0openssl_csr_sign($csr,\u00a0null,\u00a0$privkey,\u00a0$days=365,\u00a0array('digest_alg'\u00a0=>\u00a0'sha256'));\n\n\/\/\u00a0Save\u00a0your\u00a0private\u00a0key,\u00a0CSR\u00a0and\u00a0self-signed\u00a0cert\u00a0for\u00a0later\u00a0use\nopenssl_csr_export($csr,\u00a0$csrout)\u00a0and\u00a0var_dump($csrout);\nopenssl_x509_export($x509,\u00a0$certout)\u00a0and\u00a0var_dump($certout);\nopenssl_pkey_export($privkey,\u00a0$pkeyout,\u00a0\"mypassword\")\u00a0and\u00a0var_dump($pkeyout);\n\n\/\/\u00a0Show\u00a0any\u00a0errors\u00a0that\u00a0occurred\u00a0here\nwhile\u00a0(($e\u00a0=\u00a0openssl_error_string())\u00a0!==\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$e\u00a0.\u00a0\"\\n\";\n}\n?>"},{"title":"Example #2 Creating a self-signed ECC certificate in PHP 7.1+","content":"<?php\n$subject\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\"commonName\"\u00a0=>\u00a0\"docs.php.net\",\n);\n\n\/\/\u00a0Generate\u00a0a\u00a0new\u00a0private\u00a0(and\u00a0public)\u00a0key\u00a0pair\n$private_key\u00a0=\u00a0openssl_pkey_new(array(\n\u00a0\u00a0\u00a0\u00a0\"private_key_type\"\u00a0=>\u00a0OPENSSL_KEYTYPE_EC,\n\u00a0\u00a0\u00a0\u00a0\"curve_name\"\u00a0=>\u00a0'prime256v1',\n));\n\n\/\/\u00a0Generate\u00a0a\u00a0certificate\u00a0signing\u00a0request\n$csr\u00a0=\u00a0openssl_csr_new($subject,\u00a0$private_key,\u00a0array('digest_alg'\u00a0=>\u00a0'sha384'));\n\n\/\/\u00a0Generate\u00a0self-signed\u00a0EC\u00a0cert\n$x509\u00a0=\u00a0openssl_csr_sign($csr,\u00a0null,\u00a0$private_key,\u00a0$days=365,\u00a0array('digest_alg'\u00a0=>\u00a0'sha384'));\nopenssl_x509_export_to_file($x509,\u00a0'ecc-cert.pem');\nopenssl_pkey_export_to_file($private_key,\u00a0'ecc-private.key');\n?>"}]},"openssl_csr_sign":{"name":"openssl_csr_sign","parameters":[{"type":"mixed","name":"$csr","description":"A CSR previously generated by openssl_csr_new(). It can also be the path to a PEM encoded CSR when specified as file:\/\/path\/to\/csr or an exported string generated by openssl_csr_export()."},{"type":"mixed","name":"$cacert","description":"The generated certificate will be signed by cacert. If cacert is NULL, the generated certificate will be a self-signed certificate."},{"type":"mixed","name":"$priv_key","description":"priv_key is the private key that corresponds to cacert."},{"type":"int","name":"$days","description":"days specifies the length of time for which the generated certificate will be valid, in days."},{"type":"array","name":"$configargs","description":"You can finetune the CSR signing by configargs. See openssl_csr_new() for more information about configargs."},{"type":"int","name":"$serial","default_value":"0","description":"An optional the serial number of issued certificate. If not specified it will default to 0."}],"return":{"type":"resource","values":["FALSE"]},"short":"Sign a CSR with another certificate (or itself) and generate a certificate","examples":[{"title":"Example #1 openssl_csr_sign() example - signing a\n     CSR (how to implement your own CA)","content":"<?php\n\/\/\u00a0Let's\u00a0assume\u00a0that\u00a0this\u00a0script\u00a0is\u00a0set\u00a0to\u00a0receive\u00a0a\u00a0CSR\u00a0that\u00a0has\n\/\/\u00a0been\u00a0pasted\u00a0into\u00a0a\u00a0textarea\u00a0from\u00a0another\u00a0page\n$csrdata\u00a0=\u00a0$_POST[\"CSR\"];\n\n\/\/\u00a0We\u00a0will\u00a0sign\u00a0the\u00a0request\u00a0using\u00a0our\u00a0own\u00a0\"certificate\u00a0authority\"\n\/\/\u00a0certificate.\u00a0\u00a0You\u00a0can\u00a0use\u00a0any\u00a0certificate\u00a0to\u00a0sign\u00a0another,\u00a0but\n\/\/\u00a0the\u00a0process\u00a0is\u00a0worthless\u00a0unless\u00a0the\u00a0signing\u00a0certificate\u00a0is\u00a0trusted\n\/\/\u00a0by\u00a0the\u00a0software\/users\u00a0that\u00a0will\u00a0deal\u00a0with\u00a0the\u00a0newly\u00a0signed\u00a0certificate\n\n\/\/\u00a0We\u00a0need\u00a0our\u00a0CA\u00a0cert\u00a0and\u00a0its\u00a0private\u00a0key\n$cacert\u00a0=\u00a0\"file:\/\/path\/to\/ca.crt\";\n$privkey\u00a0=\u00a0array(\"file:\/\/path\/to\/ca.key\",\u00a0\"your_ca_key_passphrase\");\n\n$usercert\u00a0=\u00a0openssl_csr_sign($csrdata,\u00a0$cacert,\u00a0$privkey,\u00a0365,\u00a0array('digest_alg'=>'sha256')\u00a0);\n\n\/\/\u00a0Now\u00a0display\u00a0the\u00a0generated\u00a0certificate\u00a0so\u00a0that\u00a0the\u00a0user\u00a0can\n\/\/\u00a0copy\u00a0and\u00a0paste\u00a0it\u00a0into\u00a0their\u00a0local\u00a0configuration\u00a0(such\u00a0as\u00a0a\u00a0file\n\/\/\u00a0to\u00a0hold\u00a0the\u00a0certificate\u00a0for\u00a0their\u00a0SSL\u00a0server)\nopenssl_x509_export($usercert,\u00a0$certout);\necho\u00a0$certout;\n\n\/\/\u00a0Show\u00a0any\u00a0errors\u00a0that\u00a0occurred\u00a0here\nwhile\u00a0(($e\u00a0=\u00a0openssl_error_string())\u00a0!==\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$e\u00a0.\u00a0\"\\n\";\n}\n?>"}]},"openssl_decrypt":{"name":"openssl_decrypt","parameters":[{"type":"string","name":"$data","description":"The encrypted message to be decrypted."},{"type":"string","name":"$method","description":"The cipher method. For a list of available cipher methods, use openssl_get_cipher_methods()."},{"type":"string","name":"$key","description":"The key."},{"type":"int","name":"$options","default_value":"0","description":"options can be one of OPENSSL_RAW_DATA, OPENSSL_ZERO_PADDING."},{"type":"string","name":"$iv","default_value":"\"\"","description":"A non-NULL Initialization Vector."},{"type":"string","name":"$tag","default_value":"\"\"","description":"The authentication tag in AEAD cipher mode. If it is incorrect, the authentication fails and the function returns FALSE."},{"type":"string","name":"$aad","default_value":"\"\"","description":"Additional authentication data."}],"return":{"type":"string","values":["FALSE"]},"short":"Decrypts data","examples":[]},"openssl_dh_compute_key":{"name":"openssl_dh_compute_key","parameters":[{"type":"string","name":"$pub_key","description":"DH Public key of the remote party."},{"type":"resource","name":"$dh_key","description":"A local DH private key, corresponding to the public key to be shared with the remote party."}],"return":{"type":"string","values":["FALSE"]},"short":"Computes shared secret for public value of remote DH public key and local DH key","examples":[{"title":"Example #1 Compute a shared secret","content":"First generate a public\/private DH keypair locally, and have \n    the remote party do the same.  We need to use the openssl\n    command-line utility."},{"title":"Example #2 Generate a DH public\/private keypair in php","content":"First, generate the DH prime number"}]},"openssl_digest":{"name":"openssl_digest","parameters":[{"type":"string","name":"$data","description":"The data."},{"type":"string","name":"$method","description":"The digest method to use, e.g. \"sha256\", see openssl_get_md_methods() for a list of available digest methods."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"Setting to TRUE will return as raw output data, otherwise the return value is binhex encoded."}],"return":{"type":"string","values":["FALSE"]},"short":"Computes a digest","examples":[]},"openssl_encrypt":{"name":"openssl_encrypt","parameters":[{"type":"string","name":"$data","description":"The plaintext message data to be encrypted."},{"type":"string","name":"$method","description":"The cipher method. For a list of available cipher methods, use openssl_get_cipher_methods()."},{"type":"string","name":"$key","description":"The key."},{"type":"int","name":"$options","default_value":"0","description":"options is a bitwise disjunction of the flags OPENSSL_RAW_DATA and OPENSSL_ZERO_PADDING."},{"type":"string","name":"$iv","default_value":"\"\"","description":"A non-NULL Initialization Vector."},{"type":"string","name":"$aad","default_value":"\"\"","description":"Additional authentication data."},{"type":"int","name":"$tag_length","default_value":"16","description":"The length of the authentication tag. Its value can be between 4 and 16 for GCM mode."}],"return":{"type":"string","values":["FALSE"]},"short":"Encrypts data","examples":[{"title":"Example #1 AES Authenticated Encryption in GCM mode example for PHP 7.1+","content":"<?php\n\/\/$key\u00a0should\u00a0have\u00a0been\u00a0previously\u00a0generated\u00a0in\u00a0a\u00a0cryptographically\u00a0safe\u00a0way,\u00a0like\u00a0openssl_random_pseudo_bytes\n$plaintext\u00a0=\u00a0\"message\u00a0to\u00a0be\u00a0encrypted\";\n$cipher\u00a0=\u00a0\"aes-128-gcm\";\nif\u00a0(in_array($cipher,\u00a0openssl_get_cipher_methods()))\n{\n\u00a0\u00a0\u00a0\u00a0$ivlen\u00a0=\u00a0openssl_cipher_iv_length($cipher);\n\u00a0\u00a0\u00a0\u00a0$iv\u00a0=\u00a0openssl_random_pseudo_bytes($ivlen);\n\u00a0\u00a0\u00a0\u00a0$ciphertext\u00a0=\u00a0openssl_encrypt($plaintext,\u00a0$cipher,\u00a0$key,\u00a0$options=0,\u00a0$iv,\u00a0$tag);\n\u00a0\u00a0\u00a0\u00a0\/\/store\u00a0$cipher,\u00a0$iv,\u00a0and\u00a0$tag\u00a0for\u00a0decryption\u00a0later\n\u00a0\u00a0\u00a0\u00a0$original_plaintext\u00a0=\u00a0openssl_decrypt($ciphertext,\u00a0$cipher,\u00a0$key,\u00a0$options=0,\u00a0$iv,\u00a0$tag);\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$original_plaintext.\"\\n\";\n}\n?>"},{"title":"Example #2 AES Authenticated Encryption example for PHP 5.6+","content":"<?php\n\/\/$key\u00a0previously\u00a0generated\u00a0safely,\u00a0ie:\u00a0openssl_random_pseudo_bytes\n$plaintext\u00a0=\u00a0\"message\u00a0to\u00a0be\u00a0encrypted\";\n$ivlen\u00a0=\u00a0openssl_cipher_iv_length($cipher=\"AES-128-CBC\");\n$iv\u00a0=\u00a0openssl_random_pseudo_bytes($ivlen);\n$ciphertext_raw\u00a0=\u00a0openssl_encrypt($plaintext,\u00a0$cipher,\u00a0$key,\u00a0$options=OPENSSL_RAW_DATA,\u00a0$iv);\n$hmac\u00a0=\u00a0hash_hmac('sha256',\u00a0$ciphertext_raw,\u00a0$key,\u00a0$as_binary=true);\n$ciphertext\u00a0=\u00a0base64_encode(\u00a0$iv.$hmac.$ciphertext_raw\u00a0);\n\n\/\/decrypt\u00a0later....\n$c\u00a0=\u00a0base64_decode($ciphertext);\n$ivlen\u00a0=\u00a0openssl_cipher_iv_length($cipher=\"AES-128-CBC\");\n$iv\u00a0=\u00a0substr($c,\u00a00,\u00a0$ivlen);\n$hmac\u00a0=\u00a0substr($c,\u00a0$ivlen,\u00a0$sha2len=32);\n$ciphertext_raw\u00a0=\u00a0substr($c,\u00a0$ivlen+$sha2len);\n$original_plaintext\u00a0=\u00a0openssl_decrypt($ciphertext_raw,\u00a0$cipher,\u00a0$key,\u00a0$options=OPENSSL_RAW_DATA,\u00a0$iv);\n$calcmac\u00a0=\u00a0hash_hmac('sha256',\u00a0$ciphertext_raw,\u00a0$key,\u00a0$as_binary=true);\nif\u00a0(hash_equals($hmac,\u00a0$calcmac))\/\/PHP\u00a05.6+\u00a0timing\u00a0attack\u00a0safe\u00a0comparison\n{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$original_plaintext.\"\\n\";\n}\n?>"}]},"openssl_error_string":{"name":"openssl_error_string","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Return openSSL error message","examples":[{"title":"Example #1 openssl_error_string() example","content":"<?php\n\/\/\u00a0lets\u00a0assume\u00a0you\u00a0just\u00a0called\u00a0an\u00a0openssl\u00a0function\u00a0that\u00a0failed\nwhile\u00a0($msg\u00a0=\u00a0openssl_error_string())\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$msg\u00a0.\u00a0\"<br\u00a0\/>\\n\";\n?>"}]},"openssl_free_key":{"name":"openssl_free_key","parameters":[{"type":"resource","name":"$key_identifier","description":""}],"return":{"type":"void","values":[]},"short":"Free key resource","examples":[]},"openssl_get_cert_locations":{"name":"openssl_get_cert_locations","parameters":[],"return":{"type":"array","values":[]},"short":"Retrieve the available certificate locations","examples":[{"title":"Example #1 openssl_get_cert_locations() example","content":"<?php\nvar_dump(openssl_get_cert_locations());\n?>"}]},"openssl_get_cipher_methods":{"name":"openssl_get_cipher_methods","parameters":[{"type":"bool","name":"$aliases","default_value":"FALSE","description":"Set to TRUE if cipher aliases should be included within the returned array."}],"return":{"type":"array","values":[]},"short":"Gets available cipher methods","examples":[{"title":"Example #1 openssl_get_cipher_methods() example","content":"Shows how the available ciphers might look, and also which aliases\n     might be available."}]},"openssl_get_curve_names":{"name":"openssl_get_curve_names","parameters":[],"return":{"type":"array","values":[]},"short":"Gets list of available curve names for ECC","examples":[{"title":"Example #1 openssl_get_curve_names() example","content":"<?php\n$curve_names\u00a0=\u00a0openssl_get_curve_names();\nprint_r($curve_names);\n?>"}]},"openssl_get_md_methods":{"name":"openssl_get_md_methods","parameters":[{"type":"bool","name":"$aliases","default_value":"FALSE","description":"Set to TRUE if digest aliases should be included within the returned array."}],"return":{"type":"array","values":[]},"short":"Gets available digest methods","examples":[{"title":"Example #1 openssl_get_md_methods() example","content":"Shows how the available digests might look, and also which aliases\n     might be available."}]},"openssl_get_privatekey":{"name":"openssl_get_privatekey","parameters":[],"return":{"type":"","values":[]},"short":"Alias of openssl_pkey_get_private()","examples":[]},"openssl_get_publickey":{"name":"openssl_get_publickey","parameters":[],"return":{"type":"","values":[]},"short":"Alias of openssl_pkey_get_public()","examples":[]},"openssl_open":{"name":"openssl_open","parameters":[{"type":"string","name":"$sealed_data","description":""},{"type":"string","name":"$env_key","description":""},{"type":"mixed","name":"$priv_key_id","description":""},{"type":"string","name":"$method","default_value":"\"RC4\"","description":"The cipher method."},{"type":"string","name":"$iv","description":"The initialization vector."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Open sealed data","examples":[{"title":"Example #1 openssl_open() example","content":"<?php\n\/\/\u00a0$sealed\u00a0and\u00a0$env_key\u00a0are\u00a0assumed\u00a0to\u00a0contain\u00a0the\u00a0sealed\u00a0data\n\/\/\u00a0and\u00a0our\u00a0envelope\u00a0key,\u00a0both\u00a0given\u00a0to\u00a0us\u00a0by\u00a0the\u00a0sealer.\n\n\/\/\u00a0fetch\u00a0private\u00a0key\u00a0from\u00a0file\u00a0and\u00a0ready\u00a0it\n$fp\u00a0=\u00a0fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/key.pem\",\u00a0\"r\");\n$priv_key\u00a0=\u00a0fread($fp,\u00a08192);\nfclose($fp);\n$pkeyid\u00a0=\u00a0openssl_get_privatekey($priv_key);\n\n\/\/\u00a0decrypt\u00a0the\u00a0data\u00a0and\u00a0store\u00a0it\u00a0in\u00a0$open\nif\u00a0(openssl_open($sealed,\u00a0$open,\u00a0$env_key,\u00a0$pkeyid))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"here\u00a0is\u00a0the\u00a0opened\u00a0data:\u00a0\",\u00a0$open;\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"failed\u00a0to\u00a0open\u00a0data\";\n}\n\n\/\/\u00a0free\u00a0the\u00a0private\u00a0key\u00a0from\u00a0memory\nopenssl_free_key($pkeyid);\n?>"}]},"openssl_pbkdf2":{"name":"openssl_pbkdf2","parameters":[{"type":"string","name":"$password","description":"Password from which the derived key is generated."},{"type":"string","name":"$salt","description":"PBKDF2 recommends a crytographic salt of at least 64 bits (8 bytes)."},{"type":"int","name":"$key_length","description":"Length of desired output key."},{"type":"int","name":"$iterations","description":"The number of iterations desired. \u00bb\u00a0NIST recommends at least 10,000."},{"type":"string","name":"$digest_algorithm","default_value":"\"sha1\"","description":"Optional hash or digest algorithm from openssl_get_md_methods().  Defaults to SHA-1."}],"return":{"type":"string","values":["FALSE"]},"short":"Generates a PKCS5 v2 PBKDF2 string","examples":[{"title":"Example #1 openssl_pbkdf2() example","content":"<?php\n$password\u00a0=\u00a0'yOuR-pAs5w0rd-hERe';\n$salt\u00a0=\u00a0openssl_random_pseudo_bytes(12);\n$keyLength\u00a0=\u00a040;\n$iterations\u00a0=\u00a010000;\n$generated_key\u00a0=\u00a0openssl_pbkdf2($password,\u00a0$salt,\u00a0$keyLength,\u00a0$iterations,\u00a0'sha256');\necho\u00a0bin2hex($generated_key).\"\\n\";\necho\u00a0base64_encode($generated_key).\"\\n\";\n?>"}]},"openssl_pkcs12_export":{"name":"openssl_pkcs12_export","parameters":[{"type":"mixed","name":"$x509","description":"See Key\/Certificate parameters for a list of valid values."},{"type":"mixed","name":"$priv_key","description":"Private key component of PKCS#12 file. See Public\/Private Key parameters for a list of valid values."},{"type":"string","name":"$pass","description":"Encryption password for unlocking the PKCS#12 file."},{"type":"array","name":"$args","description":"Optional array, other keys will be ignored.\n\nKey Description \"extracerts\" array of extra certificates or a single certificate to be included in the PKCS#12 file. \"friendlyname\" string to be used for the supplied certificate and key"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Exports a PKCS#12 Compatible Certificate Store File to variable","examples":[]},"openssl_pkcs12_export_to_file":{"name":"openssl_pkcs12_export_to_file","parameters":[{"type":"mixed","name":"$x509","description":"See Key\/Certificate parameters for a list of valid values."},{"type":"string","name":"$filename","description":"Path to the output file."},{"type":"mixed","name":"$priv_key","description":"Private key component of PKCS#12 file. See Public\/Private Key parameters for a list of valid values."},{"type":"string","name":"$pass","description":"Encryption password for unlocking the PKCS#12 file."},{"type":"array","name":"$args","description":"Optional array, other keys will be ignored.\n\nKey Description \"extracerts\" array of extra certificates or a single certificate to be included in the PKCS#12 file. \"friendlyname\" string to be used for the supplied certificate and key"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Exports a PKCS#12 Compatible Certificate Store File","examples":[]},"openssl_pkcs12_read":{"name":"openssl_pkcs12_read","parameters":[{"type":"string","name":"$pkcs12","description":"The certificate store contents, not its file name."},{"type":"string","name":"$pass","description":"Encryption password for unlocking the PKCS#12 file."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Parse a PKCS#12 Certificate Store into an array","examples":[{"title":"Example #1 openssl_pkcs12_read() example","content":"<?php\nif\u00a0(!$cert_store\u00a0=\u00a0file_get_contents(\"\/certs\/file.p12\"))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error:\u00a0Unable\u00a0to\u00a0read\u00a0the\u00a0cert\u00a0file\\n\";\n\u00a0\u00a0\u00a0\u00a0exit;\n}\n\nif\u00a0(openssl_pkcs12_read($cert_store,\u00a0$cert_info,\u00a0\"my_secret_pass\"))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Certificate\u00a0Information\\n\";\n\u00a0\u00a0\u00a0\u00a0print_r($cert_info);\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Error:\u00a0Unable\u00a0to\u00a0read\u00a0the\u00a0cert\u00a0store.\\n\";\n\u00a0\u00a0\u00a0\u00a0exit;\n}\n?>"}]},"openssl_pkcs7_decrypt":{"name":"openssl_pkcs7_decrypt","parameters":[{"type":"string","name":"$infilename","description":""},{"type":"string","name":"$outfilename","description":"The decrypted message is written to the file specified by outfilename."},{"type":"mixed","name":"$recipcert","description":""},{"type":"mixed","name":"$recipkey","description":""}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Decrypts an S\/MIME encrypted message","examples":[{"title":"Example #1 openssl_pkcs7_decrypt() example","content":"<?php\n\/\/\u00a0$cert\u00a0and\u00a0$key\u00a0are\u00a0assumed\u00a0to\u00a0contain\u00a0your\u00a0personal\u00a0certificate\u00a0and\u00a0private\n\/\/\u00a0key\u00a0pair,\u00a0and\u00a0that\u00a0you\u00a0are\u00a0the\u00a0recipient\u00a0of\u00a0an\u00a0S\/MIME\u00a0message\n$infilename\u00a0=\u00a0\"encrypted.msg\";\u00a0\u00a0\/\/\u00a0this\u00a0file\u00a0holds\u00a0your\u00a0encrypted\u00a0message\n$outfilename\u00a0=\u00a0\"decrypted.msg\";\u00a0\/\/\u00a0make\u00a0sure\u00a0you\u00a0can\u00a0write\u00a0to\u00a0this\u00a0file\n\nif\u00a0(openssl_pkcs7_decrypt($infilename,\u00a0$outfilename,\u00a0$cert,\u00a0$key))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"decrypted!\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"failed\u00a0to\u00a0decrypt!\";\n}\n?>"}]},"openssl_pkcs7_encrypt":{"name":"openssl_pkcs7_encrypt","parameters":[{"type":"string","name":"$infile","description":""},{"type":"string","name":"$outfile","description":""},{"type":"mixed","name":"$recipcerts","description":"Either a lone X.509 certificate, or an array of X.509 certificates."},{"type":"array","name":"$headers","description":"headers is an array of headers that will be prepended to the data after it has been encrypted.\n\nheaders can be either an associative array keyed by header name, or an indexed array, where each element contains a single header line."},{"type":"int","name":"$flags","default_value":"0","description":"flags can be used to specify options that affect the encoding process - see PKCS7 constants."},{"type":"int","name":"$cipherid","default_value":"OPENSSL_CIPHER_RC2_40","description":"One of cipher constants."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Encrypt an S\/MIME message","examples":[{"title":"Example #1 openssl_pkcs7_encrypt() example","content":"<?php\n\/\/\u00a0the\u00a0message\u00a0you\u00a0want\u00a0to\u00a0encrypt\u00a0and\u00a0send\u00a0to\u00a0your\u00a0secret\u00a0agent\n\/\/\u00a0in\u00a0the\u00a0field,\u00a0known\u00a0as\u00a0nighthawk.\u00a0\u00a0You\u00a0have\u00a0his\u00a0certificate\n\/\/\u00a0in\u00a0the\u00a0file\u00a0nighthawk.pem\n$data\u00a0=\u00a0<<<EOD\nNighthawk,\n\nTop\u00a0secret,\u00a0for\u00a0your\u00a0eyes\u00a0only!\n\nThe\u00a0enemy\u00a0is\u00a0closing\u00a0in!\u00a0Meet\u00a0me\u00a0at\u00a0the\u00a0cafe\u00a0at\u00a08.30am\nto\u00a0collect\u00a0your\u00a0forged\u00a0passport!\n\nHQ\nEOD;\n\n\/\/\u00a0load\u00a0key\n$key\u00a0=\u00a0file_get_contents(\"nighthawk.pem\");\n\n\/\/\u00a0save\u00a0message\u00a0to\u00a0file\n$fp\u00a0=\u00a0fopen(\"msg.txt\",\u00a0\"w\");\nfwrite($fp,\u00a0$data);\nfclose($fp);\n\n\/\/\u00a0encrypt\u00a0it\nif\u00a0(openssl_pkcs7_encrypt(\"msg.txt\",\u00a0\"enc.txt\",\u00a0$key,\n\u00a0\u00a0\u00a0\u00a0array(\"To\"\u00a0=>\u00a0\"nighthawk@example.com\",\u00a0\/\/\u00a0keyed\u00a0syntax\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"From:\u00a0HQ\u00a0<hq@example.com>\",\u00a0\/\/\u00a0indexed\u00a0syntax\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Subject\"\u00a0=>\u00a0\"Eyes\u00a0only\")))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0message\u00a0encrypted\u00a0-\u00a0send\u00a0it!\n\u00a0\u00a0\u00a0\u00a0exec(ini_get(\"sendmail_path\")\u00a0.\u00a0\"\u00a0<\u00a0enc.txt\");\n}\n?>"}]},"openssl_pkcs7_read":{"name":"openssl_pkcs7_read","parameters":[{"type":"string","name":"$infilename","description":""}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Export the PKCS7 file to an array of PEM certificates","examples":[]},"openssl_pkcs7_sign":{"name":"openssl_pkcs7_sign","parameters":[{"type":"string","name":"$infilename","description":"The input file you are intending to digitally sign."},{"type":"string","name":"$outfilename","description":"The file which the digital signature will be written to."},{"type":"mixed","name":"$signcert","description":"The X.509 certificate used to digitally sign infilename. See Key\/Certificate parameters for a list of valid values."},{"type":"mixed","name":"$privkey","description":"privkey is the private key corresponding to signcert. See Public\/Private Key parameters for a list of valid values."},{"type":"array","name":"$headers","description":"headers is an array of headers that will be prepended to the data after it has been signed (see openssl_pkcs7_encrypt() for more information about the format of this parameter)."},{"type":"int","name":"$flags","default_value":"PKCS7_DETACHED","description":"flags can be used to alter the output - see PKCS7 constants."},{"type":"string","name":"$extracerts","description":"extracerts specifies the name of a file containing a bunch of extra certificates to include in the signature which can for example be used to help the recipient to verify the certificate that you used."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sign an S\/MIME message","examples":[{"title":"Example #1 openssl_pkcs7_sign() example","content":"<?php\n\/\/\u00a0the\u00a0message\u00a0you\u00a0want\u00a0to\u00a0sign\u00a0so\u00a0that\u00a0recipient\u00a0can\u00a0be\u00a0sure\u00a0it\u00a0was\u00a0you\u00a0that\n\/\/\u00a0sent\u00a0it\n$data\u00a0=\u00a0<<<EOD\n\nYou\u00a0have\u00a0my\u00a0authorization\u00a0to\u00a0spend\u00a0$10,000\u00a0on\u00a0dinner\u00a0expenses.\n\nThe\u00a0CEO\nEOD;\n\/\/\u00a0save\u00a0message\u00a0to\u00a0file\n$fp\u00a0=\u00a0fopen(\"msg.txt\",\u00a0\"w\");\nfwrite($fp,\u00a0$data);\nfclose($fp);\n\/\/\u00a0encrypt\u00a0it\nif\u00a0(openssl_pkcs7_sign(\"msg.txt\",\u00a0\"signed.txt\",\u00a0\"file:\/\/mycert.pem\",\n\u00a0\u00a0\u00a0\u00a0array(\"file:\/\/mycert.pem\",\u00a0\"mypassphrase\"),\n\u00a0\u00a0\u00a0\u00a0array(\"To\"\u00a0=>\u00a0\"joes@example.com\",\u00a0\/\/\u00a0keyed\u00a0syntax\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"From:\u00a0HQ\u00a0<ceo@example.com>\",\u00a0\/\/\u00a0indexed\u00a0syntax\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Subject\"\u00a0=>\u00a0\"Eyes\u00a0only\")\n\u00a0\u00a0\u00a0\u00a0))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0message\u00a0signed\u00a0-\u00a0send\u00a0it!\n\u00a0\u00a0\u00a0\u00a0exec(ini_get(\"sendmail_path\")\u00a0.\u00a0\"\u00a0<\u00a0signed.txt\");\n}\n?>"}]},"openssl_pkcs7_verify":{"name":"openssl_pkcs7_verify","parameters":[{"type":"string","name":"$filename","description":"Path to the message."},{"type":"int","name":"$flags","description":"flags can be used to affect how the signature is verified - see PKCS7 constants for more information."},{"type":"string","name":"$outfilename","description":"If the outfilename is specified, it should be a string holding the name of a file into which the certificates of the persons that signed the messages will be stored in PEM format."},{"type":"array","name":"$cainfo","description":"If the cainfo is specified, it should hold information about the trusted CA certificates to use in the verification process - see certificate verification for more information about this parameter."},{"type":"string","name":"$extracerts","description":"If the extracerts is specified, it is the filename of a file containing a bunch of certificates to use as untrusted CAs."},{"type":"string","name":"$content","description":"You can specify a filename with content that will be filled with the verified data, but with the signature information stripped."},{"type":"string","name":"$p7bfilename","description":""}],"return":{"type":"mixed","values":["TRUE","FALSE"]},"short":"Verifies the signature of an S\/MIME signed message","examples":[]},"openssl_pkey_export":{"name":"openssl_pkey_export","parameters":[{"type":"mixed","name":"$key","description":""},{"type":"string","name":"$passphrase","description":"The key is optionally protected by passphrase."},{"type":"array","name":"$configargs","description":"configargs can be used to fine-tune the export process by specifying and\/or overriding options for the openssl configuration file.  See openssl_csr_new() for more information about configargs."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Gets an exportable representation of a key into a string","examples":[]},"openssl_pkey_export_to_file":{"name":"openssl_pkey_export_to_file","parameters":[{"type":"mixed","name":"$key","description":""},{"type":"string","name":"$outfilename","description":"Path to the output file."},{"type":"string","name":"$passphrase","description":"The key can be optionally protected by a passphrase."},{"type":"array","name":"$configargs","description":"configargs can be used to fine-tune the export process by specifying and\/or overriding options for the openssl configuration file. See openssl_csr_new() for more information about configargs."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Gets an exportable representation of a key into a file ","examples":[]},"openssl_pkey_free":{"name":"openssl_pkey_free","parameters":[{"type":"resource","name":"$key","description":"Resource holding the key."}],"return":{"type":"void","values":[]},"short":"Frees a private key","examples":[]},"openssl_pkey_get_details":{"name":"openssl_pkey_get_details","parameters":[{"type":"resource","name":"$key","description":"Resource holding the key."}],"return":{"type":"array","values":["FALSE","OPENSSL_KEYTYPE_RSA","OPENSSL_KEYTYPE_DSA","OPENSSL_KEYTYPE_DH","OPENSSL_KEYTYPE_EC"]},"short":"Returns an array with the key details","examples":[]},"openssl_pkey_get_private":{"name":"openssl_pkey_get_private","parameters":[{"type":"mixed","name":"$key","description":"key can be one of the following:\n\na string having the format file:\/\/path\/to\/file.pem. The named file must contain a PEM encoded certificate\/private key (it may contain both).\n\n A PEM formatted private key."},{"type":"string","name":"$passphrase","default_value":"\"\"","description":"The optional parameter passphrase must be used if the specified key is encrypted (protected by a passphrase)."}],"return":{"type":"resource","values":["FALSE"]},"short":"Get a private key","examples":[]},"openssl_pkey_get_public":{"name":"openssl_pkey_get_public","parameters":[{"type":"mixed","name":"$certificate","description":"certificate can be one of the following:\n\nan X.509 certificate resource a string having the format file:\/\/path\/to\/file.pem. The named file must contain a PEM encoded certificate\/public key (it may contain both).\n\n A PEM formatted public key."}],"return":{"type":"resource","values":["FALSE"]},"short":"Extract public key from certificate and prepare it for use","examples":[]},"openssl_pkey_new":{"name":"openssl_pkey_new","parameters":[{"type":"array","name":"$configargs","description":"You can finetune the key generation (such as specifying the number of bits) using configargs.  See openssl_csr_new() for more information about configargs."}],"return":{"type":"resource","values":["FALSE"]},"short":"Generates a new private key ","examples":[]},"openssl_private_decrypt":{"name":"openssl_private_decrypt","parameters":[{"type":"string","name":"$data","description":""},{"type":"mixed","name":"$key","description":"key must be the private key corresponding that was used to encrypt the data."},{"type":"int","name":"$padding","default_value":"OPENSSL_PKCS1_PADDING","description":"padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Decrypts data with private key ","examples":[]},"openssl_private_encrypt":{"name":"openssl_private_encrypt","parameters":[{"type":"string","name":"$data","description":""},{"type":"mixed","name":"$key","description":""},{"type":"int","name":"$padding","default_value":"OPENSSL_PKCS1_PADDING","description":"padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_NO_PADDING."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Encrypts data with private key ","examples":[]},"openssl_public_decrypt":{"name":"openssl_public_decrypt","parameters":[{"type":"string","name":"$data","description":""},{"type":"mixed","name":"$key","description":"key must be the public key corresponding that was used to encrypt the data."},{"type":"int","name":"$padding","default_value":"OPENSSL_PKCS1_PADDING","description":"padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_NO_PADDING."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Decrypts data with public key ","examples":[]},"openssl_public_encrypt":{"name":"openssl_public_encrypt","parameters":[{"type":"string","name":"$data","description":""},{"type":"mixed","name":"$key","description":"The public key."},{"type":"int","name":"$padding","default_value":"OPENSSL_PKCS1_PADDING","description":"padding can be one of OPENSSL_PKCS1_PADDING, OPENSSL_SSLV23_PADDING, OPENSSL_PKCS1_OAEP_PADDING, OPENSSL_NO_PADDING."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Encrypts data with public key ","examples":[]},"openssl_random_pseudo_bytes":{"name":"openssl_random_pseudo_bytes","parameters":[{"type":"int","name":"$length","description":"The length of the desired string of bytes. Must be a positive integer. PHP will try to cast this parameter to a non-null integer to use it."}],"return":{"type":"string","values":["FALSE"]},"short":"Generate a pseudo-random string of bytes","examples":[{"title":"Example #1 openssl_random_pseudo_bytes() example","content":"<?php\nfor\u00a0($i\u00a0=\u00a0-1;\u00a0$i\u00a0<=\u00a04;\u00a0$i++)\u00a0{\n\u00a0\u00a0\u00a0\u00a0$bytes\u00a0=\u00a0openssl_random_pseudo_bytes($i,\u00a0$cstrong);\n\u00a0\u00a0\u00a0\u00a0$hex\u00a0\u00a0\u00a0=\u00a0bin2hex($bytes);\n\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Lengths:\u00a0Bytes:\u00a0$i\u00a0and\u00a0Hex:\u00a0\"\u00a0.\u00a0strlen($hex)\u00a0.\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0var_dump($hex);\n\u00a0\u00a0\u00a0\u00a0var_dump($cstrong);\n\u00a0\u00a0\u00a0\u00a0echo\u00a0PHP_EOL;\n}\n?>"}]},"openssl_seal":{"name":"openssl_seal","parameters":[{"type":"string","name":"$data","description":"The data to seal."},{"type":"array","name":"$pub_key_ids","description":"Array of public key resource identifiers."},{"type":"string","name":"$method","default_value":"\"RC4\"","description":"The cipher method."}],"return":{"type":"int","values":["FALSE"]},"short":"Seal (encrypt) data","examples":[{"title":"Example #1 openssl_seal() example","content":"<?php\n\/\/\u00a0$data\u00a0is\u00a0assumed\u00a0to\u00a0contain\u00a0the\u00a0data\u00a0to\u00a0be\u00a0sealed\n\n\/\/\u00a0fetch\u00a0public\u00a0keys\u00a0for\u00a0our\u00a0recipients,\u00a0and\u00a0ready\u00a0them\n$fp\u00a0=\u00a0fopen(\"\/src\/openssl-0.9.6\/demos\/maurice\/cert.pem\",\u00a0\"r\");\n$cert\u00a0=\u00a0fread($fp,\u00a08192);\nfclose($fp);\n$pk1\u00a0=\u00a0openssl_get_publickey($cert);\n\/\/\u00a0Repeat\u00a0for\u00a0second\u00a0recipient\n$fp\u00a0=\u00a0fopen(\"\/src\/openssl-0.9.6\/demos\/sign\/cert.pem\",\u00a0\"r\");\n$cert\u00a0=\u00a0fread($fp,\u00a08192);\nfclose($fp);\n$pk2\u00a0=\u00a0openssl_get_publickey($cert);\n\n\/\/\u00a0seal\u00a0message,\u00a0only\u00a0owners\u00a0of\u00a0$pk1\u00a0and\u00a0$pk2\u00a0can\u00a0decrypt\u00a0$sealed\u00a0with\u00a0keys\n\/\/\u00a0$ekeys[0]\u00a0and\u00a0$ekeys[1]\u00a0respectively.\nopenssl_seal($data,\u00a0$sealed,\u00a0$ekeys,\u00a0array($pk1,\u00a0$pk2));\n\n\/\/\u00a0free\u00a0the\u00a0keys\u00a0from\u00a0memory\nopenssl_free_key($pk1);\nopenssl_free_key($pk2);\n?>"}]},"openssl_sign":{"name":"openssl_sign","parameters":[{"type":"string","name":"$data","description":"The string of data you wish to sign"},{"type":"mixed","name":"$priv_key_id","description":"resource - a key, returned by openssl_get_privatekey()\n\nstring - a PEM formatted key"},{"type":"mixed","name":"$signature_alg","default_value":"OPENSSL_ALGO_SHA1","description":"int - one of these Signature Algorithms.\n\nstring - a valid string returned by openssl_get_md_methods() example, \"sha256WithRSAEncryption\" or \"sha384\"."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Generate signature","examples":[{"title":"Example #1 openssl_sign() example","content":"<?php\n\/\/\u00a0$data\u00a0is\u00a0assumed\u00a0to\u00a0contain\u00a0the\u00a0data\u00a0to\u00a0be\u00a0signed\n\n\/\/\u00a0fetch\u00a0private\u00a0key\u00a0from\u00a0file\u00a0and\u00a0ready\u00a0it\n$pkeyid\u00a0=\u00a0openssl_pkey_get_private(\"file:\/\/src\/openssl-0.9.6\/demos\/sign\/key.pem\");\n\n\/\/\u00a0compute\u00a0signature\nopenssl_sign($data,\u00a0$signature,\u00a0$pkeyid);\n\n\/\/\u00a0free\u00a0the\u00a0key\u00a0from\u00a0memory\nopenssl_free_key($pkeyid);\n?>"},{"title":"Example #2 openssl_sign() example","content":"<?php\n\/\/data\u00a0you\u00a0want\u00a0to\u00a0sign\n$data\u00a0=\u00a0'my\u00a0data';\n\n\/\/create\u00a0new\u00a0private\u00a0and\u00a0public\u00a0key\n$new_key_pair\u00a0=\u00a0openssl_pkey_new(array(\n\u00a0\u00a0\u00a0\u00a0\"private_key_bits\"\u00a0=>\u00a02048,\n\u00a0\u00a0\u00a0\u00a0\"private_key_type\"\u00a0=>\u00a0OPENSSL_KEYTYPE_RSA,\n));\nopenssl_pkey_export($new_key_pair,\u00a0$private_key_pem);\n\n$details\u00a0=\u00a0openssl_pkey_get_details($new_key_pair);\n$public_key_pem\u00a0=\u00a0$details['key'];\n\n\/\/create\u00a0signature\nopenssl_sign($data,\u00a0$signature,\u00a0$private_key_pem,\u00a0OPENSSL_ALGO_SHA256);\n\n\/\/save\u00a0for\u00a0later\nfile_put_contents('private_key.pem',\u00a0$private_key_pem);\nfile_put_contents('public_key.pem',\u00a0$public_key_pem);\nfile_put_contents('signature.dat',\u00a0$signature);\n\n\/\/verify\u00a0signature\n$r\u00a0=\u00a0openssl_verify($data,\u00a0$signature,\u00a0$public_key_pem,\u00a0\"sha256WithRSAEncryption\");\nvar_dump($r);\n?>"}]},"openssl_spki_export":{"name":"openssl_spki_export","parameters":[],"return":{"type":"string","values":[]},"short":"Exports a valid PEM formatted public key signed public key and challenge","examples":[{"title":"Example #1 openssl_spki_export() example","content":"Extracts the associated PEM formatted public key or NULL on failure."},{"title":"Example #2 openssl_spki_export() example from &lt;keygen&gt;","content":"Extracts the associated PEM formatted public key issued from the <keygen> element"}]},"openssl_spki_export_challenge":{"name":"openssl_spki_export_challenge","parameters":[],"return":{"type":"string","values":[]},"short":"Exports the challenge assoicated with a signed public key and challenge","examples":[{"title":"Example #1 openssl_spki_export_challenge() example","content":"Extracts the associated challenge string or NULL on failure."},{"title":"Example #2 openssl_spki_export_challenge() example from &lt;keygen&gt;","content":"Extracts the associated challenge string issued from the <keygen> element"}]},"openssl_spki_new":{"name":"openssl_spki_new","parameters":[{"type":"int","name":"$algorithm","default_value":"0","description":"The digest algorithm. See openssl_get_md_method()."}],"return":{"type":"string","values":[]},"short":"Generate a new signed public key and challenge","examples":[{"title":"Example #1 openssl_spki_new() example","content":"Generate a new SPKAC with the default digest (MD5)"}]},"openssl_spki_verify":{"name":"openssl_spki_verify","parameters":[],"return":{"type":"string","values":[]},"short":"Verifies a signed public key and challenge","examples":[{"title":"Example #1 openssl_spki_verify() example","content":"Validates an existing signed public key and challenge"},{"title":"Example #2 openssl_spki_verify() example from &lt;keygen&gt;","content":"Validates an existing signed public key and challenge issued from the <keygen> element"}]},"openssl_verify":{"name":"openssl_verify","parameters":[{"type":"string","name":"$data","description":"The string of data used to generate the signature previously"},{"type":"string","name":"$signature","description":"A raw binary string, generated by openssl_sign() or similar means"},{"type":"mixed","name":"$pub_key_id","description":"resource - a key, returned by openssl_get_publickey()\n\nstring - a PEM formatted key, example, \"-----BEGIN PUBLIC KEY----- MIIBCgK...\""},{"type":"mixed","name":"$signature_alg","default_value":"OPENSSL_ALGO_SHA1","description":"int - one of these Signature Algorithms.\n\nstring - a valid string returned by openssl_get_md_methods() example, \"sha1WithRSAEncryption\" or \"sha512\"."}],"return":{"type":"int","values":[]},"short":"Verify signature","examples":[{"title":"Example #1 openssl_verify() example","content":"<?php\n\/\/\u00a0$data\u00a0and\u00a0$signature\u00a0are\u00a0assumed\u00a0to\u00a0contain\u00a0the\u00a0data\u00a0and\u00a0the\u00a0signature\n\n\/\/\u00a0fetch\u00a0public\u00a0key\u00a0from\u00a0certificate\u00a0and\u00a0ready\u00a0it\n$pubkeyid\u00a0=\u00a0openssl_pkey_get_public(\"file:\/\/src\/openssl-0.9.6\/demos\/sign\/cert.pem\");\n\n\/\/\u00a0state\u00a0whether\u00a0signature\u00a0is\u00a0okay\u00a0or\u00a0not\n$ok\u00a0=\u00a0openssl_verify($data,\u00a0$signature,\u00a0$pubkeyid);\nif\u00a0($ok\u00a0==\u00a01)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"good\";\n}\u00a0elseif\u00a0($ok\u00a0==\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"bad\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"ugly,\u00a0error\u00a0checking\u00a0signature\";\n}\n\/\/\u00a0free\u00a0the\u00a0key\u00a0from\u00a0memory\nopenssl_free_key($pubkeyid);\n?>"},{"title":"Example #2 openssl_verify() example","content":"<?php\n\/\/data\u00a0you\u00a0want\u00a0to\u00a0sign\n$data\u00a0=\u00a0'my\u00a0data';\n\n\/\/create\u00a0new\u00a0private\u00a0and\u00a0public\u00a0key\n$private_key_res\u00a0=\u00a0openssl_pkey_new(array(\n\u00a0\u00a0\u00a0\u00a0\"private_key_bits\"\u00a0=>\u00a02048,\n\u00a0\u00a0\u00a0\u00a0\"private_key_type\"\u00a0=>\u00a0OPENSSL_KEYTYPE_RSA,\n));\n$details\u00a0=\u00a0openssl_pkey_get_details($private_key_res);\n$public_key_res\u00a0=\u00a0openssl_pkey_get_public($details['key']);\n\n\/\/create\u00a0signature\nopenssl_sign($data,\u00a0$signature,\u00a0$private_key_res,\u00a0\"sha1WithRSAEncryption\");\n\n\/\/verify\u00a0signature\n$ok\u00a0=\u00a0openssl_verify($data,\u00a0$signature,\u00a0$public_key_res,\u00a0OPENSSL_ALGO_SHA1);\nif\u00a0($ok\u00a0==\u00a01)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"valid\";\n}\u00a0elseif\u00a0($ok\u00a0==\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"invalid\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"error:\u00a0\".openssl_error_string();\n}\n?>"}]},"openssl_x509_check_private_key":{"name":"openssl_x509_check_private_key","parameters":[{"type":"mixed","name":"$cert","description":"The certificate."},{"type":"mixed","name":"$key","description":"The private key."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if a private key corresponds to a certificate","examples":[]},"openssl_x509_checkpurpose":{"name":"openssl_x509_checkpurpose","parameters":[{"type":"mixed","name":"$x509cert","description":"The examined certificate."},{"type":"int","name":"$purpose","description":"\n\nopenssl_x509_checkpurpose() purposes\n Constant Description X509_PURPOSE_SSL_CLIENT Can the certificate be used for the client side of an SSL connection? X509_PURPOSE_SSL_SERVER Can the certificate be used for the server side of an SSL connection? X509_PURPOSE_NS_SSL_SERVER Can the cert be used for Netscape SSL server? X509_PURPOSE_SMIME_SIGN Can the cert be used to sign S\/MIME email? X509_PURPOSE_SMIME_ENCRYPT Can the cert be used to encrypt S\/MIME email? X509_PURPOSE_CRL_SIGN Can the cert be used to sign a certificate revocation list (CRL)? X509_PURPOSE_ANY Can the cert be used for Any\/All purposes?"},{"type":"array","name":"$cainfo","default_value":"array()","description":"cainfo should be an array of trusted CA files\/dirs as described in Certificate Verification."},{"type":"string","name":"$untrustedfile","description":"If specified, this should be the name of a PEM encoded file holding certificates that can be used to help verify the certificate, although no trust is placed in the certificates that come from that file."}],"return":{"type":"int","values":["TRUE","FALSE"]},"short":"Verifies if a certificate can be used for a particular purpose","examples":[]},"openssl_x509_export":{"name":"openssl_x509_export","parameters":[{"type":"mixed","name":"$x509","description":"See Key\/Certificate parameters for a list of valid values."},{"type":"bool","name":"$notext","default_value":"TRUE","description":"The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. The default value of notext is TRUE."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Exports a certificate as a string","examples":[]},"openssl_x509_export_to_file":{"name":"openssl_x509_export_to_file","parameters":[{"type":"mixed","name":"$x509","description":"See Key\/Certificate parameters for a list of valid values."},{"type":"string","name":"$outfilename","description":"Path to the output file."},{"type":"bool","name":"$notext","default_value":"TRUE","description":"The optional parameter notext affects the verbosity of the output; if it is FALSE, then additional human-readable information is included in the output. The default value of notext is TRUE."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Exports a certificate to file","examples":[]},"openssl_x509_fingerprint":{"name":"openssl_x509_fingerprint","parameters":[{"type":"mixed","name":"$x509","description":"See Key\/Certificate parameters for a list of valid values."},{"type":"string","name":"$hash_algorithm","default_value":"\"sha1\"","description":"The digest method or hash algorithm to use, e.g. \"sha256\", one of openssl_get_md_methods()."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits."}],"return":{"type":"string","values":["TRUE","FALSE"]},"short":"Calculates the fingerprint, or digest, of a given X.509 certificate","examples":[]},"openssl_x509_free":{"name":"openssl_x509_free","parameters":[{"type":"resource","name":"$x509cert","description":""}],"return":{"type":"void","values":[]},"short":"Free certificate resource","examples":[]},"openssl_x509_parse":{"name":"openssl_x509_parse","parameters":[{"type":"mixed","name":"$x509cert","description":""},{"type":"bool","name":"$shortnames","default_value":"TRUE","description":"shortnames controls how the data is indexed in the array - if shortnames is TRUE (the default) then fields will be indexed with the short name form, otherwise, the long name form will be used - e.g.: CN is the shortname form of commonName."}],"return":{"type":"array","values":[]},"short":"Parse an X509 certificate and return the information as an array","examples":[]},"openssl_x509_read":{"name":"openssl_x509_read","parameters":[{"type":"mixed","name":"$x509certdata","description":"X509 certificate. See Key\/Certificate parameters for a list of valid values."}],"return":{"type":"resource","values":["FALSE"]},"short":"Parse an X.509 certificate and return a resource identifier for\n  it","examples":[]},"ord":{"name":"ord","parameters":[{"type":"string","name":"$string","description":"A character."}],"return":{"type":"int","values":[]},"short":"Return ASCII value of character","examples":[{"title":"Example #1 ord() example","content":"<?php\n$str\u00a0=\u00a0\"\\n\";\nif\u00a0(ord($str)\u00a0==\u00a010)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0first\u00a0character\u00a0of\u00a0\\$str\u00a0is\u00a0a\u00a0line\u00a0feed.\\n\";\n}\n?>"}]},"output_add_rewrite_var":{"name":"output_add_rewrite_var","parameters":[{"type":"string","name":"$name","description":"The variable name."},{"type":"string","name":"$value","description":"The variable value."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Add URL rewriter values","examples":[{"title":"Example #1 output_add_rewrite_var() example","content":"<?php\noutput_add_rewrite_var('var',\u00a0'value');\n\n\/\/\u00a0some\u00a0links\necho\u00a0'<a\u00a0href=\"file.php\">link<\/a>\n<a\u00a0href=\"http:\/\/example.com\">link2<\/a>';\n\n\/\/\u00a0a\u00a0form\necho\u00a0'<form\u00a0action=\"script.php\"\u00a0method=\"post\">\n<input\u00a0type=\"text\"\u00a0name=\"var2\"\u00a0\/>\n<\/form>';\n\nprint_r(ob_list_handlers());\n?>"}]},"output_reset_rewrite_vars":{"name":"output_reset_rewrite_vars","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Reset URL rewriter values","examples":[{"title":"Example #1 output_reset_rewrite_vars() example","content":"<?php\nsession_start();\noutput_add_rewrite_var('var',\u00a0'value');\n\necho\u00a0'<a\u00a0href=\"file.php\">link<\/a>';\nob_flush();\n\noutput_reset_rewrite_vars();\necho\u00a0'<a\u00a0href=\"file.php\">link<\/a>';\n?>"}]},"pack":{"name":"pack","parameters":[{"type":"string","name":"$format","description":"The format string consists of format codes followed by an optional repeater argument. The repeater argument can be either an integer value or * for repeating to the end of the input data. For a, A, h, H the repeat count specifies how many characters of one data argument are taken, for @ it is the absolute position where to put the next data, for everything else the repeat count specifies how many data arguments are consumed and packed into the resulting binary string.\n\nCurrently implemented formats are:\n\npack() format characters\n Code Description a NUL-padded string A SPACE-padded stringh Hex string, low nibble firstH Hex string, high nibble firstcsigned charC unsigned chars signed short (always 16 bit, machine byte order) S unsigned short (always 16 bit, machine byte order) n unsigned short (always 16 bit, big endian byte order) v unsigned short (always 16 bit, little endian byte order) i signed integer (machine dependent size and byte order) I unsigned integer (machine dependent size and byte order) l signed long (always 32 bit, machine byte order) L unsigned long (always 32 bit, machine byte order) N unsigned long (always 32 bit, big endian byte order) V unsigned long (always 32 bit, little endian byte order) q signed long long (always 64 bit, machine byte order) Q unsigned long long (always 64 bit, machine byte order) J unsigned long long (always 64 bit, big endian byte order) P unsigned long long (always 64 bit, little endian byte order) f float (machine dependent size and representation) g float (machine dependent size, little endian byte order) G float (machine dependent size, big endian byte order) d double (machine dependent size and representation) e double (machine dependent size, little endian byte order) E double (machine dependent size, big endian byte order) x NUL byte X Back up one byte Z NUL-padded string (new in PHP 5.5) @ NUL-fill to absolute position"},{"type":"mixed","name":"$args","description":""},{"type":"mixed","name":"$..."}],"return":{"type":"string","values":[]},"short":"Pack data into binary string","examples":[{"title":"Example #1 pack() example","content":"<?php\n$binarydata\u00a0=\u00a0pack(\"nvc*\",\u00a00x1234,\u00a00x5678,\u00a065,\u00a066);\n?>"}]},"parse_ini_file":{"name":"parse_ini_file","parameters":[{"type":"string","name":"$filename","description":"The filename of the ini file being parsed."},{"type":"bool","name":"$process_sections","default_value":"FALSE","description":"By setting the process_sections parameter to TRUE, you get a multidimensional array, with the section names and settings included. The default for process_sections is FALSE"},{"type":"int","name":"$scanner_mode","default_value":"INI_SCANNER_NORMAL","description":"Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied, then option values will not be parsed.\n\nAs of PHP 5.6.1 can also be specified as INI_SCANNER_TYPED. In this mode boolean, null and integer types are preserved when possible. String values \"true\", \"on\" and \"yes\" are converted to TRUE. \"false\", \"off\", \"no\" and \"none\" are considered FALSE. \"null\" is converted to NULL in typed mode. Also, all numeric strings are converted to integer type if it is possible."}],"return":{"type":"array","values":["FALSE"]},"short":"Parse a configuration file","examples":[{"title":"Example #1 Contents of sample.ini","content":"; This is a sample configuration file\n; Comments start with ';', as in php.ini\n\n[first_section]\none = 1\nfive = 5\nanimal = BIRD\n\n[second_section]\npath = \"\/usr\/local\/bin\"\nURL = \"http:\/\/www.example.com\/~username\"\n\n[third_section]\nphpversion[] = \"5.0\"\nphpversion[] = \"5.1\"\nphpversion[] = \"5.2\"\nphpversion[] = \"5.3\"\n\nurls[svn] = \"http:\/\/svn.php.net\"\nurls[git] = \"http:\/\/git.php.net\""},{"title":"Example #2 parse_ini_file() example","content":"Constants may also be parsed\n     in the ini file so if you define a constant as an ini value before\n     running parse_ini_file(), it will be integrated into\n     the results.  Only ini values are evaluated.  For example:"},{"title":"Example #3 parse_ini_file() parsing a php.ini file","content":"<?php\n\/\/\u00a0A\u00a0simple\u00a0function\u00a0used\u00a0for\u00a0comparing\u00a0the\u00a0results\u00a0below\nfunction\u00a0yesno($expression)\n{\n\u00a0\u00a0\u00a0\u00a0return($expression\u00a0?\u00a0'Yes'\u00a0:\u00a0'No');\n}\n\n\/\/\u00a0Get\u00a0the\u00a0path\u00a0to\u00a0php.ini\u00a0using\u00a0the\u00a0php_ini_loaded_file()\u00a0\n\/\/\u00a0function\u00a0available\u00a0as\u00a0of\u00a0PHP\u00a05.2.4\n$ini_path\u00a0=\u00a0php_ini_loaded_file();\n\n\/\/\u00a0Parse\u00a0php.ini\n$ini\u00a0=\u00a0parse_ini_file($ini_path);\n\n\/\/\u00a0Print\u00a0and\u00a0compare\u00a0the\u00a0values,\u00a0note\u00a0that\u00a0using\u00a0get_cfg_var()\n\/\/\u00a0will\u00a0give\u00a0the\u00a0same\u00a0results\u00a0for\u00a0parsed\u00a0and\u00a0loaded\u00a0here\necho\u00a0'(parsed)\u00a0magic_quotes_gpc\u00a0=\u00a0'\u00a0.\u00a0yesno($ini['magic_quotes_gpc'])\u00a0.\u00a0PHP_EOL;\necho\u00a0'(loaded)\u00a0magic_quotes_gpc\u00a0=\u00a0'\u00a0.\u00a0yesno(get_cfg_var('magic_quotes_gpc'))\u00a0.\u00a0PHP_EOL;\n?>"}]},"parse_ini_string":{"name":"parse_ini_string","parameters":[{"type":"string","name":"$ini","description":"The contents of the ini file being parsed."},{"type":"bool","name":"$process_sections","default_value":"FALSE","description":"By setting the process_sections parameter to TRUE, you get a multidimensional array, with the section names and settings included. The default for process_sections is FALSE"},{"type":"int","name":"$scanner_mode","default_value":"INI_SCANNER_NORMAL","description":"Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. If INI_SCANNER_RAW is supplied, then option values will not be parsed.\n\nAs of PHP 5.6.1 can also be specified as INI_SCANNER_TYPED. In this mode boolean, null and integer types are preserved when possible. String values \"true\", \"on\" and \"yes\" are converted to TRUE. \"false\", \"off\", \"no\" and \"none\" are considered FALSE. \"null\" is converted to NULL in typed mode. Also, all numeric strings are converted to integer type if it is possible."}],"return":{"type":"array","values":["FALSE"]},"short":"Parse a configuration string","examples":[]},"parse_str":{"name":"parse_str","parameters":[{"type":"string","name":"$encoded_string","description":"The input string."}],"return":{"type":"void","values":[]},"short":"Parses the string into variables","examples":[{"title":"Example #1 Using parse_str()","content":"<?php\n$str\u00a0=\u00a0\"first=value&arr[]=foo+bar&arr[]=baz\";\n\n\/\/\u00a0Recommended\nparse_str($str,\u00a0$output);\necho\u00a0$output['first'];\u00a0\u00a0\/\/\u00a0value\necho\u00a0$output['arr'][0];\u00a0\/\/\u00a0foo\u00a0bar\necho\u00a0$output['arr'][1];\u00a0\/\/\u00a0baz\n\n\/\/\u00a0DISCOURAGED\nparse_str($str);\necho\u00a0$first;\u00a0\u00a0\/\/\u00a0value\necho\u00a0$arr[0];\u00a0\/\/\u00a0foo\u00a0bar\necho\u00a0$arr[1];\u00a0\/\/\u00a0baz\n?>"},{"title":"Example #2 parse_str() name mangling","content":"<?php\nparse_str(\"My\u00a0Value=Something\");\necho\u00a0$My_Value;\u00a0\/\/\u00a0Something\n\nparse_str(\"My\u00a0Value=Something\",\u00a0$output);\necho\u00a0$output['My_Value'];\u00a0\/\/\u00a0Something\n?>"}]},"parse_url":{"name":"parse_url","parameters":[{"type":"string","name":"$url","description":"The URL to parse. Invalid characters are replaced by _."},{"type":"int","name":"$component","default_value":"-1"}],"return":{"type":"mixed","values":["FALSE","PHP_URL_PORT","NULL"]},"short":"Parse a URL and return its components","examples":[{"title":"Example #1 A parse_url() example","content":"<?php\n$url\u00a0=\u00a0'http:\/\/username:password@hostname:9090\/path?arg=value#anchor';\n\nvar_dump(parse_url($url));\nvar_dump(parse_url($url,\u00a0PHP_URL_SCHEME));\nvar_dump(parse_url($url,\u00a0PHP_URL_USER));\nvar_dump(parse_url($url,\u00a0PHP_URL_PASS));\nvar_dump(parse_url($url,\u00a0PHP_URL_HOST));\nvar_dump(parse_url($url,\u00a0PHP_URL_PORT));\nvar_dump(parse_url($url,\u00a0PHP_URL_PATH));\nvar_dump(parse_url($url,\u00a0PHP_URL_QUERY));\nvar_dump(parse_url($url,\u00a0PHP_URL_FRAGMENT));\n?>"},{"title":"Example #2 A parse_url() example with missing scheme","content":"<?php\n$url\u00a0=\u00a0'\/\/www.example.com\/path?googleguy=googley';\n\n\/\/\u00a0Prior\u00a0to\u00a05.4.7\u00a0this\u00a0would\u00a0show\u00a0the\u00a0path\u00a0as\u00a0\"\/\/www.example.com\/path\"\nvar_dump(parse_url($url));\n?>"}]},"passthru":{"name":"passthru","parameters":[{"type":"string","name":"$command","description":"The command that will be executed."}],"return":{"type":"void","values":[]},"short":"Execute an external program and display raw output","examples":[]},"password_get_info":{"name":"password_get_info","parameters":[{"type":"string","name":"$hash","description":"A hash created by password_hash()."}],"return":{"type":"array","values":[]},"short":"Returns information about the given hash","examples":[]},"password_hash":{"name":"password_hash","parameters":[{"type":"string","name":"$password","description":"The user's password.\n\nCaution\n Using the PASSWORD_BCRYPT as the algorithm, will result in the password parameter being truncated to a maximum length of 72 characters."},{"type":"int","name":"$algo","description":"A password algorithm constant denoting the algorithm to use when hashing the password."},{"type":"array","name":"$options","description":"An associative array containing options. See the password algorithm constants for documentation on the supported options for each algorithm.\n\nIf omitted, a random salt will be created and the default cost will be used."}],"return":{"type":"string","values":["FALSE"]},"short":"Creates a password hash","examples":[{"title":"Example #1 password_hash() example","content":"<?php\n\/**\n\u00a0*\u00a0We\u00a0just\u00a0want\u00a0to\u00a0hash\u00a0our\u00a0password\u00a0using\u00a0the\u00a0current\u00a0DEFAULT\u00a0algorithm.\n\u00a0*\u00a0This\u00a0is\u00a0presently\u00a0BCRYPT,\u00a0and\u00a0will\u00a0produce\u00a0a\u00a060\u00a0character\u00a0result.\n\u00a0*\n\u00a0*\u00a0Beware\u00a0that\u00a0DEFAULT\u00a0may\u00a0change\u00a0over\u00a0time,\u00a0so\u00a0you\u00a0would\u00a0want\u00a0to\u00a0prepare\n\u00a0*\u00a0By\u00a0allowing\u00a0your\u00a0storage\u00a0to\u00a0expand\u00a0past\u00a060\u00a0characters\u00a0(255\u00a0would\u00a0be\u00a0good)\n\u00a0*\/\necho\u00a0password_hash(\"rasmuslerdorf\",\u00a0PASSWORD_DEFAULT);\n?>"},{"title":"Example #2 password_hash() example setting cost manually","content":"<?php\n\/**\n\u00a0*\u00a0In\u00a0this\u00a0case,\u00a0we\u00a0want\u00a0to\u00a0increase\u00a0the\u00a0default\u00a0cost\u00a0for\u00a0BCRYPT\u00a0to\u00a012.\n\u00a0*\u00a0Note\u00a0that\u00a0we\u00a0also\u00a0switched\u00a0to\u00a0BCRYPT,\u00a0which\u00a0will\u00a0always\u00a0be\u00a060\u00a0characters.\n\u00a0*\/\n$options\u00a0=\u00a0[\n\u00a0\u00a0\u00a0\u00a0'cost'\u00a0=>\u00a012,\n];\necho\u00a0password_hash(\"rasmuslerdorf\",\u00a0PASSWORD_BCRYPT,\u00a0$options);\n?>"},{"title":"Example #3 password_hash() example setting salt manually","content":"<?php\n\/**\n\u00a0*\u00a0Note\u00a0that\u00a0the\u00a0salt\u00a0here\u00a0is\u00a0randomly\u00a0generated.\n\u00a0*\u00a0Never\u00a0use\u00a0a\u00a0static\u00a0salt\u00a0or\u00a0one\u00a0that\u00a0is\u00a0not\u00a0randomly\u00a0generated.\n\u00a0*\n\u00a0*\u00a0For\u00a0the\u00a0VAST\u00a0majority\u00a0of\u00a0use-cases,\u00a0let\u00a0password_hash\u00a0generate\u00a0the\u00a0salt\u00a0randomly\u00a0for\u00a0you\n\u00a0*\/\n$options\u00a0=\u00a0[\n\u00a0\u00a0\u00a0\u00a0'cost'\u00a0=>\u00a011,\n\u00a0\u00a0\u00a0\u00a0'salt'\u00a0=>\u00a0mcrypt_create_iv(22,\u00a0MCRYPT_DEV_URANDOM),\n];\necho\u00a0password_hash(\"rasmuslerdorf\",\u00a0PASSWORD_BCRYPT,\u00a0$options);\n?>"},{"title":"Example #4 password_hash() example finding a good cost","content":"<?php\n\/**\n\u00a0*\u00a0This\u00a0code\u00a0will\u00a0benchmark\u00a0your\u00a0server\u00a0to\u00a0determine\u00a0how\u00a0high\u00a0of\u00a0a\u00a0cost\u00a0you\u00a0can\n\u00a0*\u00a0afford.\u00a0You\u00a0want\u00a0to\u00a0set\u00a0the\u00a0highest\u00a0cost\u00a0that\u00a0you\u00a0can\u00a0without\u00a0slowing\u00a0down\n\u00a0*\u00a0you\u00a0server\u00a0too\u00a0much.\u00a08-10\u00a0is\u00a0a\u00a0good\u00a0baseline,\u00a0and\u00a0more\u00a0is\u00a0good\u00a0if\u00a0your\u00a0servers\n\u00a0*\u00a0are\u00a0fast\u00a0enough.\u00a0The\u00a0code\u00a0below\u00a0aims\u00a0for\u00a0\u2264\u00a050\u00a0milliseconds\u00a0stretching\u00a0time,\n\u00a0*\u00a0which\u00a0is\u00a0a\u00a0good\u00a0baseline\u00a0for\u00a0systems\u00a0handling\u00a0interactive\u00a0logins.\n\u00a0*\/\n$timeTarget\u00a0=\u00a00.05;\u00a0\/\/\u00a050\u00a0milliseconds\u00a0\n\n$cost\u00a0=\u00a08;\ndo\u00a0{\n\u00a0\u00a0\u00a0\u00a0$cost++;\n\u00a0\u00a0\u00a0\u00a0$start\u00a0=\u00a0microtime(true);\n\u00a0\u00a0\u00a0\u00a0password_hash(\"test\",\u00a0PASSWORD_BCRYPT,\u00a0[\"cost\"\u00a0=>\u00a0$cost]);\n\u00a0\u00a0\u00a0\u00a0$end\u00a0=\u00a0microtime(true);\n}\u00a0while\u00a0(($end\u00a0-\u00a0$start)\u00a0<\u00a0$timeTarget);\n\necho\u00a0\"Appropriate\u00a0Cost\u00a0Found:\u00a0\"\u00a0.\u00a0$cost;\n?>"},{"title":"Example #5 password_hash() example using Argon2","content":"<?php\necho\u00a0'Argon2\u00a0hash:\u00a0'\u00a0.\u00a0password_hash('rasmuslerdorf',\u00a0PASSWORD_ARGON2I);\n?>"}]},"password_needs_rehash":{"name":"password_needs_rehash","parameters":[{"type":"string","name":"$hash","description":"A hash created by password_hash()."},{"type":"int","name":"$algo","description":"A password algorithm constant denoting the algorithm to use when hashing the password."},{"type":"array","name":"$options","description":"An associative array containing options. See the password algorithm constants for documentation on the supported options for each algorithm."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if the given hash matches the given options","examples":[{"title":"Example #1 Usage of password_needs_rehash()","content":"<?php\n\n$password\u00a0=\u00a0'rasmuslerdorf';\n$hash\u00a0=\u00a0'$2y$10$YCFsG6elYca568hBi2pZ0.3LDL5wjgxct1N8w\/oLR\/jfHsiQwCqTS';\n\n\/\/\u00a0The\u00a0cost\u00a0parameter\u00a0can\u00a0change\u00a0over\u00a0time\u00a0as\u00a0hardware\u00a0improves\n$options\u00a0=\u00a0array('cost'\u00a0=>\u00a011);\n\n\/\/\u00a0Verify\u00a0stored\u00a0hash\u00a0against\u00a0plain-text\u00a0password\nif\u00a0(password_verify($password,\u00a0$hash))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Check\u00a0if\u00a0a\u00a0newer\u00a0hashing\u00a0algorithm\u00a0is\u00a0available\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0or\u00a0the\u00a0cost\u00a0has\u00a0changed\n\u00a0\u00a0\u00a0\u00a0if\u00a0(password_needs_rehash($hash,\u00a0PASSWORD_DEFAULT,\u00a0$options))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0If\u00a0so,\u00a0create\u00a0a\u00a0new\u00a0hash,\u00a0and\u00a0replace\u00a0the\u00a0old\u00a0one\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$newHash\u00a0=\u00a0password_hash($password,\u00a0PASSWORD_DEFAULT,\u00a0$options);\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Log\u00a0user\u00a0in\n}\n?>"}]},"password_verify":{"name":"password_verify","parameters":[{"type":"string","name":"$password","description":"The user's password."},{"type":"string","name":"$hash","description":"A hash created by password_hash()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Verifies that a password matches a hash","examples":[{"title":"Example #1 password_verify() example","content":"<?php\n\/\/\u00a0See\u00a0the\u00a0password_hash()\u00a0example\u00a0to\u00a0see\u00a0where\u00a0this\u00a0came\u00a0from.\n$hash\u00a0=\u00a0'$2y$07$BCryptRequires22Chrcte\/VlQH0piJtjXl.0t1XkA8pw9dMXTpOq';\n\nif\u00a0(password_verify('rasmuslerdorf',\u00a0$hash))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Password\u00a0is\u00a0valid!';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Invalid\u00a0password.';\n}\n?>"}]},"pathinfo":{"name":"pathinfo","parameters":[{"type":"string","name":"$path","description":"The path to be parsed."},{"type":"int","name":"$options","default_value":"PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME","description":"If present, specifies a specific element to be returned; one of PATHINFO_DIRNAME, PATHINFO_BASENAME, PATHINFO_EXTENSION or PATHINFO_FILENAME.\n\nIf options is not specified, returns all available elements."}],"return":{"type":"mixed","values":[]},"short":"Returns information about a file path","examples":[{"title":"Example #1 pathinfo() Example","content":"<?php\n$path_parts\u00a0=\u00a0pathinfo('\/www\/htdocs\/inc\/lib.inc.php');\n\necho\u00a0$path_parts['dirname'],\u00a0\"\\n\";\necho\u00a0$path_parts['basename'],\u00a0\"\\n\";\necho\u00a0$path_parts['extension'],\u00a0\"\\n\";\necho\u00a0$path_parts['filename'],\u00a0\"\\n\";\u00a0\/\/\u00a0since\u00a0PHP\u00a05.2.0\n?>"},{"title":"Example #2 pathinfo() example showing difference between null and no extension","content":"<?php\n$path_parts\u00a0=\u00a0pathinfo('\/path\/emptyextension.');\nvar_dump($path_parts['extension']);\n\n$path_parts\u00a0=\u00a0pathinfo('\/path\/noextension');\nvar_dump($path_parts['extension']);\n?>"},{"title":"Example #3 pathinfo() example for a dot-file","content":"<?php\nprint_r(pathinfo('\/some\/path\/.test'));\n?>"}]},"pclose":{"name":"pclose","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must have been returned by a successful call to popen()."}],"return":{"type":"int","values":[]},"short":"Closes process file pointer","examples":[{"title":"Example #1 pclose() example","content":"<?php\n$handle\u00a0=\u00a0popen('\/bin\/ls',\u00a0'r');\npclose($handle);\n?>"}]},"pcntl_alarm":{"name":"pcntl_alarm","parameters":[{"type":"int","name":"$seconds","description":"The number of seconds to wait. If seconds is zero, no new alarm is created."}],"return":{"type":"int","values":[]},"short":"Set an alarm clock for delivery of a signal","examples":[]},"pcntl_async_signals":{"name":"pcntl_async_signals","parameters":[{"type":"bool","name":"$on","default_value":"NULL","description":"Whether asynchronous signal handling should be enabled."}],"return":{"type":"bool","values":[]},"short":"Enable\/disable asynchronous signal handling or return the old setting","examples":[]},"pcntl_errno":{"name":"pcntl_errno","parameters":[],"return":{"type":"","values":[]},"short":"Alias of pcntl_get_last_error()","examples":[]},"pcntl_exec":{"name":"pcntl_exec","parameters":[{"type":"string","name":"$path","description":"path must be the path to a binary executable or a script with a valid path pointing to an executable in the shebang ( #!\/usr\/local\/bin\/perl for example) as the first line.  See your system's man execve(2) page for additional information."},{"type":"array","name":"$args","description":"args is an array of argument strings passed to the program."},{"type":"array","name":"$envs","description":"envs is an array of strings which are passed as environment to the program.  The array is in the format of name => value, the key being the name of the environmental variable and the value being the value of that variable."}],"return":{"type":"void","values":["NULL","FALSE"]},"short":"Executes specified program in current process space","examples":[]},"pcntl_fork":{"name":"pcntl_fork","parameters":[],"return":{"type":"int","values":[]},"short":"Forks the currently running process","examples":[{"title":"Example #1 pcntl_fork() example","content":"<?php\n\n$pid\u00a0=\u00a0pcntl_fork();\nif\u00a0($pid\u00a0==\u00a0-1)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0die('could\u00a0not\u00a0fork');\n}\u00a0else\u00a0if\u00a0($pid)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0we\u00a0are\u00a0the\u00a0parent\n\u00a0\u00a0\u00a0\u00a0\u00a0pcntl_wait($status);\u00a0\/\/Protect\u00a0against\u00a0Zombie\u00a0children\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0we\u00a0are\u00a0the\u00a0child\n}\n\n?>"}]},"pcntl_get_last_error":{"name":"pcntl_get_last_error","parameters":[],"return":{"type":"int","values":[]},"short":"Retrieve the error number set by the last pcntl function which failed","examples":[]},"pcntl_getpriority":{"name":"pcntl_getpriority","parameters":[{"type":"int","name":"$pid","default_value":"getmypid()","description":"If not specified, the pid of the current process is used."},{"type":"int","name":"$process_identifier","default_value":"PRIO_PROCESS","description":"One of PRIO_PGRP, PRIO_USER or PRIO_PROCESS."}],"return":{"type":"int","values":["FALSE"]},"short":"Get the priority of any process","examples":[]},"pcntl_setpriority":{"name":"pcntl_setpriority","parameters":[{"type":"int","name":"$priority","description":"priority is generally a value in the range -20 to 20. The default priority is 0 while a lower numerical value causes more favorable scheduling.  Because priority levels can differ between system types and kernel versions, please see your system's setpriority(2) man page for specific details."},{"type":"int","name":"$pid","default_value":"getmypid()","description":"If not specified, the pid of the current process is used."},{"type":"int","name":"$process_identifier","default_value":"PRIO_PROCESS","description":"One of PRIO_PGRP, PRIO_USER or PRIO_PROCESS."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Change the priority of any process","examples":[]},"pcntl_signal":{"name":"pcntl_signal","parameters":[{"type":"int","name":"$signo","description":"The signal number."},{"type":"callable|int","name":"$handler","description":"The signal handler. This may be either a callable, which will be invoked to handle the signal, or either of the two global constants SIG_IGN or SIG_DFL, which will ignore the signal or restore the default signal handler respectively.\n\nIf a callable is given, it must implement the following signature:\n\n\n\nvoid handler ( int $signo , mixed $signinfo )\n\nsigno\n\n\n\n The signal being handled.\n\n\n\n\n\n siginfo\n\n\n\n If operating systems supports siginfo_t structures, this will be an array of signal information dependent on the signal.\n\nNote:\n Note that when you set a handler to an object method, that object's reference count is increased which makes it persist until you either change the handler to something else, or your script ends."},{"type":"bool","name":"$restart_syscalls","default_value":"TRUE","description":"Specifies whether system call restarting should be used when this signal arrives."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Installs a signal handler","examples":[{"title":"Example #1 pcntl_signal() example","content":"<?php\n\/\/\u00a0tick\u00a0use\u00a0required\u00a0as\u00a0of\u00a0PHP\u00a04.3.0\ndeclare(ticks\u00a0=\u00a01);\n\n\/\/\u00a0signal\u00a0handler\u00a0function\nfunction\u00a0sig_handler($signo)\n{\n\n\u00a0\u00a0\u00a0\u00a0\u00a0switch\u00a0($signo)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0SIGTERM:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0handle\u00a0shutdown\u00a0tasks\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0SIGHUP:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0handle\u00a0restart\u00a0tasks\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case\u00a0SIGUSR1:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Caught\u00a0SIGUSR1...\\n\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0handle\u00a0all\u00a0other\u00a0signals\n\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n}\n\necho\u00a0\"Installing\u00a0signal\u00a0handler...\\n\";\n\n\/\/\u00a0setup\u00a0signal\u00a0handlers\npcntl_signal(SIGTERM,\u00a0\"sig_handler\");\npcntl_signal(SIGHUP,\u00a0\u00a0\"sig_handler\");\npcntl_signal(SIGUSR1,\u00a0\"sig_handler\");\n\n\/\/\u00a0or\u00a0use\u00a0an\u00a0object,\u00a0available\u00a0as\u00a0of\u00a0PHP\u00a04.3.0\n\/\/\u00a0pcntl_signal(SIGUSR1,\u00a0array($obj,\u00a0\"do_something\"));\n\necho\"Generating\u00a0signal\u00a0SIGUSR1\u00a0to\u00a0self...\\n\";\n\n\/\/\u00a0send\u00a0SIGUSR1\u00a0to\u00a0current\u00a0process\u00a0id\n\/\/\u00a0posix_*\u00a0functions\u00a0require\u00a0the\u00a0posix\u00a0extension\nposix_kill(posix_getpid(),\u00a0SIGUSR1);\n\necho\u00a0\"Done\\n\";\n\n?>"}]},"pcntl_signal_dispatch":{"name":"pcntl_signal_dispatch","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Calls signal handlers for pending signals","examples":[{"title":"Example #1 pcntl_signal_dispatch() example","content":"<?php\necho\u00a0\"Installing\u00a0signal\u00a0handler...\\n\";\npcntl_signal(SIGHUP,\u00a0\u00a0function($signo)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"signal\u00a0handler\u00a0called\\n\";\n});\n\necho\u00a0\"Generating\u00a0signal\u00a0SIGHUP\u00a0to\u00a0self...\\n\";\nposix_kill(posix_getpid(),\u00a0SIGHUP);\n\necho\u00a0\"Dispatching...\\n\";\npcntl_signal_dispatch();\n\necho\u00a0\"Done\\n\";\n\n?>"}]},"pcntl_signal_get_handler":{"name":"pcntl_signal_get_handler","parameters":[{"type":"int","name":"$signo","description":"The signal number."}],"return":{"type":"mixed","values":["SIG_DFL","SIG_IGN"]},"short":"Get the current handler for specified signal","examples":[{"title":"Example #1 pcntl_signal_get_handler() example","content":"<?php\nvar_dump(pcntl_signal_get_handler(SIGUSR1));\u00a0\/\/\u00a0Outputs:\u00a0int(0)\n\nfunction\u00a0pcntl_test($signo)\u00a0{}\npcntl_signal(SIGUSR1,\u00a0'pcntl_test');\nvar_dump(pcntl_signal_get_handler(SIGUSR1));\u00a0\/\/\u00a0Outputs:\u00a0string(10)\u00a0\"pcntl_test\"\n\npcntl_signal(SIGUSR1,\u00a0SIG_DFL);\nvar_dump(pcntl_signal_get_handler(SIGUSR1));\u00a0\/\/\u00a0Outputs:\u00a0int(0)\n\npcntl_signal(SIGUSR1,\u00a0SIG_IGN);\nvar_dump(pcntl_signal_get_handler(SIGUSR1));\u00a0\/\/\u00a0Outputs:\u00a0int(1)\n?>"}]},"pcntl_sigprocmask":{"name":"pcntl_sigprocmask","parameters":[{"type":"int","name":"$how","description":"Sets the behavior of pcntl_sigprocmask(). Possible values:\n\nSIG_BLOCK: Add the signals to the currently blocked signals. SIG_UNBLOCK: Remove the signals from the currently blocked signals. SIG_SETMASK: Replace the currently blocked signals by the given list of signals."},{"type":"array","name":"$set","description":"List of signals."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sets and retrieves blocked signals","examples":[{"title":"Example #1 pcntl_sigprocmask() example","content":"<?php\npcntl_sigprocmask(SIG_BLOCK,\u00a0array(SIGHUP));\n$oldset\u00a0=\u00a0array();\npcntl_sigprocmask(SIG_UNBLOCK,\u00a0array(SIGHUP),\u00a0$oldset);\n?>"}]},"pcntl_sigtimedwait":{"name":"pcntl_sigtimedwait","parameters":[{"type":"array","name":"$set","description":"Array of signals to wait for."},{"type":"int","name":"$seconds","default_value":"0","description":"Timeout in seconds."},{"type":"int","name":"$nanoseconds","default_value":"0","description":"Timeout in nanoseconds."}],"return":{"type":"int","values":[]},"short":"Waits for signals, with a timeout","examples":[]},"pcntl_sigwaitinfo":{"name":"pcntl_sigwaitinfo","parameters":[{"type":"array","name":"$set","description":"Array of signals to wait for."}],"return":{"type":"int","values":[]},"short":"Waits for signals","examples":[{"title":"Example #1 pcntl_sigwaitinfo() example","content":"<?php\necho\u00a0\"Blocking\u00a0SIGHUP\u00a0signal\\n\";\npcntl_sigprocmask(SIG_BLOCK,\u00a0array(SIGHUP));\n\necho\u00a0\"Sending\u00a0SIGHUP\u00a0to\u00a0self\\n\";\nposix_kill(posix_getpid(),\u00a0SIGHUP);\n\necho\u00a0\"Waiting\u00a0for\u00a0signals\\n\";\n$info\u00a0=\u00a0array();\npcntl_sigwaitinfo(array(SIGHUP),\u00a0$info);\n?>"}]},"pcntl_strerror":{"name":"pcntl_strerror","parameters":[{"type":"int","name":"$errno","description":""}],"return":{"type":"string","values":["FALSE"]},"short":"Retrieve the system error message associated with the given errno","examples":[]},"pcntl_wait":{"name":"pcntl_wait","parameters":[{"type":"int","name":"$options","default_value":"0","description":"If wait3 is available on your system (mostly BSD-style systems), you can provide the optional options parameter.  If this parameter is not provided, wait will be used for the system call.  If wait3 is not available, providing a value for options will have no effect. The value of options is the value of zero or more of the following two constants OR'ed together:\n\nPossible values for options\n WNOHANG\n Return immediately if no child has exited.\n WUNTRACED\n Return for children which are stopped, and whose status has not been reported."}],"return":{"type":"int","values":[]},"short":"Waits on or returns the status of a forked child","examples":[]},"pcntl_waitpid":{"name":"pcntl_waitpid","parameters":[{"type":"int","name":"$pid","description":"The value of pid can be one of the following:\n\npossible values for pid\n < -1\n wait for any child process whose process group ID is equal to the absolute value of pid.\n -1\n wait for any child process; this is the same behaviour that the wait function exhibits.\n 0\n wait for any child process whose process group ID is equal to that of the calling process.\n > 0\n wait for the child whose process ID is equal to the value of pid.\n\nNote:\n Specifying -1 as the pid is equivalent to the functionality pcntl_wait() provides (minus options)."},{"type":"int","name":"$options","default_value":"0","description":"The value of options is the value of zero or more of the following two global constants OR'ed together:\n\npossible values for options\n WNOHANG\n return immediately if no child has exited.\n WUNTRACED\n return for children which are stopped, and whose status has not been reported."}],"return":{"type":"int","values":["WNOHANG"]},"short":"Waits on or returns the status of a forked child","examples":[]},"pcntl_wexitstatus":{"name":"pcntl_wexitstatus","parameters":[{"type":"int","name":"$status","description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid()."}],"return":{"type":"int","values":[]},"short":"Returns the return code of a terminated child","examples":[]},"pcntl_wifcontinued":{"name":"pcntl_wifcontinued","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"pcntl_wifexited":{"name":"pcntl_wifexited","parameters":[{"type":"int","name":"$status","description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if status code represents a normal exit","examples":[]},"pcntl_wifsignaled":{"name":"pcntl_wifsignaled","parameters":[{"type":"int","name":"$status","description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks whether the status code represents a termination due to a signal","examples":[]},"pcntl_wifstopped":{"name":"pcntl_wifstopped","parameters":[{"type":"int","name":"$status","description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks whether the child process is currently stopped","examples":[]},"pcntl_wstopsig":{"name":"pcntl_wstopsig","parameters":[{"type":"int","name":"$status","description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid()."}],"return":{"type":"int","values":[]},"short":"Returns the signal which caused the child to stop","examples":[]},"pcntl_wtermsig":{"name":"pcntl_wtermsig","parameters":[{"type":"int","name":"$status","description":"The status parameter is the status parameter supplied to a successful call to pcntl_waitpid()."}],"return":{"type":"int","values":[]},"short":"Returns the signal which caused the child to terminate","examples":[]},"pfsockopen":{"name":"pfsockopen","parameters":[{"type":"string","name":"$hostname"},{"type":"int","name":"$port","default_value":"-1"},{"type":"float","name":"$timeout","default_value":"ini_get(\"default_socket_timeout\")"}],"return":{"type":"resource","values":[]},"short":"Open persistent Internet or Unix domain socket connection","examples":[]},"php_ini_loaded_file":{"name":"php_ini_loaded_file","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Retrieve a path to the loaded php.ini file","examples":[{"title":"Example #1 php_ini_loaded_file() example","content":"<?php\n$inipath\u00a0=\u00a0php_ini_loaded_file();\n\nif\u00a0($inipath)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Loaded\u00a0php.ini:\u00a0'\u00a0.\u00a0$inipath;\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'A\u00a0php.ini\u00a0file\u00a0is\u00a0not\u00a0loaded';\n}\n?>"}]},"php_ini_scanned_files":{"name":"php_ini_scanned_files","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Return a list of .ini files parsed from the additional ini dir","examples":[{"title":"Example #1 A simple example to list the returned ini files","content":"<?php\nif\u00a0($filelist\u00a0=\u00a0php_ini_scanned_files())\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(strlen($filelist)\u00a0>\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$files\u00a0=\u00a0explode(',',\u00a0$filelist);\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach\u00a0($files\u00a0as\u00a0$file)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"<li>\"\u00a0.\u00a0trim($file)\u00a0.\u00a0\"<\/li>\\n\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"php_sapi_name":{"name":"php_sapi_name","parameters":[],"return":{"type":"string","values":[]},"short":"Returns the type of interface between web server and PHP","examples":[{"title":"Example #1 php_sapi_name() example","content":"This example checks for the substring cgi\n     because it may also be cgi-fcgi."}]},"php_strip_whitespace":{"name":"php_strip_whitespace","parameters":[{"type":"string","name":"$filename","description":"Path to the PHP file."}],"return":{"type":"string","values":[]},"short":"Return source with stripped comments and whitespace","examples":[{"title":"Example #1 php_strip_whitespace() example","content":"<?php\n\/\/\u00a0PHP\u00a0comment\u00a0here\n\n\/*\n\u00a0*\u00a0Another\u00a0PHP\u00a0comment\n\u00a0*\/\n\necho\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0php_strip_whitespace(__FILE__);\n\/\/\u00a0Newlines\u00a0are\u00a0considered\u00a0whitespace,\u00a0and\u00a0are\u00a0removed\u00a0too:\ndo_nothing();\n?>"}]},"php_uname":{"name":"php_uname","parameters":[{"type":"string","name":"$mode","default_value":"\"a\"","description":"mode is a single character that defines what information is returned:\n\n'a': This is the default. Contains all modes in the sequence \"s n r v m\".\n\n\n\n 's': Operating system name. eg. FreeBSD.\n\n\n\n 'n': Host name. eg. localhost.example.com.\n\n\n\n 'r': Release name. eg. 5.1.2-RELEASE.\n\n\n\n 'v': Version information. Varies a lot between operating systems.\n\n\n\n 'm': Machine type. eg. i386."}],"return":{"type":"string","values":[]},"short":"Returns information about the operating system PHP is running on","examples":[{"title":"Example #1 Some php_uname() examples","content":"<?php\necho\u00a0php_uname();\necho\u00a0PHP_OS;\n\n\/*\u00a0Some\u00a0possible\u00a0outputs:\nLinux\u00a0localhost\u00a02.4.21-0.13mdk\u00a0#1\u00a0Fri\u00a0Mar\u00a014\u00a015:08:06\u00a0EST\u00a02003\u00a0i686\nLinux\n\nFreeBSD\u00a0localhost\u00a03.2-RELEASE\u00a0#15:\u00a0Mon\u00a0Dec\u00a017\u00a008:46:02\u00a0GMT\u00a02001\nFreeBSD\n\nWindows\u00a0NT\u00a0XN1\u00a05.1\u00a0build\u00a02600\nWINNT\n*\/\n\nif\u00a0(strtoupper(substr(PHP_OS,\u00a00,\u00a03))\u00a0===\u00a0'WIN')\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'This\u00a0is\u00a0a\u00a0server\u00a0using\u00a0Windows!';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'This\u00a0is\u00a0a\u00a0server\u00a0not\u00a0using\u00a0Windows!';\n}\n\n?>"},{"title":"Example #2 A few OS related constant examples","content":"<?php\n\/\/\u00a0*nix\necho\u00a0DIRECTORY_SEPARATOR;\u00a0\/\/\u00a0\/\necho\u00a0PHP_SHLIB_SUFFIX;\u00a0\u00a0\u00a0\u00a0\/\/\u00a0so\necho\u00a0PATH_SEPARATOR;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0:\n\n\/\/\u00a0Win*\necho\u00a0DIRECTORY_SEPARATOR;\u00a0\/\/\u00a0\\\necho\u00a0PHP_SHLIB_SUFFIX;\u00a0\u00a0\u00a0\u00a0\/\/\u00a0dll\necho\u00a0PATH_SEPARATOR;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0;\n?>"}]},"phpcredits":{"name":"phpcredits","parameters":[{"type":"int","name":"$flag","default_value":"CREDITS_ALL","description":"To generate a custom credits page, you may want to use the flag parameter.\n\n\n\nPre-defined phpcredits() flags\n name description CREDITS_ALL\n All the credits, equivalent to using: CREDITS_DOCS + CREDITS_GENERAL + CREDITS_GROUP + CREDITS_MODULES + CREDITS_FULLPAGE. It generates a complete stand-alone HTML page with the appropriate tags.\n CREDITS_DOCS The credits for the documentation team CREDITS_FULLPAGE\n Usually used in combination with the other flags.  Indicates that a complete stand-alone HTML page needs to be printed including the information indicated by the other flags.\n CREDITS_GENERAL\n General credits: Language design and concept, PHP authors and SAPI module.\n CREDITS_GROUP A list of the core developers CREDITS_MODULES\n A list of the extension modules for PHP, and their authors\n CREDITS_SAPI\n A list of the server API modules for PHP, and their authors"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Prints out the credits for PHP","examples":[{"title":"Example #1 Prints the general credits","content":"<?php\nphpcredits(CREDITS_GENERAL);\n?>"},{"title":"Example #2 Prints the core developers and the documentation group","content":"<?php\nphpcredits(CREDITS_GROUP\u00a0|\u00a0CREDITS_DOCS\u00a0|\u00a0CREDITS_FULLPAGE);\n?>"},{"title":"Example #3 Printing all the credits","content":"<html>\n\u00a0<head>\n\u00a0\u00a0<title>My\u00a0credits\u00a0page<\/title>\n\u00a0<\/head>\n\u00a0<body>\n<?php\n\/\/\u00a0some\u00a0code\u00a0of\u00a0your\u00a0own\nphpcredits(CREDITS_ALL\u00a0-\u00a0CREDITS_FULLPAGE);\n\/\/\u00a0some\u00a0more\u00a0code\n?>\n\u00a0<\/body>\n<\/html>"}]},"phpinfo":{"name":"phpinfo","parameters":[{"type":"int","name":"$what","default_value":"INFO_ALL","description":"The output may be customized by passing one or more of the following constants bitwise values summed together in the optional what parameter. One can also combine the respective constants or bitwise values together with the or operator.\n\n\n\nphpinfo() options\n Name (constant) Value Description INFO_GENERAL 1\n The configuration line, php.ini location, build date, Web Server, System and more.\n INFO_CREDITS 2\n PHP Credits.  See also phpcredits().\n INFO_CONFIGURATION 4\n Current Local and Master values for PHP directives.  See also ini_get().\n INFO_MODULES 8\n Loaded modules and their respective settings.  See also get_loaded_extensions().\n INFO_ENVIRONMENT 16\n Environment Variable information that's also available in $_ENV.\n INFO_VARIABLES 32\n Shows all predefined variables from EGPCS (Environment, GET, POST, Cookie, Server).\n INFO_LICENSE 64\n PHP License information.  See also the \u00bb\u00a0license FAQ.\n INFO_ALL -1\n Shows all of the above."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Outputs information about PHP's configuration","examples":[{"title":"Example #1 phpinfo() Example","content":"<?php\n\n\/\/\u00a0Show\u00a0all\u00a0information,\u00a0defaults\u00a0to\u00a0INFO_ALL\nphpinfo();\n\n\/\/\u00a0Show\u00a0just\u00a0the\u00a0module\u00a0information.\n\/\/\u00a0phpinfo(8)\u00a0yields\u00a0identical\u00a0results.\nphpinfo(INFO_MODULES);\n\n?>"}]},"phpversion":{"name":"phpversion","parameters":[{"type":"string","name":"$extension","description":"An optional extension name."}],"return":{"type":"string","values":["FALSE"]},"short":"Gets the current PHP version","examples":[{"title":"Example #1 phpversion() example","content":"<?php\n\/\/\u00a0prints\u00a0e.g.\u00a0'Current\u00a0PHP\u00a0version:\u00a04.1.1'\necho\u00a0'Current\u00a0PHP\u00a0version:\u00a0'\u00a0.\u00a0phpversion();\n\n\/\/\u00a0prints\u00a0e.g.\u00a0'2.0'\u00a0or\u00a0nothing\u00a0if\u00a0the\u00a0extension\u00a0isn't\u00a0enabled\necho\u00a0phpversion('tidy');\n?>"},{"title":"Example #2 PHP_VERSION_ID example and usage","content":"<?php\n\/\/\u00a0PHP_VERSION_ID\u00a0is\u00a0available\u00a0as\u00a0of\u00a0PHP\u00a05.2.7,\u00a0if\u00a0our\u00a0\n\/\/\u00a0version\u00a0is\u00a0lower\u00a0than\u00a0that,\u00a0then\u00a0emulate\u00a0it\nif\u00a0(!defined('PHP_VERSION_ID'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$version\u00a0=\u00a0explode('.',\u00a0PHP_VERSION);\n\n\u00a0\u00a0\u00a0\u00a0define('PHP_VERSION_ID',\u00a0($version[0]\u00a0*\u00a010000\u00a0+\u00a0$version[1]\u00a0*\u00a0100\u00a0+\u00a0$version[2]));\n}\n\n\/\/\u00a0PHP_VERSION_ID\u00a0is\u00a0defined\u00a0as\u00a0a\u00a0number,\u00a0where\u00a0the\u00a0higher\u00a0the\u00a0number\u00a0\n\/\/\u00a0is,\u00a0the\u00a0newer\u00a0a\u00a0PHP\u00a0version\u00a0is\u00a0used.\u00a0It's\u00a0defined\u00a0as\u00a0used\u00a0in\u00a0the\u00a0above\u00a0\n\/\/\u00a0expression:\n\/\/\n\/\/\u00a0$version_id\u00a0=\u00a0$major_version\u00a0*\u00a010000\u00a0+\u00a0$minor_version\u00a0*\u00a0100\u00a0+\u00a0$release_version;\n\/\/\n\/\/\u00a0Now\u00a0with\u00a0PHP_VERSION_ID\u00a0we\u00a0can\u00a0check\u00a0for\u00a0features\u00a0this\u00a0PHP\u00a0version\u00a0\n\/\/\u00a0may\u00a0have,\u00a0this\u00a0doesn't\u00a0require\u00a0to\u00a0use\u00a0version_compare()\u00a0everytime\u00a0\n\/\/\u00a0you\u00a0check\u00a0if\u00a0the\u00a0current\u00a0PHP\u00a0version\u00a0may\u00a0not\u00a0support\u00a0a\u00a0feature.\n\/\/\n\/\/\u00a0For\u00a0example,\u00a0we\u00a0may\u00a0here\u00a0define\u00a0the\u00a0PHP_VERSION_*\u00a0constants\u00a0thats\u00a0\n\/\/\u00a0not\u00a0available\u00a0in\u00a0versions\u00a0prior\u00a0to\u00a05.2.7\n\nif\u00a0(PHP_VERSION_ID\u00a0<\u00a050207)\u00a0{\n\u00a0\u00a0\u00a0\u00a0define('PHP_MAJOR_VERSION',\u00a0\u00a0\u00a0$version[0]);\n\u00a0\u00a0\u00a0\u00a0define('PHP_MINOR_VERSION',\u00a0\u00a0\u00a0$version[1]);\n\u00a0\u00a0\u00a0\u00a0define('PHP_RELEASE_VERSION',\u00a0$version[2]);\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0and\u00a0so\u00a0on,\u00a0...\n}\n?>"}]},"pi":{"name":"pi","parameters":[],"return":{"type":"float","values":[]},"short":"Get value of pi","examples":[{"title":"Example #1 pi() example","content":"<?php\necho\u00a0pi();\u00a0\/\/\u00a03.1415926535898\necho\u00a0M_PI;\u00a0\/\/\u00a03.1415926535898\n?>"}]},"popen":{"name":"popen","parameters":[{"type":"string","name":"$command","description":"The command"},{"type":"string","name":"$mode","description":"The mode"}],"return":{"type":"resource","values":["FALSE"]},"short":"Opens process file pointer","examples":[{"title":"Example #1 popen() example","content":"<?php\n$handle\u00a0=\u00a0popen(\"\/bin\/ls\",\u00a0\"r\");\n?>"},{"title":"Example #2 popen() example","content":"<?php\nerror_reporting(E_ALL);\n\n\/*\u00a0Add\u00a0redirection\u00a0so\u00a0we\u00a0can\u00a0get\u00a0stderr.\u00a0*\/\n$handle\u00a0=\u00a0popen('\/path\/to\/executable\u00a02>&1',\u00a0'r');\necho\u00a0\"'$handle';\u00a0\"\u00a0.\u00a0gettype($handle)\u00a0.\u00a0\"\\n\";\n$read\u00a0=\u00a0fread($handle,\u00a02096);\necho\u00a0$read;\npclose($handle);\n?>"}]},"pos":{"name":"pos","parameters":[],"return":{"type":"","values":[]},"short":"Alias of current()","examples":[]},"posix_access":{"name":"posix_access","parameters":[{"type":"string","name":"$file","description":"The name of the file to be tested."},{"type":"int","name":"$mode","default_value":"POSIX_F_OK","description":"A mask consisting of one or more of POSIX_F_OK, POSIX_R_OK, POSIX_W_OK and POSIX_X_OK.\n\nPOSIX_R_OK, POSIX_W_OK and POSIX_X_OK request checking whether the file exists and has read, write and execute permissions, respectively. POSIX_F_OK just requests checking for the existence of the file."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Determine accessibility of a file\n  ","examples":[{"title":"Example #1 posix_access() example","content":"This example will check if the $file is readable and writable, otherwise\n     will print an error message."}]},"posix_ctermid":{"name":"posix_ctermid","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Get path name of controlling terminal","examples":[{"title":"Example #1 posix_ctermid() example","content":"This example will display the path to the current TTY."}]},"posix_errno":{"name":"posix_errno","parameters":[],"return":{"type":"","values":[]},"short":"Alias of posix_get_last_error()","examples":[]},"posix_get_last_error":{"name":"posix_get_last_error","parameters":[],"return":{"type":"int","values":[]},"short":"Retrieve the error number set by the last posix function that failed","examples":[{"title":"Example #1 posix_get_last_error() example","content":"This example attempt to kill a bogus process id, which will set the\n     last error.  We will then print out the last errno."}]},"posix_getcwd":{"name":"posix_getcwd","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Pathname of current directory","examples":[{"title":"Example #1 posix_getcwd() example","content":"This example will return the absolute path of the current working \n     directory of the script."}]},"posix_getegid":{"name":"posix_getegid","parameters":[],"return":{"type":"int","values":[]},"short":"Return the effective group ID of the current process","examples":[{"title":"Example #1 posix_getegid() example","content":"This example will print out the effective group id, once it is\n     changed with posix_setegid()."}]},"posix_geteuid":{"name":"posix_geteuid","parameters":[],"return":{"type":"int","values":[]},"short":"Return the effective user ID of the current process","examples":[{"title":"Example #1 posix_geteuid() example","content":"This example will show the current user id then set the\n    effective user id to a separate id using\n    posix_seteuid(), then show the difference between\n    the real id and the effective id."}]},"posix_getgid":{"name":"posix_getgid","parameters":[],"return":{"type":"int","values":[]},"short":"Return the real group ID of the current process","examples":[{"title":"Example #1 posix_getgid() example","content":"This example will print out the real group id, even once the effective\n     group id has been changed."}]},"posix_getgrgid":{"name":"posix_getgrgid","parameters":[{"type":"int","name":"$gid","description":"The group id."}],"return":{"type":"array","values":[]},"short":"Return info about a group by group id","examples":[{"title":"Example #1 Example use of posix_getgrgid()","content":"<?php\n\n$groupid\u00a0\u00a0\u00a0=\u00a0posix_getegid();\n$groupinfo\u00a0=\u00a0posix_getgrgid($groupid);\n\nprint_r($groupinfo);\n?>"}]},"posix_getgrnam":{"name":"posix_getgrnam","parameters":[{"type":"string","name":"$name","description":"The name of the group"}],"return":{"type":"array","values":[]},"short":"Return info about a group by name","examples":[{"title":"Example #1 Example use of posix_getgrnam()","content":"<?php\n\n$groupinfo\u00a0=\u00a0posix_getgrnam(\"toons\");\n\nprint_r($groupinfo);\n?>"}]},"posix_getgroups":{"name":"posix_getgroups","parameters":[],"return":{"type":"array","values":[]},"short":"Return the group set of the current process","examples":[{"title":"Example #1 Example use of posix_getgroups()","content":"<?php\n\n$groups\u00a0=\u00a0posix_getgroups();\n\nprint_r($groups);\n?>"}]},"posix_getlogin":{"name":"posix_getlogin","parameters":[],"return":{"type":"string","values":[]},"short":"Return login name","examples":[{"title":"Example #1 Example use of posix_getlogin()","content":"<?php\necho\u00a0posix_getlogin();\u00a0\/\/apache\n?>"}]},"posix_getpgid":{"name":"posix_getpgid","parameters":[{"type":"int","name":"$pid","description":"The process id."}],"return":{"type":"int","values":[]},"short":"Get process group id for job control","examples":[{"title":"Example #1 Example use of posix_getpgid()","content":"<?php\n$pid\u00a0=\u00a0posix_getppid();\necho\u00a0posix_getpgid($pid);\u00a0\/\/35\n?>"}]},"posix_getpgrp":{"name":"posix_getpgrp","parameters":[],"return":{"type":"int","values":[]},"short":"Return the current process group identifier","examples":[]},"posix_getpid":{"name":"posix_getpid","parameters":[],"return":{"type":"int","values":[]},"short":"Return the current process identifier","examples":[{"title":"Example #1 Example use of posix_getpid()","content":"<?php\necho\u00a0posix_getpid();\u00a0\/\/8805\n?>"}]},"posix_getppid":{"name":"posix_getppid","parameters":[],"return":{"type":"int","values":[]},"short":"Return the parent process identifier","examples":[{"title":"Example #1 Example use of posix_getppid()","content":"<?php\necho\u00a0posix_getppid();\u00a0\/\/8259\n?>"}]},"posix_getpwnam":{"name":"posix_getpwnam","parameters":[{"type":"string","name":"$username","description":"An alphanumeric username."}],"return":{"type":"array","values":["FALSE"]},"short":"Return info about a user by username","examples":[{"title":"Example #1 Example use of posix_getpwnam()","content":"<?php\n\n$userinfo\u00a0=\u00a0posix_getpwnam(\"tom\");\n\nprint_r($userinfo);\n?>"}]},"posix_getpwuid":{"name":"posix_getpwuid","parameters":[{"type":"int","name":"$uid","description":"The user identifier."}],"return":{"type":"array","values":[]},"short":"Return info about a user by user id","examples":[{"title":"Example #1 Example use of posix_getpwuid()","content":"<?php\n\n$userinfo\u00a0=\u00a0posix_getpwuid(10000);\n\nprint_r($userinfo);\n?>"}]},"posix_getrlimit":{"name":"posix_getrlimit","parameters":[],"return":{"type":"array","values":[]},"short":"Return info about system resource limits","examples":[{"title":"Example #1 Example use of posix_getrlimit()","content":"<?php\n\n$limits\u00a0=\u00a0posix_getrlimit();\n\nprint_r($limits);\n?>"}]},"posix_getsid":{"name":"posix_getsid","parameters":[{"type":"int","name":"$pid","description":"The process identifier. If set to 0, the current process is assumed.  If an invalid pid is specified, then FALSE is returned and an error is set which can be checked with posix_get_last_error()."}],"return":{"type":"int","values":[]},"short":"Get the current sid of the process","examples":[{"title":"Example #1 Example use of posix_getsid()","content":"<?php\n$pid\u00a0=\u00a0posix_getpid();\necho\u00a0posix_getsid($pid);\u00a0\/\/8805\n?>"}]},"posix_getuid":{"name":"posix_getuid","parameters":[],"return":{"type":"int","values":[]},"short":"Return the real user ID of the current process","examples":[{"title":"Example #1 Example use of posix_getuid()","content":"<?php\necho\u00a0posix_getuid();\u00a0\/\/10000\n?>"}]},"posix_initgroups":{"name":"posix_initgroups","parameters":[{"type":"string","name":"$name","description":"The user to calculate the list for."},{"type":"int","name":"$base_group_id","description":"Typically the group number from the password file."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Calculate the group access list","examples":[]},"posix_isatty":{"name":"posix_isatty","parameters":[{"type":"mixed","name":"$fd","description":"The file descriptor, which is expected to be either a file resource or an integer. An integer will be assumed to be a file descriptor that can be passed directly to the underlying system call.\n\nIn almost all cases, you will want to provide a file resource."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Determine if a file descriptor is an interactive terminal","examples":[]},"posix_kill":{"name":"posix_kill","parameters":[{"type":"int","name":"$pid","description":"The process identifier."},{"type":"int","name":"$sig","description":"One of the PCNTL signals constants."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Send a signal to a process","examples":[]},"posix_mkfifo":{"name":"posix_mkfifo","parameters":[{"type":"string","name":"$pathname","description":"Path to the FIFO file."},{"type":"int","name":"$mode","description":"The second parameter mode has to be given in octal notation (e.g. 0644). The permission of the newly created FIFO also depends on the setting of the current umask(). The permissions of the created file are (mode & ~umask)."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create a fifo special file (a named pipe)","examples":[]},"posix_mknod":{"name":"posix_mknod","parameters":[{"type":"string","name":"$pathname","description":"The file to create"},{"type":"int","name":"$mode","description":"This parameter is constructed by a bitwise OR between file type (one of the following constants: POSIX_S_IFREG, POSIX_S_IFCHR, POSIX_S_IFBLK, POSIX_S_IFIFO or POSIX_S_IFSOCK) and permissions."},{"type":"int","name":"$major","default_value":"0","description":"The major device kernel identifier (required to pass when using S_IFCHR or S_IFBLK)."},{"type":"int","name":"$minor","default_value":"0","description":"The minor device kernel identifier."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Create a special or ordinary file (POSIX.1)\n  ","examples":[{"title":"Example #1 A posix_mknod() example","content":"<?php\n\n$file\u00a0=\u00a0'\/tmp\/tmpfile';\u00a0\u00a0\/\/\u00a0file\u00a0name\n$type\u00a0=\u00a0POSIX_S_IFBLK;\u00a0\u00a0\u00a0\/\/\u00a0file\u00a0type\n$permissions\u00a0=\u00a00777;\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0octal\n$major\u00a0=\u00a01;\n$minor\u00a0=\u00a08;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0\/dev\/random\n\nif\u00a0(!posix_mknod($file,\u00a0$type\u00a0|\u00a0$permissions,\u00a0$major,\u00a0$minor))\u00a0{\n\u00a0\u00a0\u00a0\u00a0die('Error\u00a0'\u00a0.\u00a0posix_get_last_error()\u00a0.\u00a0':\u00a0'\u00a0.\u00a0posix_strerror(posix_get_last_error()));\n}\n\n?>"}]},"posix_setegid":{"name":"posix_setegid","parameters":[{"type":"int","name":"$gid","description":"The group id."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set the effective GID of the current process","examples":[{"title":"Example #1 posix_setegid() example","content":"This example will print out the effective group id, once changed."}]},"posix_seteuid":{"name":"posix_seteuid","parameters":[{"type":"int","name":"$uid","description":"The user id."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set the effective UID of the current process","examples":[]},"posix_setgid":{"name":"posix_setgid","parameters":[{"type":"int","name":"$gid","description":"The group id."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set the GID of the current process","examples":[{"title":"Example #1 posix_setgid() example","content":"This example will print out the effective group id, once it is changed."}]},"posix_setpgid":{"name":"posix_setpgid","parameters":[{"type":"int","name":"$pid","description":"The process id."},{"type":"int","name":"$pgid","description":"The process group id."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set process group id for job control","examples":[]},"posix_setrlimit":{"name":"posix_setrlimit","parameters":[{"type":"int","name":"$resource","description":"The resource limit constant corresponding to the limit that is being set."},{"type":"int","name":"$softlimit","description":"The soft limit, in whatever unit the resource limit requires, or POSIX_RLIMIT_INFINITY."},{"type":"int","name":"$hardlimit","description":"The hard limit, in whatever unit the resource limit requires, or POSIX_RLIMIT_INFINITY."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set system resource limits","examples":[]},"posix_setsid":{"name":"posix_setsid","parameters":[],"return":{"type":"int","values":[]},"short":"Make the current process a session leader","examples":[]},"posix_setuid":{"name":"posix_setuid","parameters":[{"type":"int","name":"$uid","description":"The user id."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set the UID of the current process","examples":[{"title":"Example #1 posix_setuid() example","content":"This example will show the current user id and then set\n     it to a different value."}]},"posix_strerror":{"name":"posix_strerror","parameters":[{"type":"int","name":"$errno","description":"A POSIX error number, returned by posix_get_last_error(). If set to 0, then the string \"Success\" is returned."}],"return":{"type":"string","values":[]},"short":"Retrieve the system error message associated with the given errno","examples":[{"title":"Example #1 posix_strerror() example","content":"This example will attempt to kill a process which does not\n    exist, then will print out the corresponding error message."}]},"posix_times":{"name":"posix_times","parameters":[],"return":{"type":"array","values":[]},"short":"Get process times","examples":[{"title":"Example #1 Example use of posix_times()","content":"<?php\n\n$times\u00a0=\u00a0posix_times();\n\nprint_r($times);\n?>"}]},"posix_ttyname":{"name":"posix_ttyname","parameters":[{"type":"mixed","name":"$fd","description":"The file descriptor, which is expected to be either a file resource or an integer. An integer will be assumed to be a file descriptor that can be passed directly to the underlying system call.\n\nIn almost all cases, you will want to provide a file resource."}],"return":{"type":"string","values":["FALSE"]},"short":"Determine terminal device name","examples":[]},"posix_uname":{"name":"posix_uname","parameters":[],"return":{"type":"array","values":[]},"short":"Get system name","examples":[{"title":"Example #1 Example use of posix_uname()","content":"<?php\n$uname=posix_uname();\nprint_r($uname);\n?>"}]},"pow":{"name":"pow","parameters":[{"type":"number","name":"$base","description":"The base to use"},{"type":"number","name":"$exp","description":"The exponent"}],"return":{"type":"number","values":[]},"short":"Exponential expression","examples":[{"title":"Example #1 Some examples of pow()","content":"<?php\n\nvar_dump(pow(2,\u00a08));\u00a0\/\/\u00a0int(256)\necho\u00a0pow(-1,\u00a020);\u00a0\/\/\u00a01\necho\u00a0pow(0,\u00a00);\u00a0\/\/\u00a01\necho\u00a0pow(10,\u00a0-1);\u00a0\/\/\u00a00.1\n\necho\u00a0pow(-1,\u00a05.5);\u00a0\/\/\u00a0PHP\u00a0>=5.2.2:\u00a0NAN\necho\u00a0pow(-1,\u00a05.5);\u00a0\/\/\u00a0PHP\u00a0<5.2.2:\u00a0-NAN\n?>"}]},"preg_filter":{"name":"preg_filter","parameters":[{"type":"mixed","name":"$pattern"},{"type":"mixed","name":"$replacement"},{"type":"mixed","name":"$subject"},{"type":"int","name":"$limit","default_value":"-1"}],"return":{"type":"mixed","values":["NULL"]},"short":"Perform a regular expression search and replace","examples":[{"title":"Example #1 \n     Example comparing preg_filter() \n     with preg_replace()\n    ","content":"<?php\n$subject\u00a0=\u00a0array('1',\u00a0'a',\u00a0'2',\u00a0'b',\u00a0'3',\u00a0'A',\u00a0'B',\u00a0'4');\u00a0\n$pattern\u00a0=\u00a0array('\/\\d\/',\u00a0'\/[a-z]\/',\u00a0'\/[1a]\/');\u00a0\n$replace\u00a0=\u00a0array('A:$0',\u00a0'B:$0',\u00a0'C:$0');\u00a0\n\necho\u00a0\"preg_filter\u00a0returns\\n\";\nprint_r(preg_filter($pattern,\u00a0$replace,\u00a0$subject));\u00a0\n\necho\u00a0\"preg_replace\u00a0returns\\n\";\nprint_r(preg_replace($pattern,\u00a0$replace,\u00a0$subject));\u00a0\n?>"}]},"preg_grep":{"name":"preg_grep","parameters":[{"type":"string","name":"$pattern","description":"The pattern to search for, as a string."},{"type":"array","name":"$input","description":"The input array."},{"type":"int","name":"$flags","default_value":"0","description":"If set to PREG_GREP_INVERT, this function returns the elements of the input array that do not match the given pattern."}],"return":{"type":"array","values":[]},"short":"Return array entries that match the pattern","examples":[{"title":"Example #1 preg_grep() example","content":"<?php\n\/\/\u00a0return\u00a0all\u00a0array\u00a0elements\n\/\/\u00a0containing\u00a0floating\u00a0point\u00a0numbers\n$fl_array\u00a0=\u00a0preg_grep(\"\/^(\\d+)?\\.\\d+$\/\",\u00a0$array);\n?>"}]},"preg_last_error":{"name":"preg_last_error","parameters":[],"return":{"type":"int","values":[]},"short":"Returns the error code of the last PCRE regex execution","examples":[]},"preg_match":{"name":"preg_match","parameters":[{"type":"string","name":"$pattern","description":"The pattern to search for, as a string."},{"type":"string","name":"$subject","description":"The input string."},{"type":"int","name":"$flags","default_value":"0","description":"flags can be the following flag:\n\nPREG_OFFSET_CAPTURE\n\n\n\n If this flag is passed, for every occurring match the appendant string offset will also be returned. Note that this changes the value of matches into an array where every element is an array consisting of the matched string at offset 0 and its string offset into subject at offset 1.\n\n\n <?php preg_match('\/(foo)(bar)(baz)\/',\u00a0'foobarbaz',\u00a0$matches,\u00a0PREG_OFFSET_CAPTURE); print_r($matches); ?>\n\n\n\n The above example will output:\n\n Array ( [0] => Array ( [0] => foobarbaz [1] => 0 )\n [1] => Array ( [0] => foo [1] => 0 )\n [2] => Array ( [0] => bar [1] => 3 )\n [3] => Array ( [0] => baz [1] => 6 )\n )"},{"type":"int","name":"$offset","default_value":"0","description":"Normally, the search starts from the beginning of the subject string. The optional parameter offset can be used to specify the alternate place from which to start the search (in bytes).\n\nNote:\n Using offset is not equivalent to passing substr($subject, $offset) to preg_match() in place of the subject string, because pattern can contain assertions such as ^, $ or (?<=x). Compare:\n\n\n <?php $subject\u00a0=\u00a0\"abcdef\"; $pattern\u00a0=\u00a0'\/^def\/'; preg_match($pattern,\u00a0$subject,\u00a0$matches,\u00a0PREG_OFFSET_CAPTURE,\u00a03); print_r($matches); ?>\n\n\n\n The above example will output:\n\n Array ( )\n\n\n while this example\n\n\n <?php $subject\u00a0=\u00a0\"abcdef\"; $pattern\u00a0=\u00a0'\/^def\/'; preg_match($pattern,\u00a0substr($subject,3),\u00a0$matches,\u00a0PREG_OFFSET_CAPTURE); print_r($matches); ?>\n\n\n\n\n will produce\n\n\n Array ( [0] => Array ( [0] => def [1] => 0 )\n )\n\n\n Alternatively, to avoid using substr(), use the \\G assertion rather than the ^ anchor, or the A modifier instead, both of which work with the offset parameter."}],"return":{"type":"int","values":["FALSE"]},"short":"Perform a regular expression match","examples":[{"title":"Example #1 Find the string of text \"php\"","content":"<?php\n\/\/\u00a0The\u00a0\"i\"\u00a0after\u00a0the\u00a0pattern\u00a0delimiter\u00a0indicates\u00a0a\u00a0case-insensitive\u00a0search\nif\u00a0(preg_match(\"\/php\/i\",\u00a0\"PHP\u00a0is\u00a0the\u00a0web\u00a0scripting\u00a0language\u00a0of\u00a0choice.\"))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0found.\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0not\u00a0found.\";\n}\n?>"},{"title":"Example #2 Find the word \"web\"","content":"<?php\n\/*\u00a0The\u00a0\\b\u00a0in\u00a0the\u00a0pattern\u00a0indicates\u00a0a\u00a0word\u00a0boundary,\u00a0so\u00a0only\u00a0the\u00a0distinct\n\u00a0*\u00a0word\u00a0\"web\"\u00a0is\u00a0matched,\u00a0and\u00a0not\u00a0a\u00a0word\u00a0partial\u00a0like\u00a0\"webbing\"\u00a0or\u00a0\"cobweb\"\u00a0*\/\nif\u00a0(preg_match(\"\/\\bweb\\b\/i\",\u00a0\"PHP\u00a0is\u00a0the\u00a0web\u00a0scripting\u00a0language\u00a0of\u00a0choice.\"))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0found.\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0not\u00a0found.\";\n}\n\nif\u00a0(preg_match(\"\/\\bweb\\b\/i\",\u00a0\"PHP\u00a0is\u00a0the\u00a0website\u00a0scripting\u00a0language\u00a0of\u00a0choice.\"))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0found.\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"A\u00a0match\u00a0was\u00a0not\u00a0found.\";\n}\n?>"},{"title":"Example #3 Getting the domain name out of a URL","content":"<?php\n\/\/\u00a0get\u00a0host\u00a0name\u00a0from\u00a0URL\npreg_match('@^(?:http:\/\/)?([^\/]+)@i',\n\u00a0\u00a0\u00a0\u00a0\"http:\/\/www.php.net\/index.html\",\u00a0$matches);\n$host\u00a0=\u00a0$matches[1];\n\n\/\/\u00a0get\u00a0last\u00a0two\u00a0segments\u00a0of\u00a0host\u00a0name\npreg_match('\/[^.]+\\.[^.]+$\/',\u00a0$host,\u00a0$matches);\necho\u00a0\"domain\u00a0name\u00a0is:\u00a0{$matches[0]}\\n\";\n?>"},{"title":"Example #4 Using named subpattern","content":"<?php\n\n$str\u00a0=\u00a0'foobar:\u00a02008';\n\npreg_match('\/(?P<name>\\w+):\u00a0(?P<digit>\\d+)\/',\u00a0$str,\u00a0$matches);\n\n\/*\u00a0This\u00a0also\u00a0works\u00a0in\u00a0PHP\u00a05.2.2\u00a0(PCRE\u00a07.0)\u00a0and\u00a0later,\u00a0however\u00a0\n\u00a0*\u00a0the\u00a0above\u00a0form\u00a0is\u00a0recommended\u00a0for\u00a0backwards\u00a0compatibility\u00a0*\/\n\/\/\u00a0preg_match('\/(?<name>\\w+):\u00a0(?<digit>\\d+)\/',\u00a0$str,\u00a0$matches);\n\nprint_r($matches);\n\n?>"}]},"preg_match_all":{"name":"preg_match_all","parameters":[{"type":"string","name":"$pattern","description":"The pattern to search for, as a string."},{"type":"string","name":"$subject","description":"The input string."},{"type":"int","name":"$flags","default_value":"PREG_PATTERN_ORDER","description":"Can be a combination of the following flags (note that it doesn't make sense to use PREG_PATTERN_ORDER together with PREG_SET_ORDER):\n\nPREG_PATTERN_ORDER\n\n\n\n Orders results so that $matches[0] is an array of full pattern matches, $matches[1] is an array of strings matched by the first parenthesized subpattern, and so on.\n\n\n\n\n <?php preg_match_all(\"|<[^>]+>(.*)<\/[^>]+>|U\", \u00a0\u00a0\u00a0\u00a0\"<b>example:\u00a0<\/b><div\u00a0align=left>this\u00a0is\u00a0a\u00a0test<\/div>\", \u00a0\u00a0\u00a0\u00a0$out,\u00a0PREG_PATTERN_ORDER); echo\u00a0$out[0][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[0][1]\u00a0.\u00a0\"\\n\"; echo\u00a0$out[1][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[1][1]\u00a0.\u00a0\"\\n\"; ?>\n\n\n\n The above example will output:\n\n <b>example: <\/b>, <div align=left>this is a test<\/div> example: , this is a test\n\n\n So, $out[0] contains array of strings that matched full pattern, and $out[1] contains array of strings enclosed by tags.\n\n\n\n If the pattern contains named subpatterns, $matches additionally contains entries for keys with the subpattern name.\n\n If the pattern contains duplicate named subpatterns, only the rightmost subpattern is stored in $matches[NAME].\n\n\n <?php preg_match_all( \u00a0\u00a0\u00a0\u00a0'\/(?J)(?<match>foo)|(?<match>bar)\/', \u00a0\u00a0\u00a0\u00a0'foo\u00a0bar', \u00a0\u00a0\u00a0\u00a0$matches, \u00a0\u00a0\u00a0\u00a0PREG_PATTERN_ORDER ); print_r($matches['match']); ?>\n\n\n\n The above example will output:\n\n Array ( [0] => [1] => bar )\n\n\n\n\n\n\n\n\n PREG_SET_ORDER\n\n\n\n Orders results so that $matches[0] is an array of first set of matches, $matches[1] is an array of second set of matches, and so on.\n\n\n <?php preg_match_all(\"|<[^>]+>(.*)<\/[^>]+>|U\", \u00a0\u00a0\u00a0\u00a0\"<b>example:\u00a0<\/b><div\u00a0align=\\\"left\\\">this\u00a0is\u00a0a\u00a0test<\/div>\", \u00a0\u00a0\u00a0\u00a0$out,\u00a0PREG_SET_ORDER); echo\u00a0$out[0][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[0][1]\u00a0.\u00a0\"\\n\"; echo\u00a0$out[1][0]\u00a0.\u00a0\",\u00a0\"\u00a0.\u00a0$out[1][1]\u00a0.\u00a0\"\\n\"; ?>\n\n\n\n The above example will output:\n\n <b>example: <\/b>, example: <div align=\"left\">this is a test<\/div>, this is a test\n\n\n\n\n\n\n\n\n PREG_OFFSET_CAPTURE\n\n\n\n If this flag is passed, for every occurring match the appendant string offset will also be returned. Note that this changes the value of matches into an array of arrays where every element is an array consisting of the matched string at offset 0 and its string offset into subject at offset 1.\n\n\n <?php preg_match_all('\/(foo)(bar)(baz)\/',\u00a0'foobarbaz',\u00a0$matches,\u00a0PREG_OFFSET_CAPTURE); print_r($matches); ?>\n\n\n\n The above example will output:\n\n Array ( [0] => Array ( [0] => Array ( [0] => foobarbaz [1] => 0 )\n )\n [1] => Array ( [0] => Array ( [0] => foo [1] => 0 )\n )\n [2] => Array ( [0] => Array ( [0] => bar [1] => 3 )\n )\n [3] => Array ( [0] => Array ( [0] => baz [1] => 6 )\n )\n )\n\nIf no order flag is given, PREG_PATTERN_ORDER is assumed."},{"type":"int","name":"$offset","default_value":"0","description":"Normally, the search starts from the beginning of the subject string. The optional parameter offset can be used to specify the alternate place from which to start the search (in bytes).\n\nNote:\n Using offset is not equivalent to passing substr($subject, $offset) to preg_match_all() in place of the subject string, because pattern can contain assertions such as ^, $ or (?<=x). See preg_match() for examples."}],"return":{"type":"int","values":["FALSE"]},"short":"Perform a global regular expression match","examples":[{"title":"Example #1 Getting all phone numbers out of some text.","content":"<?php\npreg_match_all(\"\/\\(?\u00a0\u00a0(\\d{3})?\u00a0\u00a0\\)?\u00a0\u00a0(?(1)\u00a0\u00a0[\\-\\s]\u00a0)\u00a0\\d{3}-\\d{4}\/x\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Call\u00a0555-1212\u00a0or\u00a01-800-555-1212\",\u00a0$phones);\n?>"},{"title":"Example #2 Find matching HTML tags (greedy)","content":"<?php\n\/\/\u00a0The\u00a0\\\\2\u00a0is\u00a0an\u00a0example\u00a0of\u00a0backreferencing.\u00a0This\u00a0tells\u00a0pcre\u00a0that\n\/\/\u00a0it\u00a0must\u00a0match\u00a0the\u00a0second\u00a0set\u00a0of\u00a0parentheses\u00a0in\u00a0the\u00a0regular\u00a0expression\n\/\/\u00a0itself,\u00a0which\u00a0would\u00a0be\u00a0the\u00a0([\\w]+)\u00a0in\u00a0this\u00a0case.\u00a0The\u00a0extra\u00a0backslash\u00a0is\n\/\/\u00a0required\u00a0because\u00a0the\u00a0string\u00a0is\u00a0in\u00a0double\u00a0quotes.\n$html\u00a0=\u00a0\"<b>bold\u00a0text<\/b><a\u00a0href=howdy.html>click\u00a0me<\/a>\";\n\npreg_match_all(\"\/(<([\\w]+)[^>]*>)(.*?)(<\\\/\\\\2>)\/\",\u00a0$html,\u00a0$matches,\u00a0PREG_SET_ORDER);\n\nforeach\u00a0($matches\u00a0as\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"matched:\u00a0\"\u00a0.\u00a0$val[0]\u00a0.\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"part\u00a01:\u00a0\"\u00a0.\u00a0$val[1]\u00a0.\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"part\u00a02:\u00a0\"\u00a0.\u00a0$val[2]\u00a0.\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"part\u00a03:\u00a0\"\u00a0.\u00a0$val[3]\u00a0.\u00a0\"\\n\";\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"part\u00a04:\u00a0\"\u00a0.\u00a0$val[4]\u00a0.\u00a0\"\\n\\n\";\n}\n?>"},{"title":"Example #3 Using named subpattern","content":"<?php\n\n$str\u00a0=\u00a0<<<FOO\na:\u00a01\nb:\u00a02\nc:\u00a03\nFOO;\n\npreg_match_all('\/(?P<name>\\w+):\u00a0(?P<digit>\\d+)\/',\u00a0$str,\u00a0$matches);\n\n\/*\u00a0This\u00a0also\u00a0works\u00a0in\u00a0PHP\u00a05.2.2\u00a0(PCRE\u00a07.0)\u00a0and\u00a0later,\u00a0however\u00a0\n\u00a0*\u00a0the\u00a0above\u00a0form\u00a0is\u00a0recommended\u00a0for\u00a0backwards\u00a0compatibility\u00a0*\/\n\/\/\u00a0preg_match_all('\/(?<name>\\w+):\u00a0(?<digit>\\d+)\/',\u00a0$str,\u00a0$matches);\n\nprint_r($matches);\n\n?>"}]},"preg_quote":{"name":"preg_quote","parameters":[{"type":"string","name":"$str","description":"The input string."},{"type":"string","name":"$delimiter","default_value":"NULL","description":"If the optional delimiter is specified, it will also be escaped.  This is useful for escaping the delimiter that is required by the PCRE functions. The \/ is the most commonly used delimiter."}],"return":{"type":"string","values":[]},"short":"Quote regular expression characters","examples":[{"title":"Example #1 preg_quote() example","content":"<?php\n$keywords\u00a0=\u00a0'$40\u00a0for\u00a0a\u00a0g3\/400';\n$keywords\u00a0=\u00a0preg_quote($keywords,\u00a0'\/');\necho\u00a0$keywords;\u00a0\/\/\u00a0returns\u00a0\\$40\u00a0for\u00a0a\u00a0g3\\\/400\n?>"},{"title":"Example #2 Italicizing a word within some text","content":"<?php\n\/\/\u00a0In\u00a0this\u00a0example,\u00a0preg_quote($word)\u00a0is\u00a0used\u00a0to\u00a0keep\u00a0the\n\/\/\u00a0asterisks\u00a0from\u00a0having\u00a0special\u00a0meaning\u00a0to\u00a0the\u00a0regular\n\/\/\u00a0expression.\n\n$textbody\u00a0=\u00a0\"This\u00a0book\u00a0is\u00a0*very*\u00a0difficult\u00a0to\u00a0find.\";\n$word\u00a0=\u00a0\"*very*\";\n$textbody\u00a0=\u00a0preg_replace\u00a0(\"\/\"\u00a0.\u00a0preg_quote($word,\u00a0'\/')\u00a0.\u00a0\"\/\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"<i>\"\u00a0.\u00a0$word\u00a0.\u00a0\"<\/i>\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$textbody);\n?>"}]},"preg_replace":{"name":"preg_replace","parameters":[{"type":"mixed","name":"$pattern","description":"The pattern to search for. It can be either a string or an array with strings.\n\nSeveral PCRE modifiers are also available."},{"type":"mixed","name":"$replacement","description":"The string or an array with strings to replace. If this parameter is a string and the pattern parameter is an array, all patterns will be replaced by that string. If both pattern and replacement parameters are arrays, each pattern will be replaced by the replacement counterpart. If there are fewer elements in the replacement array than in the pattern array, any extra patterns will be replaced by an empty string.\n\nreplacement may contain references of the form \\\\n or $n, with the latter form being the preferred one. Every such reference will be replaced by the text captured by the n'th parenthesized pattern. n can be from 0 to 99, and \\\\0 or $0 refers to the text matched by the whole pattern. Opening parentheses are counted from left to right (starting from 1) to obtain the number of the capturing subpattern. To use backslash in replacement, it must be doubled (\"\\\\\\\\\" PHP string).\n\nWhen working with a replacement pattern where a backreference is immediately followed by another number (i.e.: placing a literal number immediately after a matched pattern), you cannot use the familiar \\\\1 notation for your backreference. \\\\11, for example, would confuse preg_replace() since it does not know whether you want the \\\\1 backreference followed by a literal 1, or the \\\\11 backreference followed by nothing.  In this case the solution is to use ${1}1.  This creates an isolated $1 backreference, leaving the 1 as a literal.\n\nWhen using the deprecated e modifier, this function escapes some characters (namely ', \", \\ and NULL) in the strings that replace the backreferences. This is done to ensure that no syntax errors arise from backreference usage with either single or double quotes (e.g. 'strlen(\\'$1\\')+strlen(\"$2\")'). Make sure you are aware of PHP's string syntax to know exactly how the interpreted string will look."},{"type":"mixed","name":"$subject","description":"The string or an array with strings to search and replace.\n\nIf subject is an array, then the search and replace is performed on every entry of subject, and the return value is an array as well."},{"type":"int","name":"$limit","default_value":"-1","description":"The maximum possible replacements for each pattern in each subject string. Defaults to -1 (no limit)."}],"return":{"type":"mixed","values":["NULL"]},"short":"Perform a regular expression search and replace","examples":[{"title":"Example #1 Using backreferences followed by numeric literals","content":"<?php\n$string\u00a0=\u00a0'April\u00a015,\u00a02003';\n$pattern\u00a0=\u00a0'\/(\\w+)\u00a0(\\d+),\u00a0(\\d+)\/i';\n$replacement\u00a0=\u00a0'${1}1,$3';\necho\u00a0preg_replace($pattern,\u00a0$replacement,\u00a0$string);\n?>"},{"title":"Example #2 Using indexed arrays with preg_replace()","content":"<?php\n$string\u00a0=\u00a0'The\u00a0quick\u00a0brown\u00a0fox\u00a0jumps\u00a0over\u00a0the\u00a0lazy\u00a0dog.';\n$patterns\u00a0=\u00a0array();\n$patterns[0]\u00a0=\u00a0'\/quick\/';\n$patterns[1]\u00a0=\u00a0'\/brown\/';\n$patterns[2]\u00a0=\u00a0'\/fox\/';\n$replacements\u00a0=\u00a0array();\n$replacements[2]\u00a0=\u00a0'bear';\n$replacements[1]\u00a0=\u00a0'black';\n$replacements[0]\u00a0=\u00a0'slow';\necho\u00a0preg_replace($patterns,\u00a0$replacements,\u00a0$string);\n?>"},{"title":"Example #3 Replacing several values","content":"<?php\n$patterns\u00a0=\u00a0array\u00a0('\/(19|20)(\\d{2})-(\\d{1,2})-(\\d{1,2})\/',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'\/^\\s*{(\\w+)}\\s*=\/');\n$replace\u00a0=\u00a0array\u00a0('\\3\/\\4\/\\1\\2',\u00a0'$\\1\u00a0=');\necho\u00a0preg_replace($patterns,\u00a0$replace,\u00a0'{startDate}\u00a0=\u00a01999-5-27');\n?>"},{"title":"Example #4 Strip whitespace","content":"This example strips excess whitespace from a string."},{"title":"Example #5 Using the count parameter","content":"<?php\n$count\u00a0=\u00a00;\n\necho\u00a0preg_replace(array('\/\\d\/',\u00a0'\/\\s\/'),\u00a0'*',\u00a0'xp\u00a04\u00a0to',\u00a0-1\u00a0,\u00a0$count);\necho\u00a0$count;\u00a0\/\/3\n?>"}]},"preg_replace_callback":{"name":"preg_replace_callback","parameters":[{"type":"mixed","name":"$pattern","description":"The pattern to search for. It can be either a string or an array with strings."},{"type":"callable","name":"$callback","description":"A callback that will be called and passed an array of matched elements in the subject string. The callback should return the replacement string. This is the callback signature:\n\n\n\nstring handler ( array $matches )\n\nYou'll often need the callback function for a preg_replace_callback() in just one place. In this case you can use an anonymous function to declare the callback within the call to preg_replace_callback(). By doing it this way you have all information for the call in one place and do not clutter the function namespace with a callback function's name not used anywhere else.\n\n\n\nExample #1 preg_replace_callback() and anonymous function\n\n <?php \/*\u00a0a\u00a0unix-style\u00a0command\u00a0line\u00a0filter\u00a0to\u00a0convert\u00a0uppercase \u00a0*\u00a0letters\u00a0at\u00a0the\u00a0beginning\u00a0of\u00a0paragraphs\u00a0to\u00a0lowercase\u00a0*\/ $fp\u00a0=\u00a0fopen(\"php:\/\/stdin\",\u00a0\"r\")\u00a0or\u00a0die(\"can't\u00a0read\u00a0stdin\"); while\u00a0(!feof($fp))\u00a0{ \u00a0\u00a0\u00a0\u00a0$line\u00a0=\u00a0fgets($fp); \u00a0\u00a0\u00a0\u00a0$line\u00a0=\u00a0preg_replace_callback( \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'|<p>\\s*\\w|', \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0function\u00a0($matches)\u00a0{ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0strtolower($matches[0]); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$line \u00a0\u00a0\u00a0\u00a0); \u00a0\u00a0\u00a0\u00a0echo\u00a0$line; } fclose($fp); ?>"},{"type":"mixed","name":"$subject","description":"The string or an array with strings to search and replace."},{"type":"int","name":"$limit","default_value":"-1","description":"The maximum possible replacements for each pattern in each subject string. Defaults to -1 (no limit)."}],"return":{"type":"mixed","values":["NULL"]},"short":"Perform a regular expression search and replace using a callback","examples":[{"title":"Example #2 preg_replace_callback() example","content":"<?php\n\/\/\u00a0this\u00a0text\u00a0was\u00a0used\u00a0in\u00a02002\n\/\/\u00a0we\u00a0want\u00a0to\u00a0get\u00a0this\u00a0up\u00a0to\u00a0date\u00a0for\u00a02003\n$text\u00a0=\u00a0\"April\u00a0fools\u00a0day\u00a0is\u00a004\/01\/2002\\n\";\n$text.=\u00a0\"Last\u00a0christmas\u00a0was\u00a012\/24\/2001\\n\";\n\/\/\u00a0the\u00a0callback\u00a0function\nfunction\u00a0next_year($matches)\n{\n\u00a0\u00a0\/\/\u00a0as\u00a0usual:\u00a0$matches[0]\u00a0is\u00a0the\u00a0complete\u00a0match\n\u00a0\u00a0\/\/\u00a0$matches[1]\u00a0the\u00a0match\u00a0for\u00a0the\u00a0first\u00a0subpattern\n\u00a0\u00a0\/\/\u00a0enclosed\u00a0in\u00a0'(...)'\u00a0and\u00a0so\u00a0on\n\u00a0\u00a0return\u00a0$matches[1].($matches[2]+1);\n}\necho\u00a0preg_replace_callback(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"|(\\d{2}\/\\d{2}\/)(\\d{4})|\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"next_year\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$text);\n\n?>"},{"title":"Example #3 preg_replace_callback() using recursive structure\n     to handle encapsulated BB code","content":"<?php\n$input\u00a0=\u00a0\"plain\u00a0[indent]\u00a0deep\u00a0[indent]\u00a0deeper\u00a0[\/indent]\u00a0deep\u00a0[\/indent]\u00a0plain\";\n\nfunction\u00a0parseTagsRecursive($input)\n{\n\n\u00a0\u00a0\u00a0\u00a0$regex\u00a0=\u00a0'#\\[indent]((?:[^[]|\\[(?!\/?indent])|(?R))+)\\[\/indent]#';\n\n\u00a0\u00a0\u00a0\u00a0if\u00a0(is_array($input))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$input\u00a0=\u00a0'<div\u00a0style=\"margin-left:\u00a010px\">'.$input[1].'<\/div>';\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0return\u00a0preg_replace_callback($regex,\u00a0'parseTagsRecursive',\u00a0$input);\n}\n\n$output\u00a0=\u00a0parseTagsRecursive($input);\n\necho\u00a0$output;\n?>"}]},"preg_replace_callback_array":{"name":"preg_replace_callback_array","parameters":[{"type":"array","name":"$patterns_and_callbacks","description":"An associative array mapping patterns (keys) to callbacks (values)."},{"type":"mixed","name":"$subject","description":"The string or an array with strings to search and replace."},{"type":"int","name":"$limit","default_value":"-1","description":"The maximum possible replacements for each pattern in each subject string. Defaults to -1 (no limit)."}],"return":{"type":"mixed","values":["NULL"]},"short":"Perform a regular expression search and replace using callbacks","examples":[{"title":"Example #1 preg_replace_callback_array() example","content":"<?php\n$subject\u00a0=\u00a0'Aaaaaa\u00a0Bbb';\n\npreg_replace_callback_array(\n\u00a0\u00a0\u00a0\u00a0[\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'~[a]+~i'\u00a0=>\u00a0function\u00a0($match)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0strlen($match[0]),\u00a0'\u00a0matches\u00a0for\u00a0\"a\"\u00a0found',\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'~[b]+~i'\u00a0=>\u00a0function\u00a0($match)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0strlen($match[0]),\u00a0'\u00a0matches\u00a0for\u00a0\"b\"\u00a0found',\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0],\n\u00a0\u00a0\u00a0\u00a0$subject\n);\n?>"}]},"preg_split":{"name":"preg_split","parameters":[{"type":"string","name":"$pattern","description":"The pattern to search for, as a string."},{"type":"string","name":"$subject","description":"The input string."},{"type":"int","name":"$limit","default_value":"-1","description":"If specified, then only substrings up to limit are returned with the rest of the string being placed in the last substring.  A limit of -1, 0 or NULL means \"no limit\" and, as is standard across PHP, you can use NULL to skip to the flags parameter."},{"type":"int","name":"$flags","default_value":"0","description":"flags can be any combination of the following flags (combined with the | bitwise operator):\n\nPREG_SPLIT_NO_EMPTY\n\n\n\n If this flag is set, only non-empty pieces will be returned by preg_split().\n\n\n\n\n\n PREG_SPLIT_DELIM_CAPTURE\n\n\n\n If this flag is set, parenthesized expression in the delimiter pattern will be captured and returned as well.\n\n\n\n\n\n PREG_SPLIT_OFFSET_CAPTURE\n\n\n\n If this flag is set, for every occurring match the appendant string offset will also be returned. Note that this changes the return value in an array where every element is an array consisting of the matched string at offset 0 and its string offset into subject at offset 1."}],"return":{"type":"array","values":["FALSE"]},"short":"Split string by a regular expression","examples":[{"title":"Example #1 preg_split() example : Get the parts of a search string","content":"<?php\n\/\/\u00a0split\u00a0the\u00a0phrase\u00a0by\u00a0any\u00a0number\u00a0of\u00a0commas\u00a0or\u00a0space\u00a0characters,\n\/\/\u00a0which\u00a0include\u00a0\"\u00a0\",\u00a0\\r,\u00a0\\t,\u00a0\\n\u00a0and\u00a0\\f\n$keywords\u00a0=\u00a0preg_split(\"\/[\\s,]+\/\",\u00a0\"hypertext\u00a0language,\u00a0programming\");\nprint_r($keywords);\n?>"},{"title":"Example #2 Splitting a string into component characters","content":"<?php\n$str\u00a0=\u00a0'string';\n$chars\u00a0=\u00a0preg_split('\/\/',\u00a0$str,\u00a0-1,\u00a0PREG_SPLIT_NO_EMPTY);\nprint_r($chars);\n?>"},{"title":"Example #3 Splitting a string into matches and their offsets","content":"<?php\n$str\u00a0=\u00a0'hypertext\u00a0language\u00a0programming';\n$chars\u00a0=\u00a0preg_split('\/\u00a0\/',\u00a0$str,\u00a0-1,\u00a0PREG_SPLIT_OFFSET_CAPTURE);\nprint_r($chars);\n?>"}]},"prev":{"name":"prev","parameters":[],"return":{"type":"mixed","values":["FALSE"]},"short":"Rewind the internal array pointer","examples":[{"title":"Example #1 Example use of prev() and friends","content":"<?php\n$transport\u00a0=\u00a0array('foot',\u00a0'bike',\u00a0'car',\u00a0'plane');\n$mode\u00a0=\u00a0current($transport);\u00a0\/\/\u00a0$mode\u00a0=\u00a0'foot';\n$mode\u00a0=\u00a0next($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';\n$mode\u00a0=\u00a0next($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'car';\n$mode\u00a0=\u00a0prev($transport);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'bike';\n$mode\u00a0=\u00a0end($transport);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$mode\u00a0=\u00a0'plane';\n?>"}]},"print_r":{"name":"print_r","parameters":[{"type":"mixed","name":"$expression","description":"The expression to be printed."},{"type":"bool","name":"$return","default_value":"FALSE","description":"If you would like to capture the output of print_r(), use the return parameter.  When this parameter is set to TRUE, print_r() will return the information rather than print it."}],"return":{"type":"mixed","values":["TRUE"]},"short":"\n   Prints human-readable information about a variable\n  ","examples":[{"title":"Example #1 print_r() example","content":"<pre>\n<?php\n$a\u00a0=\u00a0array\u00a0('a'\u00a0=>\u00a0'apple',\u00a0'b'\u00a0=>\u00a0'banana',\u00a0'c'\u00a0=>\u00a0array\u00a0('x',\u00a0'y',\u00a0'z'));\nprint_r\u00a0($a);\n?>\n<\/pre>"},{"title":"Example #2 return parameter example","content":"<?php\n$b\u00a0=\u00a0array\u00a0('m'\u00a0=>\u00a0'monkey',\u00a0'foo'\u00a0=>\u00a0'bar',\u00a0'x'\u00a0=>\u00a0array\u00a0('x',\u00a0'y',\u00a0'z'));\n$results\u00a0=\u00a0print_r($b,\u00a0true);\u00a0\/\/\u00a0$results\u00a0now\u00a0contains\u00a0output\u00a0from\u00a0print_r\n?>"}]},"printf":{"name":"printf","parameters":[{"type":"string","name":"$format","description":"See sprintf() for a description of format."},{"type":"mixed","name":"$args","description":""},{"type":"mixed","name":"$...","description":""}],"return":{"type":"int","values":[]},"short":"Output a formatted string","examples":[]},"proc_close":{"name":"proc_close","parameters":[{"type":"resource","name":"$process","description":"The proc_open() resource that will be closed."}],"return":{"type":"int","values":[]},"short":"Close a process opened by proc_open() and return the exit code of that process","examples":[]},"proc_get_status":{"name":"proc_get_status","parameters":[{"type":"resource","name":"$process","description":"The proc_open() resource that will be evaluated."}],"return":{"type":"array","values":["FALSE"]},"short":"Get information about a process opened by proc_open()","examples":[]},"proc_nice":{"name":"proc_nice","parameters":[{"type":"int","name":"$increment","description":"The new priority value, the value of this may differ on platforms.\n\nOn Unix, a low value, such as -20 means high priority wheras a positive value have a lower priority.\n\nFor Windows the increment parameter have the following meanings:\n\nPriority class Possible values High priority\n increment < -9\n Above normal priority\n increment < -4\n Normal priority\n increment < 5 & increment > -5\n Below normal priority\n increment > 5\n Idle priority\n increment > 9"}],"return":{"type":"bool","values":["TRUE","FALSE","E_WARNING"]},"short":"Change the priority of the current process","examples":[{"title":"Example #1 Using proc_nice() to set the process priority to high","content":"<?php\n\/\/\u00a0Highest\u00a0priority\nproc_nice(-20);\n?>"}]},"proc_open":{"name":"proc_open","parameters":[{"type":"string","name":"$cmd","description":"The command to execute"},{"type":"array","name":"$descriptorspec","description":"An indexed array where the key represents the descriptor number and the value represents how PHP will pass that descriptor to the child process. 0 is stdin, 1 is stdout, while 2 is stderr.\n\nEach element can be:\n\nAn array describing the pipe to pass to the process. The first element is the descriptor type and the second element is an option for the given type. Valid types are pipe (the second element is either r to pass the read end of the pipe to the process, or w to pass the write end) and file (the second element is a filename).\n\n A stream resource representing a real file descriptor (e.g. opened file, a socket, STDIN).\n\nThe file descriptor numbers are not limited to 0, 1 and 2 - you may specify any valid file descriptor number and it will be passed to the child process. This allows your script to interoperate with other scripts that run as \"co-processes\". In particular, this is useful for passing passphrases to programs like PGP, GPG and openssl in a more secure manner. It is also useful for reading status information provided by those programs on auxiliary file descriptors."},{"type":"string","name":"$cwd","description":"The initial working dir for the command. This must be an absolute directory path, or NULL if you want to use the default value (the working dir of the current PHP process)"},{"type":"array","name":"$env","description":"An array with the environment variables for the command that will be run, or NULL to use the same environment as the current PHP process"},{"type":"array","name":"$other_options","description":"Allows you to specify additional options. Currently supported options include:\n\nsuppress_errors (windows only): suppresses errors generated by this function when it's set to TRUE\n\n bypass_shell (windows only): bypass cmd.exe shell when set to TRUE"}],"return":{"type":"resource","values":["FALSE"]},"short":"\n     Execute a command and open file pointers for input\/output\n    ","examples":[{"title":"Example #1 A proc_open() example","content":"<?php\n$descriptorspec\u00a0=\u00a0array(\n\u00a0\u00a0\u00a00\u00a0=>\u00a0array(\"pipe\",\u00a0\"r\"),\u00a0\u00a0\/\/\u00a0stdin\u00a0is\u00a0a\u00a0pipe\u00a0that\u00a0the\u00a0child\u00a0will\u00a0read\u00a0from\n\u00a0\u00a0\u00a01\u00a0=>\u00a0array(\"pipe\",\u00a0\"w\"),\u00a0\u00a0\/\/\u00a0stdout\u00a0is\u00a0a\u00a0pipe\u00a0that\u00a0the\u00a0child\u00a0will\u00a0write\u00a0to\n\u00a0\u00a0\u00a02\u00a0=>\u00a0array(\"file\",\u00a0\"\/tmp\/error-output.txt\",\u00a0\"a\")\u00a0\/\/\u00a0stderr\u00a0is\u00a0a\u00a0file\u00a0to\u00a0write\u00a0to\n);\n\n$cwd\u00a0=\u00a0'\/tmp';\n$env\u00a0=\u00a0array('some_option'\u00a0=>\u00a0'aeiou');\n\n$process\u00a0=\u00a0proc_open('php',\u00a0$descriptorspec,\u00a0$pipes,\u00a0$cwd,\u00a0$env);\n\nif\u00a0(is_resource($process))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0$pipes\u00a0now\u00a0looks\u00a0like\u00a0this:\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a00\u00a0=>\u00a0writeable\u00a0handle\u00a0connected\u00a0to\u00a0child\u00a0stdin\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a01\u00a0=>\u00a0readable\u00a0handle\u00a0connected\u00a0to\u00a0child\u00a0stdout\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Any\u00a0error\u00a0output\u00a0will\u00a0be\u00a0appended\u00a0to\u00a0\/tmp\/error-output.txt\n\n\u00a0\u00a0\u00a0\u00a0fwrite($pipes[0],\u00a0'<?php\u00a0print_r($_ENV);\u00a0?>');\n\u00a0\u00a0\u00a0\u00a0fclose($pipes[0]);\n\n\u00a0\u00a0\u00a0\u00a0echo\u00a0stream_get_contents($pipes[1]);\n\u00a0\u00a0\u00a0\u00a0fclose($pipes[1]);\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0It\u00a0is\u00a0important\u00a0that\u00a0you\u00a0close\u00a0any\u00a0pipes\u00a0before\u00a0calling\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0proc_close\u00a0in\u00a0order\u00a0to\u00a0avoid\u00a0a\u00a0deadlock\n\u00a0\u00a0\u00a0\u00a0$return_value\u00a0=\u00a0proc_close($process);\n\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"command\u00a0returned\u00a0$return_value\\n\";\n}\n?>"}]},"proc_terminate":{"name":"proc_terminate","parameters":[{"type":"resource","name":"$process","description":"The proc_open() resource that will be closed."},{"type":"int","name":"$signal","default_value":"15","description":"This optional parameter is only useful on POSIX operating systems; you may specify a signal to send to the process using the kill(2) system call.  The default is SIGTERM."}],"return":{"type":"bool","values":[]},"short":"Kills a process opened by proc_open","examples":[]},"property_exists":{"name":"property_exists","parameters":[{"type":"mixed","name":"$class","description":"The class name or an object of the class to test for"},{"type":"string","name":"$property","description":"The name of the property"}],"return":{"type":"bool","values":["TRUE","FALSE","NULL"]},"short":"\n   Checks if the object or class has a property\n  ","examples":[{"title":"Example #1 A property_exists() example","content":"<?php\n\nclass\u00a0myClass\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0$mine;\n\u00a0\u00a0\u00a0\u00a0private\u00a0$xpto;\n\u00a0\u00a0\u00a0\u00a0static\u00a0protected\u00a0$test;\n\n\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0test()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump(property_exists('myClass',\u00a0'xpto'));\u00a0\/\/true\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nvar_dump(property_exists('myClass',\u00a0'mine'));\u00a0\u00a0\u00a0\/\/true\nvar_dump(property_exists(new\u00a0myClass,\u00a0'mine'));\u00a0\/\/true\nvar_dump(property_exists('myClass',\u00a0'xpto'));\u00a0\u00a0\u00a0\/\/true,\u00a0as\u00a0of\u00a0PHP\u00a05.3.0\nvar_dump(property_exists('myClass',\u00a0'bar'));\u00a0\u00a0\u00a0\u00a0\/\/false\nvar_dump(property_exists('myClass',\u00a0'test'));\u00a0\u00a0\u00a0\/\/true,\u00a0as\u00a0of\u00a0PHP\u00a05.3.0\nmyClass::test();\n\n?>"}]},"putenv":{"name":"putenv","parameters":[{"type":"string","name":"$setting","description":"The setting, like \"FOO=BAR\""}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sets the value of an environment variable","examples":[{"title":"Example #1 Setting an environment variable","content":"<?php\nputenv(\"UNIQID=$uniqid\");\n?>"}]},"quoted_printable_decode":{"name":"quoted_printable_decode","parameters":[{"type":"string","name":"$str","description":"The input string."}],"return":{"type":"string","values":[]},"short":"Convert a quoted-printable string to an 8 bit string","examples":[]},"quoted_printable_encode":{"name":"quoted_printable_encode","parameters":[{"type":"string","name":"$str","description":"The input string."}],"return":{"type":"string","values":[]},"short":"Convert a 8 bit string to a quoted-printable string","examples":[]},"quotemeta":{"name":"quotemeta","parameters":[{"type":"string","name":"$str","description":"The input string."}],"return":{"type":"string","values":["FALSE"]},"short":"Quote meta characters","examples":[]},"rad2deg":{"name":"rad2deg","parameters":[{"type":"float","name":"$number","description":"A radian value"}],"return":{"type":"float","values":[]},"short":"\n   Converts the radian number to the equivalent number in degrees\n  ","examples":[{"title":"Example #1 rad2deg() example","content":"<?php\n\necho\u00a0rad2deg(M_PI_4);\u00a0\/\/\u00a045\n\n?>"}]},"rand":{"name":"rand","parameters":[{"type":"int","name":"$min","description":"The lowest value to return (default: 0)"},{"type":"int","name":"$max","description":"The highest value to return (default: getrandmax())"}],"return":{"type":"int","values":[]},"short":"Generate a random integer","examples":[{"title":"Example #1 rand() example","content":"<?php\necho\u00a0rand()\u00a0.\u00a0\"\\n\";\necho\u00a0rand()\u00a0.\u00a0\"\\n\";\n\necho\u00a0rand(5,\u00a015);\n?>"}]},"random_bytes":{"name":"random_bytes","parameters":[{"type":"int","name":"$length","description":"The length of the random string that should be returned in bytes."}],"return":{"type":"string","values":[]},"short":"Generates cryptographically secure pseudo-random bytes","examples":[{"title":"Example #1 random_bytes() example","content":"<?php\n$bytes\u00a0=\u00a0random_bytes(5);\nvar_dump(bin2hex($bytes));\n?>"}]},"random_int":{"name":"random_int","parameters":[{"type":"int","name":"$min","description":"The lowest value to be returned, which must be PHP_INT_MIN or higher."},{"type":"int","name":"$max","description":"The highest value to be returned, which must be less than or equal to PHP_INT_MAX."}],"return":{"type":"int","values":[]},"short":"Generates cryptographically secure pseudo-random integers","examples":[{"title":"Example #1 random_int() example","content":"<?php\nvar_dump(random_int(100,\u00a0999));\nvar_dump(random_int(-1000,\u00a00));\n?>"}]},"range":{"name":"range","parameters":[{"type":"mixed","name":"$start","description":"First value of the sequence."},{"type":"mixed","name":"$end","description":"The sequence is ended upon reaching the end value."},{"type":"number","name":"$step","default_value":"1","description":"If a step value is given, it will be used as the increment between elements in the sequence.  step should be given as a positive number.  If not specified, step will default to 1."}],"return":{"type":"array","values":[]},"short":"Create an array containing a range of elements","examples":[{"title":"Example #1 range() examples","content":"<?php\n\/\/\u00a0array(0,\u00a01,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06,\u00a07,\u00a08,\u00a09,\u00a010,\u00a011,\u00a012)\nforeach\u00a0(range(0,\u00a012)\u00a0as\u00a0$number)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$number;\n}\n\n\/\/\u00a0The\u00a0step\u00a0parameter\n\/\/\u00a0array(0,\u00a010,\u00a020,\u00a030,\u00a040,\u00a050,\u00a060,\u00a070,\u00a080,\u00a090,\u00a0100)\nforeach\u00a0(range(0,\u00a0100,\u00a010)\u00a0as\u00a0$number)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$number;\n}\n\n\/\/\u00a0Usage\u00a0of\u00a0character\u00a0sequences\n\/\/\u00a0array('a',\u00a0'b',\u00a0'c',\u00a0'd',\u00a0'e',\u00a0'f',\u00a0'g',\u00a0'h',\u00a0'i');\nforeach\u00a0(range('a',\u00a0'i')\u00a0as\u00a0$letter)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$letter;\n}\n\/\/\u00a0array('c',\u00a0'b',\u00a0'a');\nforeach\u00a0(range('c',\u00a0'a')\u00a0as\u00a0$letter)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$letter;\n}\n?>"}]},"rawurldecode":{"name":"rawurldecode","parameters":[{"type":"string","name":"$str","description":"The URL to be decoded."}],"return":{"type":"string","values":[]},"short":"Decode URL-encoded strings","examples":[{"title":"Example #1 rawurldecode() example","content":"<?php\n\necho\u00a0rawurldecode('foo%20bar%40baz');\u00a0\/\/\u00a0foo\u00a0bar@baz\n\n?>"}]},"rawurlencode":{"name":"rawurlencode","parameters":[{"type":"string","name":"$str","description":"The URL to be encoded."}],"return":{"type":"string","values":[]},"short":"URL-encode according to RFC 3986","examples":[{"title":"Example #1 including a password in an FTP URL","content":"<?php\necho\u00a0'<a\u00a0href=\"ftp:\/\/user:',\u00a0rawurlencode('foo\u00a0@+%\/'),\n\u00a0\u00a0\u00a0\u00a0\u00a0'@ftp.example.com\/x.txt\">';\n?>"},{"title":"Example #2 rawurlencode() example 2","content":"<?php\necho\u00a0'<a\u00a0href=\"http:\/\/example.com\/department_list_script\/',\n\u00a0\u00a0\u00a0\u00a0rawurlencode('sales\u00a0and\u00a0marketing\/Miami'),\u00a0'\">';\n?>"}]},"read_exif_data":{"name":"read_exif_data","parameters":[],"return":{"type":"","values":[]},"short":"Alias of exif_read_data()","examples":[]},"readdir":{"name":"readdir","parameters":[{"type":"resource","name":"$dir_handle","description":"The directory handle resource previously opened with opendir(). If the directory handle is not specified, the last link opened by opendir() is assumed."}],"return":{"type":"string","values":["FALSE"]},"short":"Read entry from directory handle","examples":[{"title":"Example #1 List all entries in a directory","content":"Please note the fashion in which readdir()'s\n     return value is checked in the examples below. We are explicitly\n     testing whether the return value is identical to (equal to and of\n     the same type as--see Comparison\n     Operators for more information) FALSE since otherwise,\n     any directory entry whose name evaluates to FALSE will stop the\n     loop (e.g. a directory named \"0\")."},{"title":"Example #2 \n     List all entries in the current directory and strip out .\n     and ..\n    ","content":"<?php\nif\u00a0($handle\u00a0=\u00a0opendir('.'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0while\u00a0(false\u00a0!==\u00a0($entry\u00a0=\u00a0readdir($handle)))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($entry\u00a0!=\u00a0\".\"\u00a0&&\u00a0$entry\u00a0!=\u00a0\"..\")\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$entry\\n\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0closedir($handle);\n}\n?>"}]},"readfile":{"name":"readfile","parameters":[{"type":"string","name":"$filename","description":"The filename being read."},{"type":"bool","name":"$use_include_path","default_value":"FALSE","description":"You can use the optional second parameter and set it to TRUE, if you want to search for the file in the include_path, too."},{"type":"resource","name":"$context","description":"A context stream resource."}],"return":{"type":"int","values":["FALSE"]},"short":"Outputs a file","examples":[{"title":"Example #1 Forcing a download using readfile()","content":"<?php\n$file\u00a0=\u00a0'monkey.gif';\n\nif\u00a0(file_exists($file))\u00a0{\n\u00a0\u00a0\u00a0\u00a0header('Content-Description:\u00a0File\u00a0Transfer');\n\u00a0\u00a0\u00a0\u00a0header('Content-Type:\u00a0application\/octet-stream');\n\u00a0\u00a0\u00a0\u00a0header('Content-Disposition:\u00a0attachment;\u00a0filename=\"'.basename($file).'\"');\n\u00a0\u00a0\u00a0\u00a0header('Expires:\u00a00');\n\u00a0\u00a0\u00a0\u00a0header('Cache-Control:\u00a0must-revalidate');\n\u00a0\u00a0\u00a0\u00a0header('Pragma:\u00a0public');\n\u00a0\u00a0\u00a0\u00a0header('Content-Length:\u00a0'\u00a0.\u00a0filesize($file));\n\u00a0\u00a0\u00a0\u00a0readfile($file);\n\u00a0\u00a0\u00a0\u00a0exit;\n}\n?>"}]},"readgzfile":{"name":"readgzfile","parameters":[{"type":"string","name":"$filename","description":"The file name. This file will be opened from the filesystem and its contents written to standard output."},{"type":"int","name":"$use_include_path","default_value":"0","description":"You can set this optional parameter to 1, if you want to search for the file in the include_path too."}],"return":{"type":"int","values":["FALSE"]},"short":"Output a gz-file","examples":[]},"readline":{"name":"readline","parameters":[{"type":"string","name":"$prompt","description":"You may specify a string with which to prompt the user."}],"return":{"type":"string","values":[]},"short":"Reads a line","examples":[{"title":"Example #1 readline() Example","content":"<?php\n\/\/get\u00a03\u00a0commands\u00a0from\u00a0user\nfor\u00a0($i=0;\u00a0$i\u00a0<\u00a03;\u00a0$i++)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$line\u00a0=\u00a0readline(\"Command:\u00a0\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readline_add_history($line);\n}\n\n\/\/dump\u00a0history\nprint_r(readline_list_history());\n\n\/\/dump\u00a0variables\nprint_r(readline_info());\n?>"}]},"readline_add_history":{"name":"readline_add_history","parameters":[{"type":"string","name":"$line","description":"The line to be added in the history."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Adds a line to the history","examples":[]},"readline_callback_handler_install":{"name":"readline_callback_handler_install","parameters":[{"type":"string","name":"$prompt","description":"The prompt message."},{"type":"callable","name":"$callback","description":"The callback function takes one parameter; the user input returned."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Initializes the readline callback interface and terminal, prints the prompt and returns immediately","examples":[]},"readline_callback_handler_remove":{"name":"readline_callback_handler_remove","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Removes a previously installed callback handler and restores terminal settings","examples":[]},"readline_callback_read_char":{"name":"readline_callback_read_char","parameters":[],"return":{"type":"void","values":[]},"short":"Reads a character and informs the readline callback interface when a line is received","examples":[]},"readline_clear_history":{"name":"readline_clear_history","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Clears the history","examples":[]},"readline_completion_function":{"name":"readline_completion_function","parameters":[{"type":"callable","name":"$function","description":"You must supply the name of an existing function which accepts a partial command line and returns an array of possible matches."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Registers a completion function","examples":[]},"readline_info":{"name":"readline_info","parameters":[{"type":"string","name":"$varname","description":"A variable name."},{"type":"string","name":"$newvalue","description":"If provided, this will be the new value of the setting."}],"return":{"type":"mixed","values":[]},"short":"Gets\/sets various internal readline variables","examples":[]},"readline_on_new_line":{"name":"readline_on_new_line","parameters":[],"return":{"type":"void","values":[]},"short":"Inform readline that the cursor has moved to a new line","examples":[]},"readline_read_history":{"name":"readline_read_history","parameters":[{"type":"string","name":"$filename","description":"Path to the filename containing the command history."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Reads the history","examples":[]},"readline_redisplay":{"name":"readline_redisplay","parameters":[],"return":{"type":"void","values":[]},"short":"Redraws the display","examples":[]},"readline_write_history":{"name":"readline_write_history","parameters":[{"type":"string","name":"$filename","description":"Path to the saved file."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Writes the history","examples":[]},"readlink":{"name":"readlink","parameters":[{"type":"string","name":"$path","description":"The symbolic link path."}],"return":{"type":"string","values":["FALSE"]},"short":"Returns the target of a symbolic link","examples":[{"title":"Example #1 readlink() example","content":"<?php\n\n\/\/\u00a0output\u00a0e.g.\u00a0\/boot\/vmlinux-2.4.20-xfs\necho\u00a0readlink('\/vmlinuz');\n\n?>"}]},"realpath":{"name":"realpath","parameters":[{"type":"string","name":"$path","description":"The path being checked.\n\nNote:\n Whilst a path must be supplied, the value can be blank or NULL In these cases, the value is interpreted as the current directory."}],"return":{"type":"string","values":["FALSE"]},"short":"Returns canonicalized absolute pathname","examples":[{"title":"Example #1 realpath() example","content":"<?php\nchdir('\/var\/www\/');\necho\u00a0realpath('.\/..\/..\/etc\/passwd')\u00a0.\u00a0PHP_EOL;\n\necho\u00a0realpath('\/tmp\/')\u00a0.\u00a0PHP_EOL;\n?>"},{"title":"Example #2 realpath() on Windows","content":"On windows realpath() will change unix style paths to\n     windows style."}]},"realpath_cache_get":{"name":"realpath_cache_get","parameters":[],"return":{"type":"array","values":[]},"short":"Get realpath cache entries","examples":[{"title":"Example #1 realpath_cache_get() example","content":"<?php\nvar_dump(realpath_cache_get());\n?>"}]},"realpath_cache_size":{"name":"realpath_cache_size","parameters":[],"return":{"type":"int","values":[]},"short":"Get realpath cache size","examples":[{"title":"Example #1 realpath_cache_size() example","content":"<?php\nvar_dump(realpath_cache_size());\n?>"}]},"register_shutdown_function":{"name":"register_shutdown_function","parameters":[{"type":"callable","name":"$callback","description":"The shutdown callback to register.\n\nThe shutdown callbacks are executed as the part of the request, so it's possible to send output from them and access output buffers."},{"type":"mixed","name":"$parameter","description":"It is possible to pass parameters to the shutdown function by passing additional parameters."},{"type":"mixed","name":"$...","description":""}],"return":{"type":"void","values":[]},"short":"Register a function for execution on shutdown","examples":[{"title":"Example #1 register_shutdown_function() example","content":"<?php\nfunction\u00a0shutdown()\n{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0This\u00a0is\u00a0our\u00a0shutdown\u00a0function,\u00a0in\u00a0\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0here\u00a0we\u00a0can\u00a0do\u00a0any\u00a0last\u00a0operations\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0before\u00a0the\u00a0script\u00a0is\u00a0complete.\n\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Script\u00a0executed\u00a0with\u00a0success',\u00a0PHP_EOL;\n}\n\nregister_shutdown_function('shutdown');\n?>"}]},"register_tick_function":{"name":"register_tick_function","parameters":[{"type":"callable","name":"$function","description":"The function name as a string, or an array consisting of an object and a method."},{"type":"mixed","name":"$arg","description":""},{"type":"mixed","name":"$...","description":""}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Register a function for execution on each tick","examples":[{"title":"Example #1 register_tick_function() example","content":"<?php\ndeclare(ticks=1);\n\n\/\/\u00a0using\u00a0a\u00a0function\u00a0as\u00a0the\u00a0callback\nregister_tick_function('my_function',\u00a0true);\n\n\/\/\u00a0using\u00a0an\u00a0object->method\n$object\u00a0=\u00a0new\u00a0my_class();\nregister_tick_function(array(&$object,\u00a0'my_method'),\u00a0true);\n?>"}]},"rename":{"name":"rename","parameters":[{"type":"string","name":"$oldname","description":"The old name.\n\nNote:\n The wrapper used in oldname must match the wrapper used in newname."},{"type":"string","name":"$newname","description":"The new name."},{"type":"resource","name":"$context","description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Renames a file or directory","examples":[{"title":"Example #1 Example with rename()","content":"<?php\nrename(\"\/tmp\/tmp_file.txt\",\u00a0\"\/home\/user\/login\/docs\/my_file.txt\");\n?>"}]},"reset":{"name":"reset","parameters":[],"return":{"type":"mixed","values":["FALSE"]},"short":"Set the internal pointer of an array to its first element","examples":[{"title":"Example #1 reset() example","content":"<?php\n\n$array\u00a0=\u00a0array('step\u00a0one',\u00a0'step\u00a0two',\u00a0'step\u00a0three',\u00a0'step\u00a0four');\n\n\/\/\u00a0by\u00a0default,\u00a0the\u00a0pointer\u00a0is\u00a0on\u00a0the\u00a0first\u00a0element\necho\u00a0current($array)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\/\/\u00a0\"step\u00a0one\"\n\n\/\/\u00a0skip\u00a0two\u00a0steps\nnext($array);\nnext($array);\necho\u00a0current($array)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\/\/\u00a0\"step\u00a0three\"\n\n\/\/\u00a0reset\u00a0pointer,\u00a0start\u00a0again\u00a0on\u00a0step\u00a0one\nreset($array);\necho\u00a0current($array)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\u00a0\/\/\u00a0\"step\u00a0one\"\n\n?>"}]},"restore_error_handler":{"name":"restore_error_handler","parameters":[],"return":{"type":"bool","values":["TRUE"]},"short":"Restores the previous error handler function","examples":[{"title":"Example #1 restore_error_handler() example","content":"Decide if unserialize() caused an error, then\n     restore the original error handler."}]},"restore_exception_handler":{"name":"restore_exception_handler","parameters":[],"return":{"type":"bool","values":["TRUE"]},"short":"\n   Restores the previously defined exception handler function\n  ","examples":[{"title":"Example #1 restore_exception_handler() example","content":"<?php\n\u00a0\u00a0\u00a0\u00a0function\u00a0exception_handler_1(Exception\u00a0$e)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'['\u00a0.\u00a0__FUNCTION__\u00a0.\u00a0']\u00a0'\u00a0.\u00a0$e->getMessage();\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0function\u00a0exception_handler_2(Exception\u00a0$e)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'['\u00a0.\u00a0__FUNCTION__\u00a0.\u00a0']\u00a0'\u00a0.\u00a0$e->getMessage();\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0set_exception_handler('exception_handler_1');\n\u00a0\u00a0\u00a0\u00a0set_exception_handler('exception_handler_2');\n\n\u00a0\u00a0\u00a0\u00a0restore_exception_handler();\n\n\u00a0\u00a0\u00a0\u00a0throw\u00a0new\u00a0Exception('This\u00a0triggers\u00a0the\u00a0first\u00a0exception\u00a0handler...');\n?>"}]},"restore_include_path":{"name":"restore_include_path","parameters":[],"return":{"type":"void","values":[]},"short":"Restores the value of the include_path configuration option","examples":[{"title":"Example #1 restore_include_path() example","content":"<?php\n\necho\u00a0get_include_path();\u00a0\u00a0\/\/\u00a0.:\/usr\/local\/lib\/php\n\nset_include_path('\/inc');\n\necho\u00a0get_include_path();\u00a0\u00a0\/\/\u00a0\/inc\n\nrestore_include_path();\n\n\/\/\u00a0Or\u00a0using\u00a0ini_restore()\nini_restore('include_path');\n\necho\u00a0get_include_path();\u00a0\u00a0\/\/\u00a0.:\/usr\/local\/lib\/php\n\n?>"}]},"rewind":{"name":"rewind","parameters":[{"type":"resource","name":"$handle","description":"The file pointer must be valid, and must point to a file successfully opened by fopen()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Rewind the position of a file pointer","examples":[{"title":"Example #1 rewind() overwriting example","content":"<?php\n$handle\u00a0=\u00a0fopen('output.txt',\u00a0'r+');\n\nfwrite($handle,\u00a0'Really\u00a0long\u00a0sentence.');\nrewind($handle);\nfwrite($handle,\u00a0'Foo');\nrewind($handle);\n\necho\u00a0fread($handle,\u00a0filesize('output.txt'));\n\nfclose($handle);\n?>"}]},"rewinddir":{"name":"rewinddir","parameters":[{"type":"resource","name":"$dir_handle","description":"The directory handle resource previously opened with opendir(). If the directory handle is not specified, the last link opened by opendir() is assumed."}],"return":{"type":"void","values":["NULL","FALSE"]},"short":"Rewind directory handle","examples":[]},"rmdir":{"name":"rmdir","parameters":[{"type":"string","name":"$dirname","description":"Path to the directory."},{"type":"resource","name":"$context","description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Removes directory","examples":[{"title":"Example #1 rmdir() example","content":"<?php\nif\u00a0(!is_dir('examples'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0mkdir('examples');\n}\n\nrmdir('examples');\n?>"}]},"round":{"name":"round","parameters":[{"type":"float","name":"$val","description":"The value to round"},{"type":"int","name":"$precision","default_value":"0","description":"The optional number of decimal digits to round to."},{"type":"int","name":"$mode","default_value":"PHP_ROUND_HALF_UP","description":"Use one of the following constants to specify the mode in which rounding occurs.\n\nConstant Description PHP_ROUND_HALF_UP\n Round val up to precision decimal places away from zero, when it is half way there. Making 1.5 into 2 and -1.5 into -2.\n PHP_ROUND_HALF_DOWN\n Round val down to precision decimal places towards zero, when it is half way there. Making 1.5 into 1 and -1.5 into -1.\n PHP_ROUND_HALF_EVEN\n Round val to precision decimal places towards the nearest even value.\n PHP_ROUND_HALF_ODD\n Round val to precision decimal places towards the nearest odd value."}],"return":{"type":"float","values":[]},"short":"Rounds a float","examples":[{"title":"Example #1 round() examples","content":"<?php\necho\u00a0round(3.4);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a03\necho\u00a0round(3.5);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a04\necho\u00a0round(3.6);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a04\necho\u00a0round(3.6,\u00a00);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a04\necho\u00a0round(1.95583,\u00a02);\u00a0\u00a0\/\/\u00a01.96\necho\u00a0round(1241757,\u00a0-3);\u00a0\/\/\u00a01242000\necho\u00a0round(5.045,\u00a02);\u00a0\u00a0\u00a0\u00a0\/\/\u00a05.05\necho\u00a0round(5.055,\u00a02);\u00a0\u00a0\u00a0\u00a0\/\/\u00a05.06\n?>"},{"title":"Example #2 mode examples","content":"<?php\necho\u00a0round(9.5,\u00a00,\u00a0PHP_ROUND_HALF_UP);\u00a0\u00a0\u00a0\/\/\u00a010\necho\u00a0round(9.5,\u00a00,\u00a0PHP_ROUND_HALF_DOWN);\u00a0\/\/\u00a09\necho\u00a0round(9.5,\u00a00,\u00a0PHP_ROUND_HALF_EVEN);\u00a0\/\/\u00a010\necho\u00a0round(9.5,\u00a00,\u00a0PHP_ROUND_HALF_ODD);\u00a0\u00a0\/\/\u00a09\n\necho\u00a0round(8.5,\u00a00,\u00a0PHP_ROUND_HALF_UP);\u00a0\u00a0\u00a0\/\/\u00a09\necho\u00a0round(8.5,\u00a00,\u00a0PHP_ROUND_HALF_DOWN);\u00a0\/\/\u00a08\necho\u00a0round(8.5,\u00a00,\u00a0PHP_ROUND_HALF_EVEN);\u00a0\/\/\u00a08\necho\u00a0round(8.5,\u00a00,\u00a0PHP_ROUND_HALF_ODD);\u00a0\u00a0\/\/\u00a09\n?>"},{"title":"Example #3 mode with precision examples","content":"<?php\n\/*\u00a0Using\u00a0PHP_ROUND_HALF_UP\u00a0with\u00a01\u00a0decimal\u00a0digit\u00a0precision\u00a0*\/\necho\u00a0round(\u00a01.55,\u00a01,\u00a0PHP_ROUND_HALF_UP);\u00a0\u00a0\u00a0\/\/\u00a0\u00a01.6\necho\u00a0round(\u00a01.54,\u00a01,\u00a0PHP_ROUND_HALF_UP);\u00a0\u00a0\u00a0\/\/\u00a0\u00a01.5\necho\u00a0round(-1.55,\u00a01,\u00a0PHP_ROUND_HALF_UP);\u00a0\u00a0\u00a0\/\/\u00a0-1.6\necho\u00a0round(-1.54,\u00a01,\u00a0PHP_ROUND_HALF_UP);\u00a0\u00a0\u00a0\/\/\u00a0-1.5\n\n\/*\u00a0Using\u00a0PHP_ROUND_HALF_DOWN\u00a0with\u00a01\u00a0decimal\u00a0digit\u00a0precision\u00a0*\/\necho\u00a0round(\u00a01.55,\u00a01,\u00a0PHP_ROUND_HALF_DOWN);\u00a0\/\/\u00a0\u00a01.5\necho\u00a0round(\u00a01.54,\u00a01,\u00a0PHP_ROUND_HALF_DOWN);\u00a0\/\/\u00a0\u00a01.5\necho\u00a0round(-1.55,\u00a01,\u00a0PHP_ROUND_HALF_DOWN);\u00a0\/\/\u00a0-1.5\necho\u00a0round(-1.54,\u00a01,\u00a0PHP_ROUND_HALF_DOWN);\u00a0\/\/\u00a0-1.5\n\n\/*\u00a0Using\u00a0PHP_ROUND_HALF_EVEN\u00a0with\u00a01\u00a0decimal\u00a0digit\u00a0precision\u00a0*\/\necho\u00a0round(\u00a01.55,\u00a01,\u00a0PHP_ROUND_HALF_EVEN);\u00a0\/\/\u00a0\u00a01.6\necho\u00a0round(\u00a01.54,\u00a01,\u00a0PHP_ROUND_HALF_EVEN);\u00a0\/\/\u00a0\u00a01.5\necho\u00a0round(-1.55,\u00a01,\u00a0PHP_ROUND_HALF_EVEN);\u00a0\/\/\u00a0-1.6\necho\u00a0round(-1.54,\u00a01,\u00a0PHP_ROUND_HALF_EVEN);\u00a0\/\/\u00a0-1.5\n\n\/*\u00a0Using\u00a0PHP_ROUND_HALF_ODD\u00a0with\u00a01\u00a0decimal\u00a0digit\u00a0precision\u00a0*\/\necho\u00a0round(\u00a01.55,\u00a01,\u00a0PHP_ROUND_HALF_ODD);\u00a0\u00a0\/\/\u00a0\u00a01.5\necho\u00a0round(\u00a01.54,\u00a01,\u00a0PHP_ROUND_HALF_ODD);\u00a0\u00a0\/\/\u00a0\u00a01.5\necho\u00a0round(-1.55,\u00a01,\u00a0PHP_ROUND_HALF_ODD);\u00a0\u00a0\/\/\u00a0-1.5\necho\u00a0round(-1.54,\u00a01,\u00a0PHP_ROUND_HALF_ODD);\u00a0\u00a0\/\/\u00a0-1.5\n?>"}]},"rsort":{"name":"rsort","parameters":[{"type":"int","name":"$sort_flags","default_value":"SORT_REGULAR","description":"You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array in reverse order","examples":[{"title":"Example #1 rsort() example","content":"<?php\n$fruits\u00a0=\u00a0array(\"lemon\",\u00a0\"orange\",\u00a0\"banana\",\u00a0\"apple\");\nrsort($fruits);\nforeach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key\u00a0=\u00a0$val\\n\";\n}\n?>"}]},"rtrim":{"name":"rtrim","parameters":[{"type":"string","name":"$str","description":"The input string."},{"type":"string","name":"$character_mask","description":"You can also specify the characters you want to strip, by means of the character_mask parameter. Simply list all characters that you want to be stripped. With .. you can specify a range of characters."}],"return":{"type":"string","values":[]},"short":"Strip whitespace (or other characters) from the end of a string","examples":[{"title":"Example #1 Usage example of rtrim()","content":"<?php\n\n$text\u00a0=\u00a0\"\\t\\tThese\u00a0are\u00a0a\u00a0few\u00a0words\u00a0:)\u00a0...\u00a0\u00a0\";\n$binary\u00a0=\u00a0\"\\x09Example\u00a0string\\x0A\";\n$hello\u00a0\u00a0=\u00a0\"Hello\u00a0World\";\nvar_dump($text,\u00a0$binary,\u00a0$hello);\n\nprint\u00a0\"\\n\";\n\n$trimmed\u00a0=\u00a0rtrim($text);\nvar_dump($trimmed);\n\n$trimmed\u00a0=\u00a0rtrim($text,\u00a0\"\u00a0\\t.\");\nvar_dump($trimmed);\n\n$trimmed\u00a0=\u00a0rtrim($hello,\u00a0\"Hdle\");\nvar_dump($trimmed);\n\n\/\/\u00a0trim\u00a0the\u00a0ASCII\u00a0control\u00a0characters\u00a0at\u00a0the\u00a0end\u00a0of\u00a0$binary\n\/\/\u00a0(from\u00a00\u00a0to\u00a031\u00a0inclusive)\n$clean\u00a0=\u00a0rtrim($binary,\u00a0\"\\x00..\\x1F\");\nvar_dump($clean);\n\n?>"}]},"scandir":{"name":"scandir","parameters":[{"type":"string","name":"$directory","description":"The directory that will be scanned."},{"type":"int","name":"$sorting_order","default_value":"SCANDIR_SORT_ASCENDING","description":"By default, the sorted order is alphabetical in ascending order.  If the optional sorting_order is set to SCANDIR_SORT_DESCENDING, then the sort order is alphabetical in descending order. If it is set to SCANDIR_SORT_NONE then the result is unsorted."},{"type":"resource","name":"$context","description":"For a description of the context parameter, refer to the streams section of the manual."}],"return":{"type":"array","values":{"0":"FALSE","2":"E_WARNING"}},"short":"List files and directories inside the specified path","examples":[{"title":"Example #1 A simple scandir() example","content":"<?php\n$dir\u00a0\u00a0\u00a0\u00a0=\u00a0'\/tmp';\n$files1\u00a0=\u00a0scandir($dir);\n$files2\u00a0=\u00a0scandir($dir,\u00a01);\n\nprint_r($files1);\nprint_r($files2);\n?>"}]},"sem_acquire":{"name":"sem_acquire","parameters":[{"type":"resource","name":"$sem_identifier","description":"sem_identifier is a semaphore resource, obtained from sem_get()."},{"type":"bool","name":"$nowait","default_value":"FALSE","description":"Specifies if the process shouldn't wait for the semaphore to be acquired. If set to true, the call will return false immediately if a semaphore cannot be immediately acquired."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Acquire a semaphore","examples":[]},"sem_get":{"name":"sem_get","parameters":[{"type":"int","name":"$key","description":""},{"type":"int","name":"$max_acquire","default_value":"1","description":"The number of processes that can acquire the semaphore simultaneously is set to max_acquire."},{"type":"int","name":"$perm","default_value":"0666","description":"The semaphore permissions. Actually this value is set only if the process finds it is the only process currently attached to the semaphore."},{"type":"int","name":"$auto_release","default_value":"1","description":"Specifies if the semaphore should be automatically released on request shutdown."}],"return":{"type":"resource","values":["FALSE"]},"short":"Get a semaphore id","examples":[]},"sem_release":{"name":"sem_release","parameters":[{"type":"resource","name":"$sem_identifier","description":"A Semaphore resource handle as returned by sem_get()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Release a semaphore","examples":[]},"sem_remove":{"name":"sem_remove","parameters":[{"type":"resource","name":"$sem_identifier","description":"A semaphore resource identifier as returned by sem_get()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Remove a semaphore","examples":[]},"serialize":{"name":"serialize","parameters":[{"type":"mixed","name":"$value","description":"The value to be serialized. serialize() handles all types, except the resource-type. You can even serialize() arrays that contain references to itself. Circular references inside the array\/object you are serializing will also be stored. Any other reference will be lost.\n\nWhen serializing objects, PHP will attempt to call the member function __sleep() prior to serialization. This is to allow the object to do any last minute clean-up, etc. prior to being serialized. Likewise, when the object is restored using unserialize() the __wakeup() member function is called.\n\nNote:\n Object's private members have the class name prepended to the member name; protected members have a '*' prepended to the member name. These prepended values have null bytes on either side."}],"return":{"type":"string","values":[]},"short":"Generates a storable representation of a value","examples":[{"title":"Example #1 serialize() example","content":"<?php\n\/\/\u00a0$session_data\u00a0contains\u00a0a\u00a0multi-dimensional\u00a0array\u00a0with\u00a0session\n\/\/\u00a0information\u00a0for\u00a0the\u00a0current\u00a0user.\u00a0\u00a0We\u00a0use\u00a0serialize()\u00a0to\u00a0store\n\/\/\u00a0it\u00a0in\u00a0a\u00a0database\u00a0at\u00a0the\u00a0end\u00a0of\u00a0the\u00a0request.\n\n$conn\u00a0=\u00a0odbc_connect(\"webdb\",\u00a0\"php\",\u00a0\"chicken\");\n$stmt\u00a0=\u00a0odbc_prepare($conn,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"UPDATE\u00a0sessions\u00a0SET\u00a0data\u00a0=\u00a0?\u00a0WHERE\u00a0id\u00a0=\u00a0?\");\n$sqldata\u00a0=\u00a0array\u00a0(serialize($session_data),\u00a0$_SERVER['PHP_AUTH_USER']);\nif\u00a0(!odbc_execute($stmt,\u00a0$sqldata))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$stmt\u00a0=\u00a0odbc_prepare($conn,\n\u00a0\u00a0\u00a0\u00a0\u00a0\"INSERT\u00a0INTO\u00a0sessions\u00a0(id,\u00a0data)\u00a0VALUES(?,\u00a0?)\");\n\u00a0\u00a0\u00a0\u00a0if\u00a0(!odbc_execute($stmt,\u00a0$sqldata))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/*\u00a0Something\u00a0went\u00a0wrong..\u00a0*\/\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"session_abort":{"name":"session_abort","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Discard session array changes and finish session","examples":[]},"session_cache_expire":{"name":"session_cache_expire","parameters":[{"type":"string","name":"$new_cache_expire","description":"If new_cache_expire is given, the current cache expire is replaced with new_cache_expire.\n\n\n\nNote:\n Setting new_cache_expire is of value only, if session.cache_limiter is set to a value different from nocache."}],"return":{"type":"int","values":[]},"short":"Return current cache expire","examples":[{"title":"Example #1 session_cache_expire() example","content":"<?php\n\n\/*\u00a0set\u00a0the\u00a0cache\u00a0limiter\u00a0to\u00a0'private'\u00a0*\/\n\nsession_cache_limiter('private');\n$cache_limiter\u00a0=\u00a0session_cache_limiter();\n\n\/*\u00a0set\u00a0the\u00a0cache\u00a0expire\u00a0to\u00a030\u00a0minutes\u00a0*\/\nsession_cache_expire(30);\n$cache_expire\u00a0=\u00a0session_cache_expire();\n\n\/*\u00a0start\u00a0the\u00a0session\u00a0*\/\n\nsession_start();\n\necho\u00a0\"The\u00a0cache\u00a0limiter\u00a0is\u00a0now\u00a0set\u00a0to\u00a0$cache_limiter<br\u00a0\/>\";\necho\u00a0\"The\u00a0cached\u00a0session\u00a0pages\u00a0expire\u00a0after\u00a0$cache_expire\u00a0minutes\";\n?>"}]},"session_cache_limiter":{"name":"session_cache_limiter","parameters":[{"type":"string","name":"$cache_limiter","description":"If cache_limiter is specified, the name of the current cache limiter is changed to the new value.\n\nPossible values\n Value Headers sent public\n\n Expires: (sometime in the future, according session.cache_expire) Cache-Control: public, max-age=(sometime in the future, according to session.cache_expire) Last-Modified: (the timestamp of when the session was last saved)\n\n\n\n private_no_expire\n\n Cache-Control: private, max-age=(session.cache_expire in the future), pre-check=(session.cache_expire in the future) Last-Modified: (the timestamp of when the session was last saved)\n\n\n\n private\n\n Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: private, max-age=(session.cache_expire in the future), pre-check=(session.cache_expire in the future) Last-Modified: (the timestamp of when the session was last saved)\n\n\n\n nocache\n\n Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache"}],"return":{"type":"string","values":[]},"short":"Get and\/or set the current cache limiter","examples":[{"title":"Example #1 session_cache_limiter() example","content":"<?php\n\n\/*\u00a0set\u00a0the\u00a0cache\u00a0limiter\u00a0to\u00a0'private'\u00a0*\/\n\nsession_cache_limiter('private');\n$cache_limiter\u00a0=\u00a0session_cache_limiter();\n\necho\u00a0\"The\u00a0cache\u00a0limiter\u00a0is\u00a0now\u00a0set\u00a0to\u00a0$cache_limiter<br\u00a0\/>\";\n?>"}]},"session_commit":{"name":"session_commit","parameters":[],"return":{"type":"","values":[]},"short":"Alias of session_write_close()","examples":[]},"session_create_id":{"name":"session_create_id","parameters":[{"type":"string","name":"$prefix","description":"If prefix is specified, new session id is prefixed by prefix. Not all characters are allowed within the session id.  Characters in the range a-z A-Z 0-9 , (comma) and - (minus) are allowed."}],"return":{"type":"string","values":[]},"short":"Create new session id","examples":[{"title":"Example #1 session_create_id() example with session_regenerate_id()","content":"<?php\n\/\/\u00a0My\u00a0session\u00a0start\u00a0function\u00a0support\u00a0timestamp\u00a0management\nfunction\u00a0my_session_start()\u00a0{\n\u00a0\u00a0\u00a0\u00a0session_start();\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Do\u00a0not\u00a0allow\u00a0to\u00a0use\u00a0too\u00a0old\u00a0session\u00a0ID\n\u00a0\u00a0\u00a0\u00a0if\u00a0(!empty($_SESSION['deleted_time'])\u00a0&&\u00a0$_SESSION['deleted_time']\u00a0<\u00a0time()\u00a0-\u00a0180)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session_destroy();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session_start();\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/\u00a0My\u00a0session\u00a0regenerate\u00a0id\u00a0function\nfunction\u00a0my_session_regenerate_id()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Call\u00a0session_create_id()\u00a0while\u00a0session\u00a0is\u00a0active\u00a0to\u00a0\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0make\u00a0sure\u00a0collision\u00a0free.\n\u00a0\u00a0\u00a0\u00a0if\u00a0(session_status()\u00a0!=\u00a0PHP_SESSION_ACTIVE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session_start();\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0WARNING:\u00a0Never\u00a0use\u00a0confidential\u00a0strings\u00a0for\u00a0prefix!\n\u00a0\u00a0\u00a0\u00a0$newid\u00a0=\u00a0session_create_id('myprefix-');\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Set\u00a0deleted\u00a0timestamp.\u00a0Session\u00a0data\u00a0must\u00a0not\u00a0be\u00a0deleted\u00a0immediately\u00a0for\u00a0reasons.\n\u00a0\u00a0\u00a0\u00a0$_SESSION['deleted_time']\u00a0=\u00a0time();\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Finish\u00a0session\n\u00a0\u00a0\u00a0\u00a0session_commit();\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Make\u00a0sure\u00a0to\u00a0accept\u00a0user\u00a0defined\u00a0session\u00a0ID\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0NOTE:\u00a0You\u00a0must\u00a0enable\u00a0use_strict_mode\u00a0for\u00a0normal\u00a0operations.\n\u00a0\u00a0\u00a0\u00a0ini_set('session.use_strict_mode',\u00a00);\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Set\u00a0new\u00a0custome\u00a0session\u00a0ID\n\u00a0\u00a0\u00a0\u00a0session_id($newid);\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Start\u00a0with\u00a0custome\u00a0session\u00a0ID\n\u00a0\u00a0\u00a0\u00a0session_start();\n}\n\n\/\/\u00a0Make\u00a0sure\u00a0use_strict_mode\u00a0is\u00a0enabled.\n\/\/\u00a0use_strict_mode\u00a0is\u00a0mandatory\u00a0for\u00a0security\u00a0reasons.\nini_set('session.use_strict_mode',\u00a01);\nmy_session_start();\n\n\/\/\u00a0Session\u00a0ID\u00a0must\u00a0be\u00a0regenerated\u00a0when\n\/\/\u00a0\u00a0-\u00a0User\u00a0logged\u00a0in\n\/\/\u00a0\u00a0-\u00a0User\u00a0logged\u00a0out\n\/\/\u00a0\u00a0-\u00a0Certain\u00a0period\u00a0has\u00a0passed\nmy_session_regenerate_id();\n\n\/\/\u00a0Write\u00a0useful\u00a0codes\n?>"}]},"session_decode":{"name":"session_decode","parameters":[{"type":"string","name":"$data","description":"The encoded data to be stored."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Decodes session data from a session encoded string","examples":[]},"session_destroy":{"name":"session_destroy","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Destroys all data registered to a session","examples":[{"title":"Example #1 Destroying a session with $_SESSION","content":"<?php\n\/\/\u00a0Initialize\u00a0the\u00a0session.\n\/\/\u00a0If\u00a0you\u00a0are\u00a0using\u00a0session_name(\"something\"),\u00a0don't\u00a0forget\u00a0it\u00a0now!\nsession_start();\n\n\/\/\u00a0Unset\u00a0all\u00a0of\u00a0the\u00a0session\u00a0variables.\n$_SESSION\u00a0=\u00a0array();\n\n\/\/\u00a0If\u00a0it's\u00a0desired\u00a0to\u00a0kill\u00a0the\u00a0session,\u00a0also\u00a0delete\u00a0the\u00a0session\u00a0cookie.\n\/\/\u00a0Note:\u00a0This\u00a0will\u00a0destroy\u00a0the\u00a0session,\u00a0and\u00a0not\u00a0just\u00a0the\u00a0session\u00a0data!\nif\u00a0(ini_get(\"session.use_cookies\"))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$params\u00a0=\u00a0session_get_cookie_params();\n\u00a0\u00a0\u00a0\u00a0setcookie(session_name(),\u00a0'',\u00a0time()\u00a0-\u00a042000,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$params[\"path\"],\u00a0$params[\"domain\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$params[\"secure\"],\u00a0$params[\"httponly\"]\n\u00a0\u00a0\u00a0\u00a0);\n}\n\n\/\/\u00a0Finally,\u00a0destroy\u00a0the\u00a0session.\nsession_destroy();\n?>"}]},"session_encode":{"name":"session_encode","parameters":[],"return":{"type":"string","values":[]},"short":"Encodes the current session data as a session encoded string","examples":[]},"session_gc":{"name":"session_gc","parameters":[],"return":{"type":"int","values":["FALSE"]},"short":"Perform session data garbage collection","examples":[{"title":"Example #1 session_gc() example for task managers like cron","content":"<?php\n\/\/\u00a0Note:\u00a0This\u00a0script\u00a0should\u00a0be\u00a0executed\u00a0by\u00a0the\u00a0same\u00a0user\u00a0of\u00a0web\u00a0server\u00a0process.\n\n\/\/\u00a0Need\u00a0active\u00a0session\u00a0to\u00a0initialize\u00a0session\u00a0data\u00a0storage\u00a0access.\nsession_start();\n\n\/\/\u00a0Executes\u00a0GC\u00a0immediately\nsession_gc();\n\n\/\/\u00a0Clean\u00a0up\u00a0session\u00a0ID\u00a0created\u00a0by\u00a0session_gc()\nsession_destroy();\n?>"},{"title":"Example #2 session_gc() example for user accessible script","content":"<?php\n\/\/\u00a0Note:\u00a0session_gc()\u00a0is\u00a0recommended\u00a0to\u00a0be\u00a0used\u00a0by\u00a0task\u00a0manager\u00a0script,\u00a0but\n\/\/\u00a0it\u00a0may\u00a0be\u00a0used\u00a0as\u00a0follows.\n\n\/\/\u00a0Used\u00a0for\u00a0last\u00a0GC\u00a0time\u00a0check\n$gc_time\u00a0=\u00a0'\/tmp\/php_session_last_gc';\n$gc_period\u00a0=\u00a01800;\n\nsession_start();\n\/\/\u00a0Execute\u00a0GC\u00a0only\u00a0when\u00a0GC\u00a0period\u00a0elapsed.\u00a0\n\/\/\u00a0i.e.\u00a0Calling\u00a0session_gc()\u00a0every\u00a0request\u00a0is\u00a0waste\u00a0of\u00a0resources.\u00a0\nif\u00a0(file_exists($gc_time))\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(filemtime($gc_time)\u00a0<\u00a0time()\u00a0-\u00a0$gc_period)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session_gc();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0touch($gc_time);\n\u00a0\u00a0\u00a0\u00a0}\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0touch($gc_time);\n}\n?>"}]},"session_get_cookie_params":{"name":"session_get_cookie_params","parameters":[],"return":{"type":"array","values":[]},"short":"Get the session cookie parameters","examples":[]},"session_id":{"name":"session_id","parameters":[{"type":"string","name":"$id","description":"If id is specified, it will replace the current session id. session_id() needs to be called before session_start() for that purpose. Depending on the session handler, not all characters are allowed within the session id. For example, the file session handler only allows characters in the range a-z A-Z 0-9 , (comma) and - (minus)!\n\nNote:\n When using session cookies, specifying an id for session_id() will always send a new cookie when session_start() is called, regardless if the current session id is identical to the one being set."}],"return":{"type":"string","values":[]},"short":"Get and\/or set the current session id","examples":[]},"session_module_name":{"name":"session_module_name","parameters":[{"type":"string","name":"$module","description":"If module is specified, that module will be used instead."}],"return":{"type":"string","values":[]},"short":"Get and\/or set the current session module","examples":[]},"session_name":{"name":"session_name","parameters":[{"type":"string","name":"$name","description":"The session name references the name of the session, which is used in cookies and URLs (e.g. PHPSESSID). It should contain only alphanumeric characters; it should be short and descriptive (i.e. for users with enabled cookie warnings). If name is specified, the name of the current session is changed to its value.\n\n\n\nWarning\n The session name can't consist of digits only, at least one letter must be present. Otherwise a new session id is generated every time."}],"return":{"type":"string","values":[]},"short":"Get and\/or set the current session name","examples":[{"title":"Example #1 session_name() example","content":"<?php\n\n\/*\u00a0set\u00a0the\u00a0session\u00a0name\u00a0to\u00a0WebsiteID\u00a0*\/\n\n$previous_name\u00a0=\u00a0session_name(\"WebsiteID\");\n\necho\u00a0\"The\u00a0previous\u00a0session\u00a0name\u00a0was\u00a0$previous_name<br\u00a0\/>\";\n?>"}]},"session_regenerate_id":{"name":"session_regenerate_id","parameters":[{"type":"bool","name":"$delete_old_session","default_value":"FALSE","description":"Whether to delete the old associated session file or not. You should not delete old session if you need to avoid races caused by deletion or detect\/avoid session hijack attacks."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Update the current session id with a newly generated one\n  ","examples":[{"title":"Example #1 A session_regenerate_id() example","content":"<?php\n\/\/\u00a0NOTE:\u00a0This\u00a0code\u00a0is\u00a0not\u00a0fully\u00a0working\u00a0code,\u00a0but\u00a0an\u00a0example!\n\nsession_start();\n\n\/\/\u00a0Check\u00a0destroyed\u00a0time-stamp\nif\u00a0(isset($_SESSION['destroyed'])\n\u00a0\u00a0\u00a0\u00a0&&\u00a0$_SESSION['destroyed']\u00a0<\u00a0time()\u00a0-\u00a0300)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Should\u00a0not\u00a0happen\u00a0usually.\u00a0This\u00a0could\u00a0be\u00a0attack\u00a0or\u00a0due\u00a0to\u00a0unstable\u00a0network.\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Remove\u00a0all\u00a0authentication\u00a0status\u00a0of\u00a0this\u00a0users\u00a0session.\n\u00a0\u00a0\u00a0\u00a0remove_all_authentication_flag_from_active_sessions($_SESSION['userid']);\n\u00a0\u00a0\u00a0\u00a0throw(new\u00a0DestroyedSessionAccessException);\n}\n\n$old_sessionid\u00a0=\u00a0session_id();\n\n\/\/\u00a0Set\u00a0destroyed\u00a0timestamp\n$_SESSION['destroyed']\u00a0=\u00a0time();\u00a0\/\/\u00a0Since\u00a0PHP\u00a07.0.0\u00a0and\u00a0up,\u00a0session_regenerate_id()\u00a0saves\u00a0old\u00a0session\u00a0data\n\n\/\/\u00a0Simply\u00a0calling\u00a0session_regenerate_id()\u00a0may\u00a0result\u00a0in\u00a0lost\u00a0session,\u00a0etc.\n\/\/\u00a0See\u00a0next\u00a0example.\nsession_regenerate_id();\n\n\/\/\u00a0New\u00a0session\u00a0does\u00a0not\u00a0need\u00a0destroyed\u00a0timestamp\nunset($_SESSION['destroyed']);\n\n$new_sessionid\u00a0=\u00a0session_id();\n\necho\u00a0\"Old\u00a0Session:\u00a0$old_sessionid<br\u00a0\/>\";\necho\u00a0\"New\u00a0Session:\u00a0$new_sessionid<br\u00a0\/>\";\n\nprint_r($_SESSION);\n?>"},{"title":"Example #2 Avoiding lost session by session_regenerate_id()","content":"<?php\n\/\/\u00a0NOTE:\u00a0This\u00a0code\u00a0is\u00a0not\u00a0fully\u00a0working\u00a0code,\u00a0but\u00a0an\u00a0example!\n\/\/\u00a0my_session_start()\u00a0and\u00a0my_session_regenerate_id()\u00a0avoid\u00a0lost\u00a0sessions\u00a0by\n\/\/\u00a0unstable\u00a0network.\u00a0In\u00a0addition,\u00a0this\u00a0code\u00a0may\u00a0prevent\u00a0exploiting\u00a0stolen\n\/\/\u00a0session\u00a0by\u00a0attackers.\n\nfunction\u00a0my_session_start()\u00a0{\n\u00a0\u00a0\u00a0\u00a0session_start();\n\u00a0\u00a0\u00a0\u00a0if\u00a0(isset($_SESSION['destroyed']))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($_SESSION['destroyed']\u00a0<\u00a0time()-300)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Should\u00a0not\u00a0happen\u00a0usually.\u00a0This\u00a0could\u00a0be\u00a0attack\u00a0or\u00a0due\u00a0to\u00a0unstable\u00a0network.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Remove\u00a0all\u00a0authentication\u00a0status\u00a0of\u00a0this\u00a0users\u00a0session.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remove_all_authentication_flag_from_active_sessions($_SESSION['userid']);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw(new\u00a0DestroyedSessionAccessException);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0(isset($_SESSION['new_session_id']))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Not\u00a0fully\u00a0expired\u00a0yet.\u00a0Could\u00a0be\u00a0lost\u00a0cookie\u00a0by\u00a0unstable\u00a0network.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Try\u00a0again\u00a0to\u00a0set\u00a0proper\u00a0session\u00a0ID\u00a0cookie.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0NOTE:\u00a0Do\u00a0not\u00a0try\u00a0to\u00a0set\u00a0session\u00a0ID\u00a0again\u00a0if\u00a0you\u00a0would\u00a0like\u00a0to\u00a0remove\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0authentication\u00a0flag.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session_commit();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session_id($_SESSION['new_session_id']);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0New\u00a0session\u00a0ID\u00a0should\u00a0exist\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0session_start();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0}\n}\n\nfunction\u00a0my_session_regenerate_id()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0New\u00a0session\u00a0ID\u00a0is\u00a0required\u00a0to\u00a0set\u00a0proper\u00a0session\u00a0ID\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0when\u00a0session\u00a0ID\u00a0is\u00a0not\u00a0set\u00a0due\u00a0to\u00a0unstable\u00a0network.\n\u00a0\u00a0\u00a0\u00a0$new_session_id\u00a0=\u00a0session_create_id();\n\u00a0\u00a0\u00a0\u00a0$_SESSION['new_session_id']\u00a0=\u00a0$new_session_id;\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Set\u00a0destroy\u00a0timestamp\n\u00a0\u00a0\u00a0\u00a0$_SESSION['destroyed']\u00a0=\u00a0time();\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Write\u00a0and\u00a0close\u00a0current\u00a0session;\n\u00a0\u00a0\u00a0\u00a0session_commit();\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Start\u00a0session\u00a0with\u00a0new\u00a0session\u00a0ID\n\u00a0\u00a0\u00a0\u00a0session_id($new_session_id);\n\u00a0\u00a0\u00a0\u00a0ini_set('session.use_strict_mode',\u00a00);\n\u00a0\u00a0\u00a0\u00a0session_start();\n\u00a0\u00a0\u00a0\u00a0ini_set('session.use_strict_mode',\u00a01);\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0New\u00a0session\u00a0does\u00a0not\u00a0need\u00a0them\n\u00a0\u00a0\u00a0\u00a0unset($_SESSION['destroyed']);\n\u00a0\u00a0\u00a0\u00a0unset($_SESSION['new_session_id']);\n}\n?>"}]},"session_register_shutdown":{"name":"session_register_shutdown","parameters":[],"return":{"type":"void","values":[]},"short":"Session shutdown function","examples":[]},"session_reset":{"name":"session_reset","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Re-initialize session array with original values","examples":[]},"session_save_path":{"name":"session_save_path","parameters":[{"type":"string","name":"$path","description":"Session data path. If specified, the path to which data is saved will be changed. session_save_path() needs to be called before session_start() for that purpose.\n\n\n\nNote:\n On some operating systems, you may want to specify a path on a filesystem that handles lots of small files efficiently. For example, on Linux, reiserfs may provide better performance than ext2fs."}],"return":{"type":"string","values":[]},"short":"Get and\/or set the current session save path","examples":[]},"session_set_cookie_params":{"name":"session_set_cookie_params","parameters":[{"type":"int","name":"$lifetime","description":"Lifetime of the session cookie, defined in seconds."},{"type":"string","name":"$path","description":"Path on the domain where the cookie will work. Use a single slash ('\/') for all paths on the domain."},{"type":"string","name":"$domain","description":"Cookie domain, for example 'www.php.net'. To make cookies visible on all subdomains then the domain must be prefixed with a dot like '.php.net'."},{"type":"bool","name":"$secure","default_value":"FALSE","description":"If TRUE cookie will only be sent over secure connections."},{"type":"bool","name":"$httponly","default_value":"FALSE","description":"If set to TRUE then PHP will attempt to send the httponly flag when setting the session cookie."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set the session cookie parameters","examples":[]},"session_set_save_handler":{"name":"session_set_save_handler","parameters":[{"type":"callable","name":"$open"},{"type":"callable","name":"$close"},{"type":"callable","name":"$read"},{"type":"callable","name":"$write"},{"type":"callable","name":"$destroy"},{"type":"callable","name":"$gc"},{"type":"callable","name":"$create_sid"},{"type":"callable","name":"$validate_sid"},{"type":"callable","name":"$update_timestamp"},{"type":"object","name":"$sessionhandler","description":"An instance of a class implementing SessionHandlerInterface, SessionIdInterface, and\/or SessionUpdateTimestampHandlerInterface, such as SessionHandler, to register as the session handler. Since PHP 5.4 only."},{"type":"bool","name":"$register_shutdown","default_value":"TRUE","description":"Register session_write_close() as a register_shutdown_function() function."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sets user-level session storage functions","examples":[{"title":"Example #1 \n     Custom session handler: see full code in SessionHandlerInterface synopsis.\n    ","content":"The following code is for PHP version 5.4.0 and above.  We just show the invocation here, the full example can be\n     seen in the SessionHandlerInterface synopsis linked above."},{"title":"Example #2 Custom session save handler using objects","content":"The following code is for PHP versions less than 5.4.0."}]},"session_start":{"name":"session_start","parameters":[{"type":"array","name":"$options","default_value":"array()","description":"If provided, this is an associative array of options that will override the currently set session configuration directives. The keys should not include the session. prefix.\n\nIn addition to the normal set of configuration directives, a read_and_close option may also be provided. If set to TRUE, this will result in the session being closed immediately after being read, thereby avoiding unnecessary locking if the session data won't be changed."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Start new or resume existing session","examples":[]},"session_status":{"name":"session_status","parameters":[],"return":{"type":"int","values":[]},"short":"Returns the current session status","examples":[]},"session_unset":{"name":"session_unset","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Free all session variables","examples":[]},"session_write_close":{"name":"session_write_close","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write session data and end session","examples":[]},"set_error_handler":{"name":"set_error_handler","parameters":[{"type":"callable","name":"$error_handler","description":"A callback with the following signature. NULL may be passed instead, to reset this handler to its default state. Instead of a function name, an array containing an object reference and a method name can also be supplied.\n\n\n\nbool handler ( int $errno , string $errstr [, string $errfile [, int $errline [, array $errcontext ]]] )\n\nerrno\n\n\n\n The first parameter, errno, contains the level of the error raised, as an integer.\n\n\n\n\n\n errstr\n\n\n\n The second parameter, errstr, contains the error message, as a string.\n\n\n\n\n\n errfile\n\n\n\n The third parameter is optional, errfile, which contains the filename that the error was raised in, as a string.\n\n\n\n\n\n errline\n\n\n\n The fourth parameter is optional, errline, which contains the line number the error was raised at, as an integer.\n\n\n\n\n\n errcontext\n\n\n\n The fifth parameter is optional, errcontext, which is an array that points to the active symbol table at the point the error occurred.  In other words, errcontext will contain an array of every variable that existed in the scope the error was triggered in. User error handler must not modify error context.\n Warning\n This parameter has been DEPRECATED as of PHP 7.2.0. Relying on it is highly discouraged.\n\nIf the function returns FALSE then the normal error handler continues."},{"type":"int","name":"$error_types","default_value":"E_ALL | E_STRICT","description":"Can be used to mask the triggering of the error_handler function just like the error_reporting ini setting controls which errors are shown. Without this mask set the error_handler will be called for every error regardless to the setting of the error_reporting setting."}],"return":{"type":"mixed","values":["NULL"]},"short":"Sets a user-defined error handler function","examples":[{"title":"Example #1 Error handling with set_error_handler() and trigger_error()","content":"The example below shows the handling of internal exceptions by\n     triggering errors and handling them with a user defined function:"}]},"set_exception_handler":{"name":"set_exception_handler","parameters":[{"type":"callable","name":"$exception_handler","description":"Name of the function to be called when an uncaught exception occurs. This handler function needs to accept one parameter, which will be the exception object that was thrown. This is the handler signature before PHP 7:\n\n\n\nvoid handler ( Exception $ex )\n\nSince PHP 7, most errors are reported by throwing Error exceptions, which will be caught by the handler as well. Both Error and Exception implements the Throwable interface. This is the handler signature since PHP 7:\n\n\n\nvoid handler ( Throwable $ex )\n\nNULL may be passed instead, to reset this handler to its default state.\n\nCaution\n Note that providing an explicit Exception type hint for the ex parameter in your callback will cause issues with the changed exception hierarchy in PHP 7."}],"return":{"type":"callable","values":["NULL"]},"short":"\n   Sets a user-defined exception handler function \n  ","examples":[{"title":"Example #1 set_exception_handler() example","content":"<?php\nfunction\u00a0exception_handler($exception)\u00a0{\n\u00a0\u00a0echo\u00a0\"Uncaught\u00a0exception:\u00a0\"\u00a0,\u00a0$exception->getMessage(),\u00a0\"\\n\";\n}\n\nset_exception_handler('exception_handler');\n\nthrow\u00a0new\u00a0Exception('Uncaught\u00a0Exception');\necho\u00a0\"Not\u00a0Executed\\n\";\n?>"}]},"set_file_buffer":{"name":"set_file_buffer","parameters":[],"return":{"type":"","values":[]},"short":"Alias of stream_set_write_buffer()","examples":[]},"set_include_path":{"name":"set_include_path","parameters":[{"type":"string","name":"$new_include_path","description":"The new value for the include_path"}],"return":{"type":"string","values":["FALSE"]},"short":"Sets the include_path configuration option","examples":[{"title":"Example #1 set_include_path() example","content":"<?php\nset_include_path('\/usr\/lib\/pear');\n\n\/\/\u00a0Or\u00a0using\u00a0ini_set()\nini_set('include_path',\u00a0'\/usr\/lib\/pear');\n?>"},{"title":"Example #2 Adding to the include path","content":"Making use of the PATH_SEPARATOR constant, it is\n     possible to extend the include path regardless of the operating system."}]},"set_time_limit":{"name":"set_time_limit","parameters":[{"type":"int","name":"$seconds","description":"The maximum execution time, in seconds. If set to zero, no time limit is imposed."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Limits the maximum execution time","examples":[]},"setcookie":{"name":"setcookie","parameters":[{"type":"string","name":"$name","description":"The name of the cookie."},{"type":"string","name":"$value","default_value":"\"\"","description":"The value of the cookie.  This value is stored on the clients computer; do not store sensitive information.  Assuming the name is 'cookiename', this value is retrieved through $_COOKIE['cookiename']"},{"type":"int","name":"$expire","default_value":"0","description":"The time the cookie expires.  This is a Unix timestamp so is in number of seconds since the epoch.  In other words, you'll most likely set this with the time() function plus the number of seconds before you want it to expire.  Or you might use mktime(). time()+60*60*24*30 will set the cookie to expire in 30 days. If set to 0, or omitted, the cookie will expire at the end of the session (when the browser closes).\n\n\n\nNote:\n You may notice the expire parameter takes on a Unix timestamp, as opposed to the date format Wdy, DD-Mon-YYYY HH:MM:SS GMT, this is because PHP does this conversion internally."},{"type":"string","name":"$path","default_value":"\"\"","description":"The path on the server in which the cookie will be available on. If set to '\/', the cookie will be available within the entire domain.  If set to '\/foo\/', the cookie will only be available within the \/foo\/ directory and all sub-directories such as \/foo\/bar\/ of domain.  The default value is the current directory that the cookie is being set in."},{"type":"string","name":"$domain","default_value":"\"\"","description":"The (sub)domain that the cookie is available to. Setting this to a subdomain (such as 'www.example.com') will make the cookie available to that subdomain and all other sub-domains of it (i.e. w2.www.example.com). To make the cookie available to the whole domain (including all subdomains of it), simply set the value to the domain name ('example.com', in this case).\n\nOlder browsers still implementing the deprecated \u00bb\u00a0RFC 2109 may require a leading . to match all subdomains."},{"type":"bool","name":"$secure","default_value":"FALSE","description":"Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client. When set to TRUE, the cookie will only be set if a secure connection exists. On the server-side, it's on the programmer to send this kind of cookie only on secure connection (e.g. with respect to $_SERVER[\"HTTPS\"])."},{"type":"bool","name":"$httponly","default_value":"FALSE","description":"When TRUE the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. It has been suggested that this setting can effectively help to reduce identity theft through XSS attacks (although it is not supported by all browsers), but that claim is often disputed. Added in PHP 5.2.0. TRUE or FALSE"}],"return":{"type":"bool","values":["FALSE","TRUE"]},"short":"Send a cookie","examples":[{"title":"Example #1 setcookie() send example","content":"<?php\n$value\u00a0=\u00a0'something\u00a0from\u00a0somewhere';\n\nsetcookie(\"TestCookie\",\u00a0$value);\nsetcookie(\"TestCookie\",\u00a0$value,\u00a0time()+3600);\u00a0\u00a0\/*\u00a0expire\u00a0in\u00a01\u00a0hour\u00a0*\/\nsetcookie(\"TestCookie\",\u00a0$value,\u00a0time()+3600,\u00a0\"\/~rasmus\/\",\u00a0\"example.com\",\u00a01);\n?>"},{"title":"Example #2 setcookie() delete example","content":"When deleting a cookie you should assure that the expiration date\n     is in the past, to trigger the removal mechanism in your browser.\n     Examples follow how to delete cookies sent in previous example:"},{"title":"Example #3 setcookie() and arrays","content":"You may also set array cookies by using array notation in the\n     cookie name. This has the effect of setting as many cookies as\n     you have array elements, but when the cookie is received by your\n     script, the values are all placed in an array with the cookie's\n     name:"}]},"setlocale":{"name":"setlocale","parameters":[{"type":"int","name":"$category","description":"category is a named constant specifying the category of the functions affected by the locale setting:\n\nLC_ALL for all of the below\n\n\n\n LC_COLLATE for string comparison, see strcoll()\n\n\n\n LC_CTYPE for character classification and conversion, for example strtoupper()\n\n\n\n LC_MONETARY for localeconv()\n\n\n\n LC_NUMERIC for decimal separator (See also localeconv())\n\n\n\n LC_TIME for date and time formatting with strftime()\n\n\n\n LC_MESSAGES for system responses (available if PHP was compiled with libintl)"},{"type":"array","name":"$locale","description":"If locale is NULL or the empty string \"\", the locale names will be set from the values of environment variables with the same names as the above categories, or from \"LANG\".\n\nIf locale is \"0\", the locale setting is not affected, only the current setting is returned.\n\nIf locale is an array or followed by additional parameters then each array element or parameter is tried to be set as new locale until success. This is useful if a locale is known under different names on different systems or for providing a fallback for a possibly not available locale."},{"type":"string","name":"$...","description":"(Optional string or array parameters to try as locale settings until success.)"}],"return":{"type":"string","values":["FALSE"]},"short":"Set locale information","examples":[{"title":"Example #1 setlocale() Examples","content":"<?php\n\/*\u00a0Set\u00a0locale\u00a0to\u00a0Dutch\u00a0*\/\nsetlocale(LC_ALL,\u00a0'nl_NL');\n\n\/*\u00a0Output:\u00a0vrijdag\u00a022\u00a0december\u00a01978\u00a0*\/\necho\u00a0strftime(\"%A\u00a0%e\u00a0%B\u00a0%Y\",\u00a0mktime(0,\u00a00,\u00a00,\u00a012,\u00a022,\u00a01978));\n\n\/*\u00a0try\u00a0different\u00a0possible\u00a0locale\u00a0names\u00a0for\u00a0german\u00a0*\/\n$loc_de\u00a0=\u00a0setlocale(LC_ALL,\u00a0'de_DE@euro',\u00a0'de_DE',\u00a0'de',\u00a0'ge');\necho\u00a0\"Preferred\u00a0locale\u00a0for\u00a0german\u00a0on\u00a0this\u00a0system\u00a0is\u00a0'$loc_de'\";\n?>"},{"title":"Example #2 setlocale() Examples for Windows","content":"<?php\n\/*\u00a0Set\u00a0locale\u00a0to\u00a0Dutch\u00a0*\/\nsetlocale(LC_ALL,\u00a0'nld_nld');\n\n\/*\u00a0Output:\u00a0vrijdag\u00a022\u00a0december\u00a01978\u00a0*\/\necho\u00a0strftime(\"%A\u00a0%d\u00a0%B\u00a0%Y\",\u00a0mktime(0,\u00a00,\u00a00,\u00a012,\u00a022,\u00a01978));\n\n\/*\u00a0try\u00a0different\u00a0possible\u00a0locale\u00a0names\u00a0for\u00a0german\u00a0*\/\n$loc_de\u00a0=\u00a0setlocale(LC_ALL,\u00a0'de_DE@euro',\u00a0'de_DE',\u00a0'deu_deu');\necho\u00a0\"Preferred\u00a0locale\u00a0for\u00a0german\u00a0on\u00a0this\u00a0system\u00a0is\u00a0'$loc_de'\";\n?>"}]},"setrawcookie":{"name":"setrawcookie","parameters":[{"type":"string","name":"$name"},{"type":"string","name":"$value"},{"type":"int","name":"$expire","default_value":"0"},{"type":"string","name":"$path"},{"type":"string","name":"$domain"},{"type":"bool","name":"$secure","default_value":"FALSE"},{"type":"bool","name":"$httponly","default_value":"FALSE"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Send a cookie without urlencoding the cookie value","examples":[]},"settype":{"name":"settype","parameters":[{"type":"string","name":"$type","description":"Possibles values of type are:\n\n\"boolean\" or \"bool\"\n\n\n\n \"integer\" or \"int\"\n\n\n\n \"float\" or \"double\"\n\n\n\n \"string\"\n\n\n\n \"array\"\n\n\n\n \"object\"\n\n\n\n \"null\""}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set the type of a variable","examples":[{"title":"Example #1 settype() example","content":"<?php\n$foo\u00a0=\u00a0\"5bar\";\u00a0\/\/\u00a0string\n$bar\u00a0=\u00a0true;\u00a0\u00a0\u00a0\/\/\u00a0boolean\n\nsettype($foo,\u00a0\"integer\");\u00a0\/\/\u00a0$foo\u00a0is\u00a0now\u00a05\u00a0\u00a0\u00a0(integer)\nsettype($bar,\u00a0\"string\");\u00a0\u00a0\/\/\u00a0$bar\u00a0is\u00a0now\u00a0\"1\"\u00a0(string)\n?>"}]},"sha1":{"name":"sha1","parameters":[{"type":"string","name":"$str","description":"The input string."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"If the optional raw_output is set to TRUE, then the sha1 digest is instead returned in raw binary format with a length of 20, otherwise the returned value is a 40-character hexadecimal number."}],"return":{"type":"string","values":[]},"short":"Calculate the sha1 hash of a string","examples":[{"title":"Example #1 A sha1() example","content":"<?php\n$str\u00a0=\u00a0'apple';\n\nif\u00a0(sha1($str)\u00a0===\u00a0'd0be2dc421be4fcd0172e5afceea3970e2f3d940')\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Would\u00a0you\u00a0like\u00a0a\u00a0green\u00a0or\u00a0red\u00a0apple?\";\n}\n?>"}]},"sha1_file":{"name":"sha1_file","parameters":[{"type":"string","name":"$filename","description":"The filename of the file to hash."},{"type":"bool","name":"$raw_output","default_value":"FALSE","description":"When TRUE, returns the digest in raw binary format with a length of 20."}],"return":{"type":"string","values":["FALSE"]},"short":"Calculate the sha1 hash of a file","examples":[{"title":"Example #1 sha1_file() example","content":"<?php\nforeach(glob('\/home\/Kalle\/myproject\/*.php')\u00a0as\u00a0$ent)\n{\n\u00a0\u00a0\u00a0\u00a0if(is_dir($ent))\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$ent\u00a0.\u00a0'\u00a0(SHA1:\u00a0'\u00a0.\u00a0sha1_file($ent)\u00a0.\u00a0')',\u00a0PHP_EOL;\n}\n?>"}]},"shell_exec":{"name":"shell_exec","parameters":[{"type":"string","name":"$cmd","description":"The command that will be executed."}],"return":{"type":"string","values":["NULL"]},"short":"Execute command via shell and return the complete output as a string","examples":[{"title":"Example #1 A shell_exec() example","content":"<?php\n$output\u00a0=\u00a0shell_exec('ls\u00a0-lart');\necho\u00a0\"<pre>$output<\/pre>\";\n?>"}]},"shm_attach":{"name":"shm_attach","parameters":[{"type":"int","name":"$key","description":"A numeric shared memory segment ID"},{"type":"int","name":"$memsize","description":"The memory size. If not provided, default to the sysvshm.init_mem in the php.ini, otherwise 10000 bytes."},{"type":"int","name":"$perm","default_value":"0666","description":"The optional permission bits. Default to 0666."}],"return":{"type":"resource","values":[]},"short":"Creates or open a shared memory segment","examples":[]},"shm_detach":{"name":"shm_detach","parameters":[{"type":"resource","name":"$shm_identifier","description":"A shared memory resource handle as returned by shm_attach()"}],"return":{"type":"bool","values":["TRUE"]},"short":"Disconnects from shared memory segment","examples":[]},"shm_get_var":{"name":"shm_get_var","parameters":[{"type":"resource","name":"$shm_identifier","description":"Shared memory segment, obtained from shm_attach()."},{"type":"int","name":"$variable_key","description":"The variable key."}],"return":{"type":"mixed","values":[]},"short":"Returns a variable from shared memory","examples":[]},"shm_has_var":{"name":"shm_has_var","parameters":[{"type":"resource","name":"$shm_identifier","description":"Shared memory segment, obtained from shm_attach()."},{"type":"int","name":"$variable_key","description":"The variable key."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check whether a specific entry exists","examples":[]},"shm_put_var":{"name":"shm_put_var","parameters":[{"type":"resource","name":"$shm_identifier","description":"A shared memory resource handle as returned by shm_attach()"},{"type":"int","name":"$variable_key","description":"The variable key."},{"type":"mixed","name":"$variable","description":"The variable. All variable types that serialize() supports may be used: generally this means all types except for resources and some internal objects that cannot be serialized."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Inserts or updates a variable in shared memory","examples":[]},"shm_remove":{"name":"shm_remove","parameters":[{"type":"resource","name":"$shm_identifier","description":"The shared memory identifier as returned by shm_attach()"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Removes shared memory from Unix systems","examples":[]},"shm_remove_var":{"name":"shm_remove_var","parameters":[{"type":"resource","name":"$shm_identifier","description":"The shared memory identifier as returned by shm_attach()"},{"type":"int","name":"$variable_key","description":"The variable key."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Removes a variable from shared memory\n  ","examples":[]},"shmop_close":{"name":"shmop_close","parameters":[{"type":"resource","name":"$shmid","description":"The shared memory block resource created by shmop_open()"}],"return":{"type":"void","values":[]},"short":"Close shared memory block","examples":[{"title":"Example #1 Closing shared memory block","content":"<?php\nshmop_close($shm_id);\n?>"}]},"shmop_delete":{"name":"shmop_delete","parameters":[{"type":"resource","name":"$shmid","description":"The shared memory block resource created by shmop_open()"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Delete shared memory block","examples":[{"title":"Example #1 Deleting shared memory block","content":"<?php\nshmop_delete($shm_id);\n?>"}]},"shmop_open":{"name":"shmop_open","parameters":[{"type":"int","name":"$key","description":"System's id for the shared memory block. Can be passed as a decimal or hex."},{"type":"string","name":"$flags","description":"The flags that you can use:\n\n\"a\" for access (sets SHM_RDONLY for shmat) use this flag when you need to open an existing shared memory segment for read only\n\n\n\n \"c\" for create (sets IPC_CREATE) use this flag when you need to create a new shared memory segment or if a segment with the same key exists, try to open it for read and write\n\n\n\n \"w\" for read & write access use this flag when you need to read and write to a shared memory segment, use this flag in most cases.\n\n\n\n \"n\" create a new memory segment (sets IPC_CREATE|IPC_EXCL) use this flag when you want to create a new shared memory segment but if one already exists with the same flag, fail. This is useful for security purposes, using this you can prevent race condition exploits."},{"type":"int","name":"$mode","description":"The permissions that you wish to assign to your memory segment, those are the same as permission for a file. Permissions need to be passed in octal form, like for example 0644"},{"type":"int","name":"$size","description":"The size of the shared memory block you wish to create in bytes"}],"return":{"type":"resource","values":["FALSE"]},"short":"Create or open shared memory block","examples":[{"title":"Example #1 Create a new shared memory block","content":"<?php\n$shm_key\u00a0=\u00a0ftok(__FILE__,\u00a0't');\n$shm_id\u00a0=\u00a0shmop_open($shm_key,\u00a0\"c\",\u00a00644,\u00a0100);\n?>"}]},"shmop_read":{"name":"shmop_read","parameters":[{"type":"resource","name":"$shmid","description":"The shared memory block identifier created by shmop_open()"},{"type":"int","name":"$start","description":"Offset from which to start reading"},{"type":"int","name":"$count","description":"The number of bytes to read"}],"return":{"type":"string","values":["FALSE"]},"short":"Read data from shared memory block","examples":[{"title":"Example #1 Reading shared memory block","content":"<?php\n$shm_data\u00a0=\u00a0shmop_read($shm_id,\u00a00,\u00a050);\n?>"}]},"shmop_size":{"name":"shmop_size","parameters":[{"type":"resource","name":"$shmid","description":"The shared memory block identifier created by shmop_open()"}],"return":{"type":"int","values":[]},"short":"Get size of shared memory block","examples":[{"title":"Example #1 Getting the size of the shared memory block","content":"<?php\n$shm_size\u00a0=\u00a0shmop_size($shm_id);\n?>"}]},"shmop_write":{"name":"shmop_write","parameters":[{"type":"resource","name":"$shmid","description":"The shared memory block identifier created by shmop_open()"},{"type":"string","name":"$data","description":"A string to write into shared memory block"},{"type":"int","name":"$offset","description":"Specifies where to start writing data inside the shared memory segment."}],"return":{"type":"int","values":["FALSE"]},"short":"Write data into shared memory block","examples":[{"title":"Example #1 Writing to shared memory block","content":"<?php\n$shm_bytes_written\u00a0=\u00a0shmop_write($shm_id,\u00a0$my_string,\u00a00);\n?>"}]},"show_source":{"name":"show_source","parameters":[],"return":{"type":"","values":[]},"short":"Alias of highlight_file()","examples":[]},"shuffle":{"name":"shuffle","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Shuffle an array","examples":[{"title":"Example #1 shuffle() example","content":"<?php\n$numbers\u00a0=\u00a0range(1,\u00a020);\nshuffle($numbers);\nforeach\u00a0($numbers\u00a0as\u00a0$number)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$number\u00a0\";\n}\n?>"}]},"similar_text":{"name":"similar_text","parameters":[{"type":"string","name":"$first","description":"The first string."},{"type":"string","name":"$second","description":"The second string.\n\nNote:\n Swapping the first and second may yield a different result; see the example below."}],"return":{"type":"int","values":[]},"short":"Calculate the similarity between two strings","examples":[{"title":"Example #1 similar_text() argument swapping example","content":"This example shows that swapping the first and\n    second argument may yield different results."}]},"simplexml_import_dom":{"name":"simplexml_import_dom","parameters":[{"type":"DOMNode","name":"$node","description":"A DOM Element node"},{"type":"string","name":"$class_name","default_value":"\"SimpleXMLElement\"","description":"You may use this optional parameter so that simplexml_import_dom() will return an object of the specified class. That class should extend the SimpleXMLElement class."}],"return":{"type":"SimpleXMLElement","values":["FALSE"]},"short":"Get a SimpleXMLElement object from a DOM node","examples":[{"title":"Example #1 Importing DOM","content":"<?php\n$dom\u00a0=\u00a0new\u00a0DOMDocument;\n$dom->loadXML('<books><book><title>blah<\/title><\/book><\/books>');\nif\u00a0(!$dom)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Error\u00a0while\u00a0parsing\u00a0the\u00a0document';\n\u00a0\u00a0\u00a0\u00a0exit;\n}\n\n$s\u00a0=\u00a0simplexml_import_dom($dom);\n\necho\u00a0$s->book[0]->title;\n?>"}]},"simplexml_load_file":{"name":"simplexml_load_file","parameters":[{"type":"string","name":"$filename","description":"Path to the XML file\n\nNote:\n Libxml 2 unescapes the URI, so if you want to pass e.g. b&c as the URI parameter a, you have to call simplexml_load_file(rawurlencode('http:\/\/example.com\/?a=' . urlencode('b&c'))). Since PHP 5.1.0 you don't need to do this because PHP will do it for you."},{"type":"string","name":"$class_name","default_value":"\"SimpleXMLElement\"","description":"You may use this optional parameter so that simplexml_load_file() will return an object of the specified class. That class should extend the SimpleXMLElement class."},{"type":"int","name":"$options","default_value":"0","description":"Since PHP 5.1.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters."},{"type":"string","name":"$ns","default_value":"\"\"","description":"Namespace prefix or URI."},{"type":"bool","name":"$is_prefix","default_value":"FALSE","description":"TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE."}],"return":{"type":"SimpleXMLElement","values":["FALSE"]},"short":"\n   Interprets an XML file into an object\n  ","examples":[{"title":"Example #1 Interpret an XML document","content":"<?php\n\/\/\u00a0The\u00a0file\u00a0test.xml\u00a0contains\u00a0an\u00a0XML\u00a0document\u00a0with\u00a0a\u00a0root\u00a0element\n\/\/\u00a0and\u00a0at\u00a0least\u00a0an\u00a0element\u00a0\/[root]\/title.\n\nif\u00a0(file_exists('test.xml'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$xml\u00a0=\u00a0simplexml_load_file('test.xml');\n\u00a0\n\u00a0\u00a0\u00a0\u00a0print_r($xml);\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0exit('Failed\u00a0to\u00a0open\u00a0test.xml.');\n}\n?>"}]},"simplexml_load_string":{"name":"simplexml_load_string","parameters":[{"type":"string","name":"$data","description":"A well-formed XML string"},{"type":"string","name":"$class_name","default_value":"\"SimpleXMLElement\"","description":"You may use this optional parameter so that simplexml_load_string() will return an object of the specified class. That class should extend the SimpleXMLElement class."},{"type":"int","name":"$options","default_value":"0","description":"Since PHP 5.1.0 and Libxml 2.6.0, you may also use the options parameter to specify additional Libxml parameters."},{"type":"string","name":"$ns","default_value":"\"\"","description":"Namespace prefix or URI."},{"type":"bool","name":"$is_prefix","default_value":"FALSE","description":"TRUE if ns is a prefix, FALSE if it's a URI; defaults to FALSE."}],"return":{"type":"SimpleXMLElement","values":["FALSE"]},"short":"\n   Interprets a string of XML into an object\n  ","examples":[{"title":"Example #1 Interpret an XML string","content":"<?php\n$string\u00a0=\u00a0<<<XML\n<?xml\u00a0version='1.0'?>\u00a0\n<document>\n\u00a0<title>Forty\u00a0What?<\/title>\n\u00a0<from>Joe<\/from>\n\u00a0<to>Jane<\/to>\n\u00a0<body>\n\u00a0\u00a0I\u00a0know\u00a0that's\u00a0the\u00a0answer\u00a0--\u00a0but\u00a0what's\u00a0the\u00a0question?\n\u00a0<\/body>\n<\/document>\nXML;\n\n$xml\u00a0=\u00a0simplexml_load_string($string);\n\nprint_r($xml);\n?>"}]},"sin":{"name":"sin","parameters":[{"type":"float","name":"$arg","description":"A value in radians"}],"return":{"type":"float","values":[]},"short":"Sine","examples":[{"title":"Example #1 sin() example","content":"<?php\n\n\/\/\u00a0Precision\u00a0depends\u00a0on\u00a0your\u00a0precision\u00a0directive\necho\u00a0sin(deg2rad(60));\u00a0\u00a0\/\/\u00a0\u00a00.866025403\u00a0...\necho\u00a0sin(60);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0-0.304810621\u00a0...\n\n?>"}]},"sinh":{"name":"sinh","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Hyperbolic sine","examples":[]},"sizeof":{"name":"sizeof","parameters":[],"return":{"type":"","values":[]},"short":"Alias of count()","examples":[]},"sleep":{"name":"sleep","parameters":[{"type":"int","name":"$seconds","description":"Halt time in seconds."}],"return":{"type":"int","values":["FALSE","WAIT_IO_COMPLETION"]},"short":"Delay execution","examples":[{"title":"Example #1 sleep() example","content":"<?php\n\n\/\/\u00a0current\u00a0time\necho\u00a0date('h:i:s')\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0sleep\u00a0for\u00a010\u00a0seconds\nsleep(10);\n\n\/\/\u00a0wake\u00a0up\u00a0!\necho\u00a0date('h:i:s')\u00a0.\u00a0\"\\n\";\n\n?>"}]},"socket_accept":{"name":"socket_accept","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create()."}],"return":{"type":"resource","values":["FALSE"]},"short":"Accepts a connection on a socket","examples":[]},"socket_addrinfo_bind":{"name":"socket_addrinfo_bind","parameters":[{"type":"resource","name":"$addr","description":""}],"return":{"type":"resource","values":[]},"short":"Create and bind to a socket from a given addrinfo","examples":[]},"socket_addrinfo_connect":{"name":"socket_addrinfo_connect","parameters":[{"type":"resource","name":"$addr","description":""}],"return":{"type":"resource","values":[]},"short":"Create and connect to a socket from a given addrinfo","examples":[]},"socket_addrinfo_explain":{"name":"socket_addrinfo_explain","parameters":[{"type":"resource","name":"$addr","description":""}],"return":{"type":"array","values":[]},"short":"Get information about addrinfo","examples":[]},"socket_addrinfo_lookup":{"name":"socket_addrinfo_lookup","parameters":[{"type":"string","name":"$host","description":""},{"type":"string","name":"$service","description":""},{"type":"array","name":"$hints","description":""}],"return":{"type":"array","values":[]},"short":"Get array with contents of getaddrinfo about the given hostname","examples":[]},"socket_bind":{"name":"socket_bind","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create()."},{"type":"string","name":"$address","description":"If the socket is of the AF_INET family, the address is an IP in dotted-quad notation (e.g. 127.0.0.1).\n\nIf the socket is of the AF_UNIX family, the address is the path of a Unix-domain socket (e.g. \/tmp\/my.sock)."},{"type":"int","name":"$port","default_value":"0"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Binds a name to a socket","examples":[{"title":"Example #1 Using socket_bind() to set the source address","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0new\u00a0socket\n$sock\u00a0=\u00a0socket_create(AF_INET,\u00a0SOCK_STREAM,\u00a0SOL_TCP);\n\n\/\/\u00a0An\u00a0example\u00a0list\u00a0of\u00a0IP\u00a0addresses\u00a0owned\u00a0by\u00a0the\u00a0computer\n$sourceips['kevin']\u00a0\u00a0\u00a0\u00a0=\u00a0'127.0.0.1';\n$sourceips['madcoder']\u00a0=\u00a0'127.0.0.2';\n\n\/\/\u00a0Bind\u00a0the\u00a0source\u00a0address\nsocket_bind($sock,\u00a0$sourceips['madcoder']);\n\n\/\/\u00a0Connect\u00a0to\u00a0destination\u00a0address\nsocket_connect($sock,\u00a0'127.0.0.1',\u00a080);\n\n\/\/\u00a0Write\n$request\u00a0=\u00a0'GET\u00a0\/\u00a0HTTP\/1.1'\u00a0.\u00a0\"\\r\\n\"\u00a0.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Host:\u00a0example.com'\u00a0.\u00a0\"\\r\\n\\r\\n\";\nsocket_write($sock,\u00a0$request);\n\n\/\/\u00a0Close\nsocket_close($sock);\n\n?>"}]},"socket_clear_error":{"name":"socket_clear_error","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create()."}],"return":{"type":"void","values":[]},"short":"Clears the error on the socket or the last error code","examples":[]},"socket_close":{"name":"socket_close","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create() or socket_accept()."}],"return":{"type":"void","values":[]},"short":"Closes a socket resource","examples":[]},"socket_cmsg_space":{"name":"socket_cmsg_space","parameters":[{"type":"int","name":"$level","description":""},{"type":"int","name":"$type","description":""},{"type":"int","name":"$n","default_value":"0"}],"return":{"type":"int","values":[]},"short":"Calculate message buffer size","examples":[]},"socket_connect":{"name":"socket_connect","parameters":[{"type":"resource","name":"$socket","description":""},{"type":"string","name":"$address","description":"The address parameter is either an IPv4 address in dotted-quad notation (e.g. 127.0.0.1) if socket is AF_INET, a valid IPv6 address (e.g. ::1) if IPv6 support is enabled and socket is AF_INET6 or the pathname of a Unix domain socket, if the socket family is AF_UNIX."},{"type":"int","name":"$port","default_value":"0","description":"The port parameter is only used and is mandatory when connecting to an AF_INET or an AF_INET6 socket, and designates the port on the remote host to which a connection should be made."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Initiates a connection on a socket","examples":[]},"socket_create":{"name":"socket_create","parameters":[{"type":"int","name":"$domain","description":"The domain parameter specifies the protocol family to be used by the socket.\n\nAvailable address\/protocol families\n Domain Description AF_INET\n IPv4 Internet based protocols. TCP and UDP are common protocols of this protocol family.\n AF_INET6\n IPv6 Internet based protocols. TCP and UDP are common protocols of this protocol family.\n AF_UNIX\n Local communication protocol family. High efficiency and low overhead make it a great form of IPC (Interprocess Communication)."},{"type":"int","name":"$type","description":"The type parameter selects the type of communication to be used by the socket.\n\nAvailable socket types\n Type Description SOCK_STREAM\n Provides sequenced, reliable, full-duplex, connection-based byte streams. An out-of-band data transmission mechanism may be supported. The TCP protocol is based on this socket type.\n SOCK_DGRAM\n Supports datagrams (connectionless, unreliable messages of a fixed maximum length). The UDP protocol is based on this socket type.\n SOCK_SEQPACKET\n Provides a sequenced, reliable, two-way connection-based data transmission path for datagrams of fixed maximum length;  a consumer is required to read an entire packet with each read call.\n SOCK_RAW\n Provides raw network protocol access. This special type of socket can be used to manually construct any type of protocol. A common use for this socket type is to perform ICMP requests (like ping).\n SOCK_RDM\n Provides a reliable datagram layer that does not guarantee ordering. This is most likely not implemented on your operating system."},{"type":"int","name":"$protocol","description":"The protocol parameter sets the specific protocol within the specified domain to be used when communicating on the returned socket. The proper value can be retrieved by name by using getprotobyname(). If the desired protocol is TCP, or UDP the corresponding constants SOL_TCP, and SOL_UDP can also be used.\n\nCommon protocols\n Name Description icmp\n The Internet Control Message Protocol is used primarily by gateways and hosts to report errors in datagram communication. The \"ping\" command (present in most modern operating systems) is an example application of ICMP.\n udp\n The User Datagram Protocol is a connectionless, unreliable, protocol with fixed record lengths. Due to these aspects, UDP requires a minimum amount of protocol overhead.\n tcp\n The Transmission Control Protocol is a reliable, connection based, stream oriented, full duplex protocol. TCP guarantees that all data packets will be received in the order in which they were sent. If any packet is somehow lost during communication, TCP will automatically retransmit the packet until the destination host acknowledges that packet. For reliability and performance reasons, the TCP implementation itself decides the appropriate octet boundaries of the underlying datagram communication layer. Therefore, TCP applications must allow for the possibility of partial record transmission."}],"return":{"type":"resource","values":["FALSE"]},"short":"Create a socket (endpoint for communication)","examples":[]},"socket_create_listen":{"name":"socket_create_listen","parameters":[{"type":"int","name":"$port","description":"The port on which to listen on all interfaces."},{"type":"int","name":"$backlog","default_value":"128","description":"The backlog parameter defines the maximum length the queue of pending connections may grow to. SOMAXCONN may be passed as backlog parameter, see socket_listen() for more information."}],"return":{"type":"resource","values":["FALSE"]},"short":"Opens a socket on port to accept connections ","examples":[]},"socket_create_pair":{"name":"socket_create_pair","parameters":[{"type":"int","name":"$domain","description":"The domain parameter specifies the protocol family to be used by the socket. See socket_create() for the full list."},{"type":"int","name":"$type","description":"The type parameter selects the type of communication to be used by the socket. See socket_create() for the full list."},{"type":"int","name":"$protocol","description":"The protocol parameter sets the specific protocol within the specified domain to be used when communicating on the returned socket. The proper value can be retrieved by name by using getprotobyname(). If the desired protocol is TCP, or UDP the corresponding constants SOL_TCP, and SOL_UDP can also be used.\n\nSee socket_create() for the full list of supported protocols."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Creates a pair of indistinguishable sockets and stores them in an array","examples":[{"title":"Example #1 socket_create_pair() example","content":"<?php\n$sockets\u00a0=\u00a0array();\n\n\/*\u00a0On\u00a0Windows\u00a0we\u00a0need\u00a0to\u00a0use\u00a0AF_INET\u00a0*\/\n$domain\u00a0=\u00a0(strtoupper(substr(PHP_OS,\u00a00,\u00a03))\u00a0==\u00a0'WIN'\u00a0?\u00a0AF_INET\u00a0:\u00a0AF_UNIX);\n\n\/*\u00a0Setup\u00a0socket\u00a0pair\u00a0*\/\nif\u00a0(socket_create_pair($domain,\u00a0SOCK_STREAM,\u00a00,\u00a0$sockets)\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"socket_create_pair\u00a0failed.\u00a0Reason:\u00a0\".socket_strerror(socket_last_error());\n}\n\/*\u00a0Send\u00a0and\u00a0Recieve\u00a0Data\u00a0*\/\nif\u00a0(socket_write($sockets[0],\u00a0\"ABCdef123\\n\",\u00a0strlen(\"ABCdef123\\n\"))\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"socket_write()\u00a0failed.\u00a0Reason:\u00a0\".socket_strerror(socket_last_error($sockets[0]));\n}\nif\u00a0(($data\u00a0=\u00a0socket_read($sockets[1],\u00a0strlen(\"ABCdef123\\n\"),\u00a0PHP_BINARY_READ))\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"socket_read()\u00a0failed.\u00a0Reason:\u00a0\".socket_strerror(socket_last_error($sockets[1]));\n}\nvar_dump($data);\n\n\/*\u00a0Close\u00a0sockets\u00a0*\/\nsocket_close($sockets[0]);\nsocket_close($sockets[1]);\n?>"},{"title":"Example #2 socket_create_pair() IPC example","content":"<?php\n$ary\u00a0=\u00a0array();\n$strone\u00a0=\u00a0'Message\u00a0From\u00a0Parent.';\n$strtwo\u00a0=\u00a0'Message\u00a0From\u00a0Child.';\n\nif\u00a0(socket_create_pair(AF_UNIX,\u00a0SOCK_STREAM,\u00a00,\u00a0$ary)\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"socket_create_pair()\u00a0failed.\u00a0Reason:\u00a0\".socket_strerror(socket_last_error());\n}\n$pid\u00a0=\u00a0pcntl_fork();\nif\u00a0($pid\u00a0==\u00a0-1)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Could\u00a0not\u00a0fork\u00a0Process.';\n}\u00a0elseif\u00a0($pid)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/*parent*\/\n\u00a0\u00a0\u00a0\u00a0socket_close($ary[0]);\n\u00a0\u00a0\u00a0\u00a0if\u00a0(socket_write($ary[1],\u00a0$strone,\u00a0strlen($strone))\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"socket_write()\u00a0failed.\u00a0Reason:\u00a0\".socket_strerror(socket_last_error($ary[1]));\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0if\u00a0(socket_read($ary[1],\u00a0strlen($strtwo),\u00a0PHP_BINARY_READ)\u00a0==\u00a0$strtwo)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Recieved\u00a0$strtwo\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0socket_close($ary[1]);\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/*child*\/\n\u00a0\u00a0\u00a0\u00a0socket_close($ary[1]);\n\u00a0\u00a0\u00a0\u00a0if\u00a0(socket_write($ary[0],\u00a0$strtwo,\u00a0strlen($strtwo))\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"socket_write()\u00a0failed.\u00a0Reason:\u00a0\".socket_strerror(socket_last_error($ary[0]));\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0if\u00a0(socket_read($ary[0],\u00a0strlen($strone),\u00a0PHP_BINARY_READ)\u00a0==\u00a0$strone)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Recieved\u00a0$strone\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0socket_close($ary[0]);\n}\n?>"}]},"socket_export_stream":{"name":"socket_export_stream","parameters":[{"type":"resource","name":"$socket","description":""}],"return":{"type":"resource","values":["FALSE"]},"short":"Export a socket extension resource into a stream that encapsulates a socket","examples":[]},"socket_get_option":{"name":"socket_get_option","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create() or socket_accept()."},{"type":"int","name":"$level","description":"The level parameter specifies the protocol level at which the option resides. For example, to retrieve options at the socket level, a level parameter of SOL_SOCKET would be used. Other levels, such as TCP, can be used by specifying the protocol number of that level. Protocol numbers can be found by using the getprotobyname() function."},{"type":"int","name":"$optname","description":"Available Socket Options\n Option Description Type SO_DEBUG\n Reports whether debugging information is being recorded.\n\n int\n SO_BROADCAST\n Reports whether transmission of broadcast messages is supported.\n\n int\n SO_REUSEADDR\n Reports whether local addresses can be reused.\n\n int\n SO_KEEPALIVE\n Reports whether connections are kept active with periodic transmission of messages. If the connected socket fails to respond to these messages, the connection is broken and processes writing to that socket are notified with a SIGPIPE signal.\n\n int\n SO_LINGER\n\n Reports whether the socket lingers on socket_close() if data is present. By default, when the socket is closed, it attempts to send all unsent data. In the case of a connection-oriented socket, socket_close() will wait for its peer to acknowledge the data.\n\n If l_onoff is non-zero and l_linger is zero, all the unsent data will be discarded and RST (reset) is sent to the peer in the case of a connection-oriented socket.\n\n On the other hand, if l_onoff is non-zero and l_linger is non-zero, socket_close() will block until all the data is sent or the time specified in l_linger elapses. If the socket is non-blocking, socket_close() will fail and return an error.\n\n\n array. The array will contain two keys: l_onoff and l_linger.\n SO_OOBINLINE\n Reports whether the socket leaves out-of-band data inline.\n\n int\n SO_SNDBUF\n Reports the size of the send buffer.\n\n int\n SO_RCVBUF\n Reports the size of the receive buffer.\n\n int\n SO_ERROR\n Reports information about error status and clears it.\n\n int (cannot be set by socket_set_option())\n SO_TYPE\n Reports the socket type (e.g. SOCK_STREAM).\n\n int (cannot be set by socket_set_option())\n SO_DONTROUTE\n Reports whether outgoing messages bypass the standard routing facilities.\n\n int\n SO_RCVLOWAT\n Reports the minimum number of bytes to process for socket input operations.\n\n int\n SO_RCVTIMEO\n Reports the timeout value for input operations.\n\n array. The array will contain two keys: sec which is the seconds part on the timeout value and usec which is the microsecond part of the timeout value.\n SO_SNDTIMEO\n Reports the timeout value specifying the amount of time that an output function blocks because flow control prevents data from being sent.\n\n array. The array will contain two keys: sec which is the seconds part on the timeout value and usec which is the microsecond part of the timeout value.\n SO_SNDLOWAT\n Reports the minimum number of bytes to process for socket output operations.\n\n int\n TCP_NODELAY\n Reports whether the Nagle TCP algorithm is disabled.\n\n int\n MCAST_JOIN_GROUP\n Joins a multicast group. (added in PHP 5.4)\n\n array with keys \"group\", specifying a string with an IPv4 or IPv6 multicast address and \"interface\", specifying either an interface number (type int) or a string with the interface name, like \"eth0\". 0 can be specified to indicate the interface should be selected using routing rules. (can only be used in socket_set_option())\n MCAST_LEAVE_GROUP\n Leaves a multicast group. (added in PHP 5.4)\n\n array. See MCAST_JOIN_GROUP for more information. (can only be used in socket_set_option())\n MCAST_BLOCK_SOURCE\n Blocks packets arriving from a specific source to a specific multicast group, which must have been previously joined. (added in PHP 5.4)\n\n array with the same keys as MCAST_JOIN_GROUP, plus one extra key, source, which maps to a string specifying an IPv4 or IPv6 address of the source to be blocked. (can only be used in socket_set_option())\n MCAST_UNBLOCK_SOURCE\n Unblocks (start receiving again) packets arriving from a specific source address to a specific multicast group, which must have been previously joined. (added in PHP 5.4)\n\n array with the same format as MCAST_BLOCK_SOURCE. (can only be used in socket_set_option())\n MCAST_JOIN_SOURCE_GROUP\n Receive packets destined to a specific multicast group whose source address matches a specific value. (added in PHP 5.4)\n\n array with the same format as MCAST_BLOCK_SOURCE. (can only be used in socket_set_option())\n MCAST_LEAVE_SOURCE_GROUP\n Stop receiving packets destined to a specific multicast group whose soure address matches a specific value. (added in PHP 5.4)\n\n array with the same format as MCAST_BLOCK_SOURCE. (can only be used in socket_set_option())\n IP_MULTICAST_IF\n The outgoing interface for IPv4 multicast packets. (added in PHP 5.4)\n\n Either int specifying the interface number or a string with an interface name, like eth0. The value 0 can be used to indicate the routing table is to used in the interface selection. The function socket_get_option() returns an interface index. Note that, unlike the C API, this option does NOT take an IP address. This eliminates the interface difference between IP_MULTICAST_IF and IPV6_MULTICAST_IF.\n IPV6_MULTICAST_IF\n The outgoing interface for IPv6 multicast packets. (added in PHP 5.4)\n\n The same as IP_MULTICAST_IF.\n IP_MULTICAST_LOOP\n The multicast loopback policy for IPv4 packets, which determines whether multicast packets sent by this socket also reach receivers in the same host that have joined the same multicast group on the outgoing interface used by this socket. This is the case by default. (added in PHP 5.4)\n\n int (either 0 or 1). For socket_set_option() any value will be accepted and will be converted to a boolean following the usual PHP rules.\n IPV6_MULTICAST_LOOP\n Analogous to IP_MULTICAST_LOOP, but for IPv6. (added in PHP 5.4)\n\n int. See IP_MULTICAST_LOOP.\n IP_MULTICAST_TTL\n The time-to-live of outgoing IPv4 multicast packets. This should be a value between 0 (don't leave the interface) and 255. The default value is 1 (only the local network is reached). (added in PHP 5.4)\n\n int between 0 and 255.\n IPV6_MULTICAST_HOPS\n Analogous to IP_MULTICAST_TTL, but for IPv6 packets. The value -1 is also accepted, meaning the route default should be used. (added in PHP 5.4)\n\n int between -1 and 255."}],"return":{"type":"mixed","values":["FALSE"]},"short":"Gets socket options for the socket ","examples":[{"title":"Example #1 socket_get_option() example","content":"<?php\n$socket\u00a0=\u00a0socket_create_listen(1223);\n\n$linger\u00a0=\u00a0array('l_linger'\u00a0=>\u00a01,\u00a0'l_onoff'\u00a0=>\u00a01);\nsocket_set_option($socket,\u00a0SOL_SOCKET,\u00a0SO_LINGER,\u00a0$linger);\n\nvar_dump(socket_get_option($socket,\u00a0SOL_SOCKET,\u00a0SO_REUSEADDR));\n?>"}]},"socket_get_status":{"name":"socket_get_status","parameters":[],"return":{"type":"","values":[]},"short":"Alias of stream_get_meta_data()","examples":[]},"socket_getopt":{"name":"socket_getopt","parameters":[],"return":{"type":"","values":[]},"short":"Alias of socket_get_option()","examples":[]},"socket_getpeername":{"name":"socket_getpeername","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create() or socket_accept()."}],"return":{"type":"bool","values":{"0":"TRUE","1":"FALSE","3":"AF_INET","4":"AF_INET6","5":"AF_UNIX"}},"short":"Queries the remote side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type","examples":[]},"socket_getsockname":{"name":"socket_getsockname","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create() or socket_accept()."}],"return":{"type":"bool","values":{"0":"TRUE","1":"FALSE","3":"AF_INET","4":"AF_INET6","5":"AF_UNIX"}},"short":"Queries the local side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type","examples":[]},"socket_import_stream":{"name":"socket_import_stream","parameters":[{"type":"resource","name":"$stream","description":"The stream resource to import."}],"return":{"type":"resource","values":["FALSE","NULL"]},"short":"Import a stream","examples":[{"title":"Example #1 socket_import_stream() example","content":"<?php\n$stream\u00a0=\u00a0stream_socket_server(\"udp:\/\/0.0.0.0:58380\",\u00a0$errno,\u00a0$errstr,\u00a0STREAM_SERVER_BIND);\u00a0\n$sock\u00a0\u00a0\u00a0=\u00a0socket_import_stream($stream);\n?>"}]},"socket_last_error":{"name":"socket_last_error","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create()."}],"return":{"type":"int","values":[]},"short":"Returns the last error on the socket ","examples":[{"title":"Example #1 socket_last_error() example","content":"<?php\n$socket\u00a0=\u00a0@socket_create(AF_INET,\u00a0SOCK_STREAM,\u00a0SOL_TCP);\n\nif\u00a0($socket\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0$errorcode\u00a0=\u00a0socket_last_error();\n\u00a0\u00a0\u00a0\u00a0$errormsg\u00a0=\u00a0socket_strerror($errorcode);\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0die(\"Couldn't\u00a0create\u00a0socket:\u00a0[$errorcode]\u00a0$errormsg\");\n}\n?>"}]},"socket_listen":{"name":"socket_listen","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create()."},{"type":"int","name":"$backlog","default_value":"0","description":"A maximum of backlog incoming connections will be queued for processing. If a connection request arrives with the queue full the client may receive an error with an indication of ECONNREFUSED, or, if the underlying protocol supports retransmission, the request may be ignored so that retries may succeed.\n\nNote:\n The maximum number passed to the backlog parameter highly depends on the underlying platform. On Linux, it is silently truncated to SOMAXCONN. On win32, if passed SOMAXCONN, the underlying service provider responsible for the socket will set the backlog to a maximum reasonable value. There is no standard provision to find out the actual backlog value on this platform."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Listens for a connection on a socket","examples":[]},"socket_read":{"name":"socket_read","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create() or socket_accept()."},{"type":"int","name":"$length","description":"The maximum number of bytes read is specified by the length parameter. Otherwise you can use \\r, \\n, or \\0 to end reading (depending on the type parameter, see below)."},{"type":"int","name":"$type","default_value":"PHP_BINARY_READ","description":"Optional type parameter is a named constant:\n\nPHP_BINARY_READ (Default) - use the system recv() function. Safe for reading binary data.\n\n\n\n PHP_NORMAL_READ - reading stops at \\n or \\r."}],"return":{"type":"string","values":["FALSE"]},"short":"Reads a maximum of length bytes from a socket","examples":[]},"socket_recv":{"name":"socket_recv","parameters":[{"type":"resource","name":"$socket","description":"The socket must be a socket resource previously created by socket_create()."},{"type":"int","name":"$len","description":"Up to len bytes will be fetched from remote host."},{"type":"int","name":"$flags","description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator.\n\nPossible values for flags\n Flag Description MSG_OOB\n Process out-of-band data.\n MSG_PEEK\n Receive data from the beginning of the receive queue without removing it from the queue.\n MSG_WAITALL\n Block until at least len are received. However, if a signal is caught or the remote host disconnects, the function may return less data.\n MSG_DONTWAIT\n With this flag set, the function returns even if it would normally have blocked."}],"return":{"type":"int","values":["FALSE"]},"short":"Receives data from a connected socket ","examples":[{"title":"Example #1 socket_recv() example","content":"This example is a simple rewrite of the first example from\n     Examples to\n     use socket_recv()."}]},"socket_recvfrom":{"name":"socket_recvfrom","parameters":[{"type":"resource","name":"$socket","description":"The socket must be a socket resource previously created by socket_create()."},{"type":"int","name":"$len","description":"Up to len bytes will be fetched from remote host."},{"type":"int","name":"$flags","description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator.\n\nPossible values for flags\n Flag Description MSG_OOB\n Process out-of-band data.\n MSG_PEEK\n Receive data from the beginning of the receive queue without removing it from the queue.\n MSG_WAITALL\n Block until at least len are received. However, if a signal is caught or the remote host disconnects, the function may return less data.\n MSG_DONTWAIT\n With this flag set, the function returns even if it would normally have blocked."}],"return":{"type":"int","values":["FALSE"]},"short":"Receives data from a socket whether or not it is connection-oriented","examples":[{"title":"Example #1 socket_recvfrom() example","content":"<?php\nerror_reporting(E_ALL\u00a0|\u00a0E_STRICT);\n\n$socket\u00a0=\u00a0socket_create(AF_INET,\u00a0SOCK_DGRAM,\u00a0SOL_UDP);\nsocket_bind($socket,\u00a0'127.0.0.1',\u00a01223);\n\n$from\u00a0=\u00a0'';\n$port\u00a0=\u00a00;\nsocket_recvfrom($socket,\u00a0$buf,\u00a012,\u00a00,\u00a0$from,\u00a0$port);\n\necho\u00a0\"Received\u00a0$buf\u00a0from\u00a0remote\u00a0address\u00a0$from\u00a0and\u00a0remote\u00a0port\u00a0$port\"\u00a0.\u00a0PHP_EOL;\n?>"}]},"socket_recvmsg":{"name":"socket_recvmsg","parameters":[{"type":"resource","name":"$socket","description":""},{"type":"int","name":"$flags","default_value":"0","description":""}],"return":{"type":"int","values":[]},"short":"Read a message","examples":[]},"socket_select":{"name":"socket_select","parameters":[{"type":"int","name":"$tv_sec","description":"The tv_sec and tv_usec together form the timeout parameter. The timeout is an upper bound on the amount of time elapsed before socket_select() return. tv_sec may be zero , causing socket_select() to return immediately. This is useful for polling. If tv_sec is NULL (no timeout), socket_select() can block indefinitely."},{"type":"int","name":"$tv_usec","default_value":"0","description":""}],"return":{"type":"int","values":["FALSE"]},"short":"Runs the select() system call on the given arrays of sockets with a specified timeout","examples":[{"title":"Example #3 socket_select() example","content":"<?php\n\/*\u00a0Prepare\u00a0the\u00a0read\u00a0array\u00a0*\/\n$read\u00a0\u00a0\u00a0=\u00a0array($socket1,\u00a0$socket2);\n$write\u00a0\u00a0=\u00a0NULL;\n$except\u00a0=\u00a0NULL;\n$num_changed_sockets\u00a0=\u00a0socket_select($read,\u00a0$write,\u00a0$except,\u00a00);\n\nif\u00a0($num_changed_sockets\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/*\u00a0Error\u00a0handling\u00a0*\/\n}\u00a0else\u00a0if\u00a0($num_changed_sockets\u00a0>\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/*\u00a0At\u00a0least\u00a0at\u00a0one\u00a0of\u00a0the\u00a0sockets\u00a0something\u00a0interesting\u00a0happened\u00a0*\/\n}\n?>"}]},"socket_send":{"name":"socket_send","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create() or socket_accept()."},{"type":"string","name":"$buf","description":"A buffer containing the data that will be sent to the remote host."},{"type":"int","name":"$len","description":"The number of bytes that will be sent to the remote host from buf."},{"type":"int","name":"$flags","description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator.\n\nPossible values for flags\n MSG_OOB\n Send OOB (out-of-band) data.\n MSG_EOR\n Indicate a record mark. The sent data completes the record.\n MSG_EOF\n Close the sender side of the socket and include an appropriate notification of this at the end of the sent data. The sent data completes the transaction.\n MSG_DONTROUTE\n Bypass routing, use direct interface."}],"return":{"type":"int","values":["FALSE"]},"short":"Sends data to a connected socket","examples":[]},"socket_sendmsg":{"name":"socket_sendmsg","parameters":[{"type":"resource","name":"$socket","description":""},{"type":"array","name":"$message","description":""},{"type":"int","name":"$flags","default_value":"0","description":""}],"return":{"type":"int","values":["FALSE"]},"short":"Send a message","examples":[]},"socket_sendto":{"name":"socket_sendto","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created using socket_create()."},{"type":"string","name":"$buf","description":"The sent data will be taken from buffer buf."},{"type":"int","name":"$len","description":"len bytes from buf will be sent."},{"type":"int","name":"$flags","description":"The value of flags can be any combination of the following flags, joined with the binary OR (|) operator.\n\nPossible values for flags\n MSG_OOB\n Send OOB (out-of-band) data.\n MSG_EOR\n Indicate a record mark. The sent data completes the record.\n MSG_EOF\n Close the sender side of the socket and include an appropriate notification of this at the end of the sent data. The sent data completes the transaction.\n MSG_DONTROUTE\n Bypass routing, use direct interface."},{"type":"string","name":"$addr","description":"IP address of the remote host."},{"type":"int","name":"$port","default_value":"0","description":"port is the remote port number at which the data will be sent."}],"return":{"type":"int","values":["FALSE"]},"short":"Sends a message to a socket, whether it is connected or not ","examples":[{"title":"Example #1 socket_sendto() Example","content":"<?php\n\u00a0\u00a0\u00a0\u00a0$sock\u00a0=\u00a0socket_create(AF_INET,\u00a0SOCK_DGRAM,\u00a0SOL_UDP);\n\n\u00a0\u00a0\u00a0\u00a0$msg\u00a0=\u00a0\"Ping\u00a0!\";\n\u00a0\u00a0\u00a0\u00a0$len\u00a0=\u00a0strlen($msg);\n\n\u00a0\u00a0\u00a0\u00a0socket_sendto($sock,\u00a0$msg,\u00a0$len,\u00a00,\u00a0'127.0.0.1',\u00a01223);\n\u00a0\u00a0\u00a0\u00a0socket_close($sock);\n?>"}]},"socket_set_block":{"name":"socket_set_block","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create() or socket_accept()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sets blocking mode on a socket resource","examples":[{"title":"Example #1 socket_set_block() example","content":"<?php\n$socket\u00a0=\u00a0socket_create_listen(1223);\nsocket_set_block($socket);\n\nsocket_accept($socket);\n?>"}]},"socket_set_blocking":{"name":"socket_set_blocking","parameters":[],"return":{"type":"","values":[]},"short":"Alias of stream_set_blocking()","examples":[]},"socket_set_nonblock":{"name":"socket_set_nonblock","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create() or socket_accept()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sets nonblocking mode for file descriptor fd ","examples":[{"title":"Example #1 socket_set_nonblock() example","content":"<?php\n$socket\u00a0=\u00a0socket_create_listen(1223);\nsocket_set_nonblock($socket);\n\nsocket_accept($socket);\n?>"}]},"socket_set_option":{"name":"socket_set_option","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create() or socket_accept()."},{"type":"int","name":"$level","description":"The level parameter specifies the protocol level at which the option resides. For example, to retrieve options at the socket level, a level parameter of SOL_SOCKET would be used. Other levels, such as TCP, can be used by specifying the protocol number of that level. Protocol numbers can be found by using the getprotobyname() function."},{"type":"int","name":"$optname","description":"The available socket options are the same as those for the socket_get_option() function."},{"type":"mixed","name":"$optval","description":"The option value."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sets socket options for the socket","examples":[{"title":"Example #1 socket_set_option() example","content":"<?php\n$socket\u00a0=\u00a0socket_create(AF_INET,\u00a0SOCK_STREAM,\u00a0SOL_TCP);\n\nif\u00a0(!is_resource($socket))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Unable\u00a0to\u00a0create\u00a0socket:\u00a0'.\u00a0socket_strerror(socket_last_error())\u00a0.\u00a0PHP_EOL;\n}\n\nif\u00a0(!socket_set_option($socket,\u00a0SOL_SOCKET,\u00a0SO_REUSEADDR,\u00a01))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Unable\u00a0to\u00a0set\u00a0option\u00a0on\u00a0socket:\u00a0'.\u00a0socket_strerror(socket_last_error())\u00a0.\u00a0PHP_EOL;\n}\n\nif\u00a0(!socket_bind($socket,\u00a0'127.0.0.1',\u00a01223))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Unable\u00a0to\u00a0bind\u00a0socket:\u00a0'.\u00a0socket_strerror(socket_last_error())\u00a0.\u00a0PHP_EOL;\n}\n\n$rval\u00a0=\u00a0socket_get_option($socket,\u00a0SOL_SOCKET,\u00a0SO_REUSEADDR);\n\nif\u00a0($rval\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Unable\u00a0to\u00a0get\u00a0socket\u00a0option:\u00a0'.\u00a0socket_strerror(socket_last_error())\u00a0.\u00a0PHP_EOL;\n}\u00a0else\u00a0if\u00a0($rval\u00a0!==\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'SO_REUSEADDR\u00a0is\u00a0set\u00a0on\u00a0socket\u00a0!'\u00a0.\u00a0PHP_EOL;\n}\n?>"}]},"socket_set_timeout":{"name":"socket_set_timeout","parameters":[],"return":{"type":"","values":[]},"short":"Alias of stream_set_timeout()","examples":[]},"socket_setopt":{"name":"socket_setopt","parameters":[],"return":{"type":"","values":[]},"short":"Alias of socket_set_option()","examples":[]},"socket_shutdown":{"name":"socket_shutdown","parameters":[{"type":"resource","name":"$socket","description":"A valid socket resource created with socket_create()."},{"type":"int","name":"$how","default_value":"2","description":"The value of how can be one of the following:\n\npossible values for how\n 0\n Shutdown socket reading\n 1\n Shutdown socket writing\n 2\n Shutdown socket reading and writing"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Shuts down a socket for receiving, sending, or both","examples":[]},"socket_strerror":{"name":"socket_strerror","parameters":[{"type":"int","name":"$errno","description":"A valid socket error number, likely produced by socket_last_error()."}],"return":{"type":"string","values":[]},"short":"Return a string describing a socket error","examples":[{"title":"Example #1 socket_strerror() example","content":"<?php\nif\u00a0(false\u00a0==\u00a0($socket\u00a0=\u00a0@socket_create(AF_INET,\u00a0SOCK_STREAM,\u00a0SOL_TCP)))\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"socket_create()\u00a0failed:\u00a0reason:\u00a0\"\u00a0.\u00a0socket_strerror(socket_last_error())\u00a0.\u00a0\"\\n\";\n}\n\nif\u00a0(false\u00a0==\u00a0(@socket_bind($socket,\u00a0'127.0.0.1',\u00a080)))\u00a0{\n\u00a0\u00a0\u00a0echo\u00a0\"socket_bind()\u00a0failed:\u00a0reason:\u00a0\"\u00a0.\u00a0socket_strerror(socket_last_error($socket))\u00a0.\u00a0\"\\n\";\n}\n?>"}]},"socket_write":{"name":"socket_write","parameters":[{"type":"resource","name":"$socket","description":""},{"type":"string","name":"$buffer","description":"The buffer to be written."},{"type":"int","name":"$length","default_value":"0","description":"The optional parameter length can specify an alternate length of bytes written to the socket. If this length is greater than the buffer length, it is silently truncated to the length of the buffer."}],"return":{"type":"int","values":["FALSE"]},"short":"Write to a socket","examples":[]},"sodium_add":{"name":"sodium_add","parameters":[{"type":"string","name":"$addv","description":""}],"return":{"type":"void","values":[]},"short":"Add large numbers","examples":[]},"sodium_base642bin":{"name":"sodium_base642bin","parameters":[{"type":"string","name":"$b64","description":""},{"type":"int","name":"$id","description":""},{"type":"string","name":"$ignore","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_bin2base64":{"name":"sodium_bin2base64","parameters":[{"type":"string","name":"$bin","description":""},{"type":"int","name":"$id","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_bin2hex":{"name":"sodium_bin2hex","parameters":[{"type":"string","name":"$bin","description":""}],"return":{"type":"string","values":[]},"short":"Encode to hexadecimal","examples":[]},"sodium_compare":{"name":"sodium_compare","parameters":[{"type":"string","name":"$buf1","description":""},{"type":"string","name":"$buf2","description":""}],"return":{"type":"int","values":[]},"short":"Compare large numbers","examples":[]},"sodium_crypto_aead_aes256gcm_decrypt":{"name":"sodium_crypto_aead_aes256gcm_decrypt","parameters":[{"type":"string","name":"$ciphertext","description":""},{"type":"string","name":"$ad","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Decrypt in combined mode with precalculation","examples":[]},"sodium_crypto_aead_aes256gcm_encrypt":{"name":"sodium_crypto_aead_aes256gcm_encrypt","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$ad","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Encrypt in combined mode with precalculation","examples":[]},"sodium_crypto_aead_aes256gcm_is_available":{"name":"sodium_crypto_aead_aes256gcm_is_available","parameters":[],"return":{"type":"bool","values":[]},"short":"Check if hardware supports AES256-GCM","examples":[]},"sodium_crypto_aead_aes256gcm_keygen":{"name":"sodium_crypto_aead_aes256gcm_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Get random bytes for key","examples":[]},"sodium_crypto_aead_chacha20poly1305_decrypt":{"name":"sodium_crypto_aead_chacha20poly1305_decrypt","parameters":[{"type":"string","name":"$ciphertext","description":""},{"type":"string","name":"$ad","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Verify that the ciphertext includes a valid tag","examples":[]},"sodium_crypto_aead_chacha20poly1305_encrypt":{"name":"sodium_crypto_aead_chacha20poly1305_encrypt","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$ad","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Encrypt a message","examples":[]},"sodium_crypto_aead_chacha20poly1305_ietf_decrypt":{"name":"sodium_crypto_aead_chacha20poly1305_ietf_decrypt","parameters":[{"type":"string","name":"$ciphertext","description":""},{"type":"string","name":"$ad","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Verify that the ciphertext includes a valid tag","examples":[]},"sodium_crypto_aead_chacha20poly1305_ietf_encrypt":{"name":"sodium_crypto_aead_chacha20poly1305_ietf_encrypt","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$ad","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Encrypt a message","examples":[]},"sodium_crypto_aead_chacha20poly1305_ietf_keygen":{"name":"sodium_crypto_aead_chacha20poly1305_ietf_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Get random bytes for key","examples":[]},"sodium_crypto_aead_chacha20poly1305_keygen":{"name":"sodium_crypto_aead_chacha20poly1305_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Get random bytes for key","examples":[]},"sodium_crypto_aead_xchacha20poly1305_ietf_decrypt":{"name":"sodium_crypto_aead_xchacha20poly1305_ietf_decrypt","parameters":[{"type":"string","name":"$ciphertext","description":""},{"type":"string","name":"$ad","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_aead_xchacha20poly1305_ietf_encrypt":{"name":"sodium_crypto_aead_xchacha20poly1305_ietf_encrypt","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$ad","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_aead_xchacha20poly1305_ietf_keygen":{"name":"sodium_crypto_aead_xchacha20poly1305_ietf_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_auth":{"name":"sodium_crypto_auth","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Compute a tag for the message","examples":[]},"sodium_crypto_auth_keygen":{"name":"sodium_crypto_auth_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Get random bytes for key","examples":[]},"sodium_crypto_auth_verify":{"name":"sodium_crypto_auth_verify","parameters":[{"type":"string","name":"$signature","description":""},{"type":"string","name":"$msg","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"bool","values":[]},"short":"Verifies that the tag is valid for the message","examples":[]},"sodium_crypto_box":{"name":"sodium_crypto_box","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Encrypt a message","examples":[]},"sodium_crypto_box_keypair":{"name":"sodium_crypto_box_keypair","parameters":[],"return":{"type":"string","values":[]},"short":"Randomly generate a secret key and a corresponding public key","examples":[]},"sodium_crypto_box_keypair_from_secretkey_and_publickey":{"name":"sodium_crypto_box_keypair_from_secretkey_and_publickey","parameters":[{"type":"string","name":"$secret_key","description":""},{"type":"string","name":"$public_key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_box_open":{"name":"sodium_crypto_box_open","parameters":[{"type":"string","name":"$ciphertext","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Verify and decrypt a ciphertext","examples":[]},"sodium_crypto_box_publickey":{"name":"sodium_crypto_box_publickey","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_box_publickey_from_secretkey":{"name":"sodium_crypto_box_publickey_from_secretkey","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_box_seal":{"name":"sodium_crypto_box_seal","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Encrypt a message","examples":[]},"sodium_crypto_box_seal_open":{"name":"sodium_crypto_box_seal_open","parameters":[{"type":"string","name":"$ciphertext","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Decrypt the ciphertext","examples":[]},"sodium_crypto_box_secretkey":{"name":"sodium_crypto_box_secretkey","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_box_seed_keypair":{"name":"sodium_crypto_box_seed_keypair","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Deterministically derive the key pair from a single key","examples":[]},"sodium_crypto_generichash":{"name":"sodium_crypto_generichash","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$key","description":""},{"type":"int","name":"$length","default_value":"SODIUM_CRYPTO_GENERICHASH_BYTES","description":""}],"return":{"type":"string","values":[]},"short":"Get a hash of the message","examples":[]},"sodium_crypto_generichash_final":{"name":"sodium_crypto_generichash_final","parameters":[{"type":"int","name":"$length","default_value":"SODIUM_CRYPTO_GENERICHASH_BYTES","description":""}],"return":{"type":"string","values":[]},"short":"Complete the hash","examples":[]},"sodium_crypto_generichash_init":{"name":"sodium_crypto_generichash_init","parameters":[{"type":"string","name":"$key","description":""},{"type":"int","name":"$length","default_value":"SODIUM_CRYPTO_GENERICHASH_BYTES","description":""}],"return":{"type":"string","values":[]},"short":"Initialize a hash","examples":[]},"sodium_crypto_generichash_keygen":{"name":"sodium_crypto_generichash_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Get random bytes for key","examples":[]},"sodium_crypto_generichash_update":{"name":"sodium_crypto_generichash_update","parameters":[{"type":"string","name":"$msg","description":""}],"return":{"type":"bool","values":[]},"short":"Add message to a hash","examples":[]},"sodium_crypto_kdf_derive_from_key":{"name":"sodium_crypto_kdf_derive_from_key","parameters":[{"type":"int","name":"$subkey_len","description":""},{"type":"int","name":"$subkey_id","description":""},{"type":"string","name":"$context","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Derive a subkey","examples":[]},"sodium_crypto_kdf_keygen":{"name":"sodium_crypto_kdf_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Get random bytes for key","examples":[]},"sodium_crypto_kx_client_session_keys":{"name":"sodium_crypto_kx_client_session_keys","parameters":[{"type":"string","name":"$client_keypair","description":""},{"type":"string","name":"$server_key","description":""}],"return":{"type":"array","values":[]},"short":"Description","examples":[]},"sodium_crypto_kx_keypair":{"name":"sodium_crypto_kx_keypair","parameters":[],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_kx_publickey":{"name":"sodium_crypto_kx_publickey","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_kx_secretkey":{"name":"sodium_crypto_kx_secretkey","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_kx_seed_keypair":{"name":"sodium_crypto_kx_seed_keypair","parameters":[{"type":"string","name":"$string","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_kx_server_session_keys":{"name":"sodium_crypto_kx_server_session_keys","parameters":[{"type":"string","name":"$server_keypair","description":""},{"type":"string","name":"$client_key","description":""}],"return":{"type":"array","values":[]},"short":"Description","examples":[]},"sodium_crypto_pwhash":{"name":"sodium_crypto_pwhash","parameters":[{"type":"int","name":"$length","description":""},{"type":"string","name":"$password","description":""},{"type":"string","name":"$salt","description":""},{"type":"int","name":"$opslimit","description":""},{"type":"int","name":"$memlimit","description":""},{"type":"int","name":"$alg","description":""}],"return":{"type":"string","values":[]},"short":"Derive a key from a password","examples":[]},"sodium_crypto_pwhash_scryptsalsa208sha256":{"name":"sodium_crypto_pwhash_scryptsalsa208sha256","parameters":[{"type":"int","name":"$length","description":""},{"type":"string","name":"$password","description":""},{"type":"string","name":"$salt","description":""},{"type":"int","name":"$opslimit","description":""},{"type":"int","name":"$memlimit","description":""}],"return":{"type":"string","values":[]},"short":"Derives a key from a password","examples":[]},"sodium_crypto_pwhash_scryptsalsa208sha256_str":{"name":"sodium_crypto_pwhash_scryptsalsa208sha256_str","parameters":[{"type":"string","name":"$password","description":""},{"type":"int","name":"$opslimit","description":""},{"type":"int","name":"$memlimit","description":""}],"return":{"type":"string","values":[]},"short":"Get an ASCII encoded hash","examples":[]},"sodium_crypto_pwhash_scryptsalsa208sha256_str_verify":{"name":"sodium_crypto_pwhash_scryptsalsa208sha256_str_verify","parameters":[{"type":"string","name":"$hash","description":""},{"type":"string","name":"$password","description":""}],"return":{"type":"bool","values":[]},"short":"Verify that the password is a valid password verification string","examples":[]},"sodium_crypto_pwhash_str":{"name":"sodium_crypto_pwhash_str","parameters":[{"type":"string","name":"$password","description":""},{"type":"int","name":"$opslimit","description":""},{"type":"int","name":"$memlimit","description":""}],"return":{"type":"string","values":[]},"short":"Get an ASCII encoded hash","examples":[]},"sodium_crypto_pwhash_str_needs_rehash":{"name":"sodium_crypto_pwhash_str_needs_rehash","parameters":[{"type":"string","name":"$password","description":""},{"type":"int","name":"$opslimit","description":""},{"type":"int","name":"$memlimit","description":""}],"return":{"type":"bool","values":[]},"short":"Description","examples":[]},"sodium_crypto_pwhash_str_verify":{"name":"sodium_crypto_pwhash_str_verify","parameters":[{"type":"string","name":"$hash","description":""},{"type":"string","name":"$password","description":""}],"return":{"type":"bool","values":[]},"short":"Verify that hash is a valid password verification string","examples":[]},"sodium_crypto_scalarmult":{"name":"sodium_crypto_scalarmult","parameters":[{"type":"string","name":"$n","description":""},{"type":"string","name":"$p","description":""}],"return":{"type":"string","values":[]},"short":"Compute a shared secret given a user's secret key and another user's public key","examples":[]},"sodium_crypto_scalarmult_base":{"name":"sodium_crypto_scalarmult_base","parameters":[],"return":{"type":"","values":[]},"short":"Alias of sodium_crypto_box_publickey_from_secretkey()","examples":[]},"sodium_crypto_secretbox":{"name":"sodium_crypto_secretbox","parameters":[{"type":"string","name":"$string","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Encrypt a message","examples":[]},"sodium_crypto_secretbox_keygen":{"name":"sodium_crypto_secretbox_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Get random bytes for key","examples":[]},"sodium_crypto_secretbox_open":{"name":"sodium_crypto_secretbox_open","parameters":[{"type":"string","name":"$ciphertext","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Verify and decrypt a ciphertext","examples":[]},"sodium_crypto_secretstream_xchacha20poly1305_init_pull":{"name":"sodium_crypto_secretstream_xchacha20poly1305_init_pull","parameters":[{"type":"string","name":"$header","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_secretstream_xchacha20poly1305_init_push":{"name":"sodium_crypto_secretstream_xchacha20poly1305_init_push","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"array","values":[]},"short":"Description","examples":[]},"sodium_crypto_secretstream_xchacha20poly1305_keygen":{"name":"sodium_crypto_secretstream_xchacha20poly1305_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_secretstream_xchacha20poly1305_pull":{"name":"sodium_crypto_secretstream_xchacha20poly1305_pull","parameters":[{"type":"string","name":"$c","description":""},{"type":"string","name":"$ad","description":""}],"return":{"type":"array","values":[]},"short":"Description","examples":[]},"sodium_crypto_secretstream_xchacha20poly1305_push":{"name":"sodium_crypto_secretstream_xchacha20poly1305_push","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$ad","description":""},{"type":"int","name":"$tag","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_secretstream_xchacha20poly1305_rekey":{"name":"sodium_crypto_secretstream_xchacha20poly1305_rekey","parameters":[],"return":{"type":"void","values":[]},"short":"Description","examples":[]},"sodium_crypto_shorthash":{"name":"sodium_crypto_shorthash","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Compute a fixed-size fingerprint for the message","examples":[]},"sodium_crypto_shorthash_keygen":{"name":"sodium_crypto_shorthash_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Get random bytes for key","examples":[]},"sodium_crypto_sign":{"name":"sodium_crypto_sign","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$secret_key","description":""}],"return":{"type":"string","values":[]},"short":"Sign a message","examples":[]},"sodium_crypto_sign_detached":{"name":"sodium_crypto_sign_detached","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$keypair","description":""}],"return":{"type":"string","values":[]},"short":"Sign the message","examples":[]},"sodium_crypto_sign_ed25519_pk_to_curve25519":{"name":"sodium_crypto_sign_ed25519_pk_to_curve25519","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Convert an Ed25519 public key to a Curve25519 public key","examples":[]},"sodium_crypto_sign_ed25519_sk_to_curve25519":{"name":"sodium_crypto_sign_ed25519_sk_to_curve25519","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Convert an Ed25519 secret key to a Curve25519 secret key","examples":[]},"sodium_crypto_sign_keypair":{"name":"sodium_crypto_sign_keypair","parameters":[],"return":{"type":"string","values":[]},"short":"Randomly generate a secret key and a corresponding public key","examples":[]},"sodium_crypto_sign_keypair_from_secretkey_and_publickey":{"name":"sodium_crypto_sign_keypair_from_secretkey_and_publickey","parameters":[{"type":"string","name":"$secret_key","description":""},{"type":"string","name":"$public_key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_sign_open":{"name":"sodium_crypto_sign_open","parameters":[{"type":"string","name":"$string","description":""},{"type":"string","name":"$keypair","description":""}],"return":{"type":"string","values":[]},"short":"Check that the signed message has a valid signature","examples":[]},"sodium_crypto_sign_publickey":{"name":"sodium_crypto_sign_publickey","parameters":[{"type":"string","name":"$keypair","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_sign_publickey_from_secretkey":{"name":"sodium_crypto_sign_publickey_from_secretkey","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Extract the public key from the secret key","examples":[]},"sodium_crypto_sign_secretkey":{"name":"sodium_crypto_sign_secretkey","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Description","examples":[]},"sodium_crypto_sign_seed_keypair":{"name":"sodium_crypto_sign_seed_keypair","parameters":[{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Deterministically derive the key pair from a single key","examples":[]},"sodium_crypto_sign_verify_detached":{"name":"sodium_crypto_sign_verify_detached","parameters":[{"type":"string","name":"$signature","description":""},{"type":"string","name":"$msg","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"bool","values":[]},"short":"Verify signature for the message","examples":[]},"sodium_crypto_stream":{"name":"sodium_crypto_stream","parameters":[{"type":"int","name":"$length","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Generate a deterministic sequence of bytes from a seed","examples":[]},"sodium_crypto_stream_keygen":{"name":"sodium_crypto_stream_keygen","parameters":[],"return":{"type":"string","values":[]},"short":"Get random bytes for key","examples":[]},"sodium_crypto_stream_xor":{"name":"sodium_crypto_stream_xor","parameters":[{"type":"string","name":"$msg","description":""},{"type":"string","name":"$nonce","description":""},{"type":"string","name":"$key","description":""}],"return":{"type":"string","values":[]},"short":"Encrypt a message","examples":[]},"sodium_hex2bin":{"name":"sodium_hex2bin","parameters":[{"type":"string","name":"$hex","description":""},{"type":"string","name":"$ignore","description":""}],"return":{"type":"string","values":[]},"short":"Decode from hexadecimal","examples":[]},"sodium_increment":{"name":"sodium_increment","parameters":[],"return":{"type":"void","values":[]},"short":"Increment large number","examples":[]},"sodium_memcmp":{"name":"sodium_memcmp","parameters":[{"type":"string","name":"$buf1","description":""},{"type":"string","name":"$buf2","description":""}],"return":{"type":"int","values":[]},"short":"Test for equality in constant-time","examples":[]},"sodium_memzero":{"name":"sodium_memzero","parameters":[],"return":{"type":"void","values":[]},"short":"Overwrite buf with zeros","examples":[]},"sodium_pad":{"name":"sodium_pad","parameters":[{"type":"string","name":"$unpadded","description":""},{"type":"int","name":"$length","description":""}],"return":{"type":"string","values":[]},"short":"Add padding data","examples":[]},"sodium_unpad":{"name":"sodium_unpad","parameters":[{"type":"string","name":"$padded","description":""},{"type":"int","name":"$length","description":""}],"return":{"type":"string","values":[]},"short":"Remove padding data","examples":[]},"sort":{"name":"sort","parameters":[{"type":"int","name":"$sort_flags","default_value":"SORT_REGULAR","description":"The optional second parameter sort_flags may be used to modify the sorting behavior using these values:\n\nSorting type flags:\n\nSORT_REGULAR - compare items normally (don't change types)\n\n SORT_NUMERIC - compare items numerically\n\n SORT_STRING - compare items as strings\n\n\n SORT_LOCALE_STRING - compare items as strings, based on the current locale. It uses the locale, which can be changed using setlocale()\n\n\n\n SORT_NATURAL - compare items as strings using \"natural ordering\" like natsort()\n\n\n\n SORT_FLAG_CASE - can be combined (bitwise OR) with SORT_STRING or SORT_NATURAL to sort strings case-insensitively"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array","examples":[{"title":"Example #1 sort() example","content":"<?php\n\n$fruits\u00a0=\u00a0array(\"lemon\",\u00a0\"orange\",\u00a0\"banana\",\u00a0\"apple\");\nsort($fruits);\nforeach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"fruits[\"\u00a0.\u00a0$key\u00a0.\u00a0\"]\u00a0=\u00a0\"\u00a0.\u00a0$val\u00a0.\u00a0\"\\n\";\n}\n\n?>"},{"title":"Example #2 sort() example using case-insensitive natural\n    ordering","content":"<?php\n\n$fruits\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0\"Orange1\",\u00a0\"orange2\",\u00a0\"Orange3\",\u00a0\"orange20\"\n);\nsort($fruits,\u00a0SORT_NATURAL\u00a0|\u00a0SORT_FLAG_CASE);\nforeach\u00a0($fruits\u00a0as\u00a0$key\u00a0=>\u00a0$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"fruits[\"\u00a0.\u00a0$key\u00a0.\u00a0\"]\u00a0=\u00a0\"\u00a0.\u00a0$val\u00a0.\u00a0\"\\n\";\n}\n\n?>"}]},"soundex":{"name":"soundex","parameters":[{"type":"string","name":"$str","description":"The input string."}],"return":{"type":"string","values":[]},"short":"Calculate the soundex key of a string","examples":[{"title":"Example #1 Soundex Examples","content":"<?php\nsoundex(\"Euler\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0==\u00a0soundex(\"Ellery\");\u00a0\u00a0\u00a0\u00a0\/\/\u00a0E460\nsoundex(\"Gauss\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0==\u00a0soundex(\"Ghosh\");\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0G200\nsoundex(\"Hilbert\")\u00a0\u00a0\u00a0\u00a0\u00a0==\u00a0soundex(\"Heilbronn\");\u00a0\/\/\u00a0H416\nsoundex(\"Knuth\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0==\u00a0soundex(\"Kant\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0K530\nsoundex(\"Lloyd\")\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0==\u00a0soundex(\"Ladd\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0L300\nsoundex(\"Lukasiewicz\")\u00a0==\u00a0soundex(\"Lissajous\");\u00a0\/\/\u00a0L222\n?>"}]},"spl_autoload":{"name":"spl_autoload","parameters":[{"type":"string","name":"$class_name","description":"The lowercased name of the class (and namespace) being instantiated."},{"type":"string","name":"$file_extensions","default_value":"spl_autoload_extensions()","description":"By default it checks all include paths to contain filenames built up by the lowercase class name appended by the filename extensions .inc and .php."}],"return":{"type":"void","values":[]},"short":"Default implementation for __autoload()","examples":[]},"spl_autoload_call":{"name":"spl_autoload_call","parameters":[{"type":"string","name":"$class_name","description":"The class name being searched."}],"return":{"type":"void","values":[]},"short":"Try all registered __autoload() functions to load the requested class","examples":[]},"spl_autoload_extensions":{"name":"spl_autoload_extensions","parameters":[{"type":"string","name":"$file_extensions","description":"When calling without an argument, it simply returns the current list of extensions each separated by comma. To modify the list of file extensions, simply invoke the functions with the new list of file extensions to use in a single string with each extensions separated by comma."}],"return":{"type":"string","values":[]},"short":"Register and return default file extensions for spl_autoload","examples":[]},"spl_autoload_functions":{"name":"spl_autoload_functions","parameters":[],"return":{"type":"array","values":["FALSE"]},"short":"Return all registered __autoload() functions","examples":[]},"spl_autoload_register":{"name":"spl_autoload_register","parameters":[{"type":"callable","name":"$autoload_function","description":"The autoload function being registered. If no parameter is provided, then the default implementation of spl_autoload() will be registered."},{"type":"bool","name":"$throw","default_value":"TRUE","description":"This parameter specifies whether spl_autoload_register() should throw exceptions when the autoload_function cannot be registered."},{"type":"bool","name":"$prepend","default_value":"FALSE","description":"If true, spl_autoload_register() will prepend the autoloader on the autoload queue instead of appending it."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Register given function as __autoload() implementation","examples":[{"title":"Example #1 spl_autoload_register() as a replacement for an __autoload() function","content":"<?php\n\n\/\/\u00a0function\u00a0__autoload($class)\u00a0{\n\/\/\u00a0\u00a0\u00a0\u00a0\u00a0include\u00a0'classes\/'\u00a0.\u00a0$class\u00a0.\u00a0'.class.php';\n\/\/\u00a0}\n\nfunction\u00a0my_autoloader($class)\u00a0{\n\u00a0\u00a0\u00a0\u00a0include\u00a0'classes\/'\u00a0.\u00a0$class\u00a0.\u00a0'.class.php';\n}\n\nspl_autoload_register('my_autoloader');\n\n\/\/\u00a0Or,\u00a0using\u00a0an\u00a0anonymous\u00a0function\u00a0as\u00a0of\u00a0PHP\u00a05.3.0\nspl_autoload_register(function\u00a0($class)\u00a0{\n\u00a0\u00a0\u00a0\u00a0include\u00a0'classes\/'\u00a0.\u00a0$class\u00a0.\u00a0'.class.php';\n});\n\n?>"},{"title":"Example #2 spl_autoload_register() example where the class is not loaded","content":"<?php\n\nnamespace\u00a0Foobar;\n\nclass\u00a0Foo\u00a0{\n\u00a0\u00a0\u00a0\u00a0static\u00a0public\u00a0function\u00a0test($name)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print\u00a0'[['.\u00a0$name\u00a0.']]';\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nspl_autoload_register(__NAMESPACE__\u00a0.'\\Foo::test');\u00a0\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0\n\nnew\u00a0InexistentClass;\n\n?>"}]},"spl_autoload_unregister":{"name":"spl_autoload_unregister","parameters":[{"type":"mixed","name":"$autoload_function","description":"The autoload function being unregistered."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Unregister given function as __autoload() implementation","examples":[]},"spl_classes":{"name":"spl_classes","parameters":[],"return":{"type":"array","values":[]},"short":"Return available SPL classes","examples":[{"title":"Example #1 spl_classes() example","content":"<?php\n\nprint_r(spl_classes());\n\n?>"}]},"spl_object_hash":{"name":"spl_object_hash","parameters":[{"type":"object","name":"$obj"}],"return":{"type":"string","values":[]},"short":"\n   Return hash id for given object\n  ","examples":[{"title":"Example #1 A spl_object_hash() example","content":"<?php\n$id\u00a0=\u00a0spl_object_hash($object);\n$storage[$id]\u00a0=\u00a0$object;\n?>"}]},"spl_object_id":{"name":"spl_object_id","parameters":[{"type":"object","name":"$obj"}],"return":{"type":"int","values":[]},"short":"\n   Return the integer object handle for given object\n  ","examples":[{"title":"Example #1 A spl_object_id() example","content":"<?php\n$id\u00a0=\u00a0spl_object_id($object);\n$storage[$id]\u00a0=\u00a0$object;\n?>"}]},"sprintf":{"name":"sprintf","parameters":[{"type":"string","name":"$format","description":"The format string is composed of zero or more directives: ordinary characters (excluding %) that are copied directly to the result and conversion specifications, each of which results in fetching its own parameter.  This applies to both sprintf() and printf().\n\nEach conversion specification consists of a percent sign (%), followed by one or more of these elements, in order:\n\nAn optional sign specifier that forces a sign (- or +) to be used on a number. By default, only the - sign is used on a number if it's negative. This specifier forces positive numbers to have the + sign attached as well.\n\n\n\n An optional padding specifier that says what character will be used for padding the results to the right string size.  This may be a space character or a 0 (zero character).  The default is to pad with spaces.  An alternate padding character can be specified by prefixing it with a single quote ('). See the examples below.\n\n\n\n An optional alignment specifier that says if the result should be left-justified or right-justified. The default is right-justified; a - character here will make it left-justified.\n\n\n\n An optional number, a width specifier that says how many characters (minimum) this conversion should result in.\n\n\n\n An optional precision specifier in the form of a period (.) followed by an optional decimal digit string that says how many decimal digits should be displayed for floating-point numbers. When using this specifier on a string, it acts as a cutoff point, setting a maximum character limit to the string. Additionally, the character to use when padding a number may optionally be specified between the period and the digit.\n\n\n\n A type specifier that says what type the argument data should be treated as.  Possible types:\n % - a literal percent character. No argument is required.\n\n b - the argument is treated as an integer and presented as a binary number.\n\n c - the argument is treated as an integer and presented as the character with that ASCII value.\n\n d - the argument is treated as an integer and presented as a (signed) decimal number.\n\n e - the argument is treated as scientific notation (e.g. 1.2e+2). The precision specifier stands for the number of digits after the decimal point since PHP 5.2.1. In earlier versions, it was taken as number of significant digits (one less).\n\n E - like %e but uses uppercase letter (e.g. 1.2E+2).\n\n f - the argument is treated as a float and presented as a floating-point number (locale aware).\n\n F - the argument is treated as a float and presented as a floating-point number (non-locale aware). Available since PHP 5.0.3.\n\n g - shorter of %e and %f.\n\n G - shorter of %E and %f.\n\n o - the argument is treated as an integer and presented as an octal number.\n\n s - the argument is treated as and presented as a string.\n\n u - the argument is treated as an integer and presented as an unsigned decimal number.\n\n x - the argument is treated as an integer and presented as a hexadecimal number (with lowercase letters).\n\n X - the argument is treated as an integer and presented as a hexadecimal number (with uppercase letters).\n\nVariables will be co-erced to a suitable type for the specifier:\n\nType Handling\n Type Specifiers string s integer\n d, u, c, o, x, X, b\n double\n g, G, e, E, f, F\n\nWarning\n Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results\n\nThe format string supports argument numbering\/swapping.  Here is an example:\n\nExample #1 Argument swapping\n\n <?php $num\u00a0=\u00a05; $location\u00a0=\u00a0'tree';\n $format\u00a0=\u00a0'There\u00a0are\u00a0%d\u00a0monkeys\u00a0in\u00a0the\u00a0%s'; echo\u00a0sprintf($format,\u00a0$num,\u00a0$location); ?>\n\nExample #2 Argument swapping\n\n <?php $format\u00a0=\u00a0'The\u00a0%s\u00a0contains\u00a0%d\u00a0monkeys'; echo\u00a0sprintf($format,\u00a0$num,\u00a0$location); ?>\n\nExample #3 Argument swapping\n\n <?php $format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$d\u00a0monkeys'; echo\u00a0sprintf($format,\u00a0$num,\u00a0$location); ?>\n\nExample #4 Argument swapping\n\n <?php $format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$d\u00a0monkeys. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0That\\'s\u00a0a\u00a0nice\u00a0%2$s\u00a0full\u00a0of\u00a0%1$d\u00a0monkeys.'; echo\u00a0sprintf($format,\u00a0$num,\u00a0$location); ?>\n\nn$\n\nposition specifier\n\n%\n\nExample #5 Specifying padding character\n\n <?php echo\u00a0sprintf(\"%'.9d\\n\",\u00a0123); echo\u00a0sprintf(\"%'.09d\\n\",\u00a0123); ?>\n\n\n\n The above example will output:\n\n ......123 000000123\n\nExample #6 Position specifier with other specifiers\n\n <?php $format\u00a0=\u00a0'The\u00a0%2$s\u00a0contains\u00a0%1$04d\u00a0monkeys'; echo\u00a0sprintf($format,\u00a0$num,\u00a0$location); ?>\n\n\n\n The above example will output:\n\n The tree contains 0005 monkeys\n\nNote:\n Attempting to use a position specifier greater than PHP_INT_MAX will result in sprintf() generating warnings.\n\nWarning\n The c type specifier ignores padding and width"},{"type":"mixed","name":"$args","description":""},{"type":"mixed","name":"$...","description":""}],"return":{"type":"string","values":["FALSE"]},"short":"Return a formatted string","examples":[{"title":"Example #7 printf(): various examples","content":"<?php\n$n\u00a0=\u00a0\u00a043951789;\n$u\u00a0=\u00a0-43951789;\n$c\u00a0=\u00a065;\u00a0\/\/\u00a0ASCII\u00a065\u00a0is\u00a0'A'\n\n\/\/\u00a0notice\u00a0the\u00a0double\u00a0%%,\u00a0this\u00a0prints\u00a0a\u00a0literal\u00a0'%'\u00a0character\nprintf(\"%%b\u00a0=\u00a0'%b'\\n\",\u00a0$n);\u00a0\/\/\u00a0binary\u00a0representation\nprintf(\"%%c\u00a0=\u00a0'%c'\\n\",\u00a0$c);\u00a0\/\/\u00a0print\u00a0the\u00a0ascii\u00a0character,\u00a0same\u00a0as\u00a0chr()\u00a0function\nprintf(\"%%d\u00a0=\u00a0'%d'\\n\",\u00a0$n);\u00a0\/\/\u00a0standard\u00a0integer\u00a0representation\nprintf(\"%%e\u00a0=\u00a0'%e'\\n\",\u00a0$n);\u00a0\/\/\u00a0scientific\u00a0notation\nprintf(\"%%u\u00a0=\u00a0'%u'\\n\",\u00a0$n);\u00a0\/\/\u00a0unsigned\u00a0integer\u00a0representation\u00a0of\u00a0a\u00a0positive\u00a0integer\nprintf(\"%%u\u00a0=\u00a0'%u'\\n\",\u00a0$u);\u00a0\/\/\u00a0unsigned\u00a0integer\u00a0representation\u00a0of\u00a0a\u00a0negative\u00a0integer\nprintf(\"%%f\u00a0=\u00a0'%f'\\n\",\u00a0$n);\u00a0\/\/\u00a0floating\u00a0point\u00a0representation\nprintf(\"%%o\u00a0=\u00a0'%o'\\n\",\u00a0$n);\u00a0\/\/\u00a0octal\u00a0representation\nprintf(\"%%s\u00a0=\u00a0'%s'\\n\",\u00a0$n);\u00a0\/\/\u00a0string\u00a0representation\nprintf(\"%%x\u00a0=\u00a0'%x'\\n\",\u00a0$n);\u00a0\/\/\u00a0hexadecimal\u00a0representation\u00a0(lower-case)\nprintf(\"%%X\u00a0=\u00a0'%X'\\n\",\u00a0$n);\u00a0\/\/\u00a0hexadecimal\u00a0representation\u00a0(upper-case)\n\nprintf(\"%%+d\u00a0=\u00a0'%+d'\\n\",\u00a0$n);\u00a0\/\/\u00a0sign\u00a0specifier\u00a0on\u00a0a\u00a0positive\u00a0integer\nprintf(\"%%+d\u00a0=\u00a0'%+d'\\n\",\u00a0$u);\u00a0\/\/\u00a0sign\u00a0specifier\u00a0on\u00a0a\u00a0negative\u00a0integer\n?>"},{"title":"Example #8 printf(): string specifiers","content":"<?php\n$s\u00a0=\u00a0'monkey';\n$t\u00a0=\u00a0'many\u00a0monkeys';\n\nprintf(\"[%s]\\n\",\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$s);\u00a0\/\/\u00a0standard\u00a0string\u00a0output\nprintf(\"[%10s]\\n\",\u00a0\u00a0\u00a0\u00a0$s);\u00a0\/\/\u00a0right-justification\u00a0with\u00a0spaces\nprintf(\"[%-10s]\\n\",\u00a0\u00a0\u00a0$s);\u00a0\/\/\u00a0left-justification\u00a0with\u00a0spaces\nprintf(\"[%010s]\\n\",\u00a0\u00a0\u00a0$s);\u00a0\/\/\u00a0zero-padding\u00a0works\u00a0on\u00a0strings\u00a0too\nprintf(\"[%'#10s]\\n\",\u00a0\u00a0$s);\u00a0\/\/\u00a0use\u00a0the\u00a0custom\u00a0padding\u00a0character\u00a0'#'\nprintf(\"[%10.10s]\\n\",\u00a0$t);\u00a0\/\/\u00a0left-justification\u00a0but\u00a0with\u00a0a\u00a0cutoff\u00a0of\u00a010\u00a0characters\n?>"},{"title":"Example #9 sprintf(): zero-padded integers","content":"<?php\n$isodate\u00a0=\u00a0sprintf(\"%04d-%02d-%02d\",\u00a0$year,\u00a0$month,\u00a0$day);\n?>"},{"title":"Example #10 sprintf(): formatting currency","content":"<?php\n$money1\u00a0=\u00a068.75;\n$money2\u00a0=\u00a054.35;\n$money\u00a0=\u00a0$money1\u00a0+\u00a0$money2;\n\/\/\u00a0echo\u00a0$money\u00a0will\u00a0output\u00a0\"123.1\";\n$formatted\u00a0=\u00a0sprintf(\"%01.2f\",\u00a0$money);\n\/\/\u00a0echo\u00a0$formatted\u00a0will\u00a0output\u00a0\"123.10\"\n?>"},{"title":"Example #11 sprintf(): scientific notation","content":"<?php\n$number\u00a0=\u00a0362525200;\n\necho\u00a0sprintf(\"%.3e\",\u00a0$number);\u00a0\/\/\u00a0outputs\u00a03.625e+8\n?>"}]},"sqrt":{"name":"sqrt","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Square root","examples":[{"title":"Example #1 sqrt() example","content":"<?php\n\/\/\u00a0Precision\u00a0depends\u00a0on\u00a0your\u00a0precision\u00a0directive\necho\u00a0sqrt(9);\u00a0\/\/\u00a03\necho\u00a0sqrt(10);\u00a0\/\/\u00a03.16227766\u00a0...\n?>"}]},"srand":{"name":"srand","parameters":[{"type":"int","name":"$seed","description":"An arbitrary integer seed value."}],"return":{"type":"void","values":[]},"short":"Seed the random number generator","examples":[{"title":"Example #1 srand() example","content":"<?php\n\/\/\u00a0seed\u00a0with\u00a0microseconds\nfunction\u00a0make_seed()\n{\n\u00a0\u00a0list($usec,\u00a0$sec)\u00a0=\u00a0explode('\u00a0',\u00a0microtime());\n\u00a0\u00a0return\u00a0$sec\u00a0+\u00a0$usec\u00a0*\u00a01000000;\n}\nsrand(make_seed());\n$randval\u00a0=\u00a0rand();\n?>"}]},"sscanf":{"name":"sscanf","parameters":[{"type":"string","name":"$str","description":"The input string being parsed."},{"type":"string","name":"$format","description":"The interpreted format for str, which is described in the documentation for sprintf() with following differences:\n\nFunction is not locale-aware.\n\n F, g, G and b are not supported.\n\n D stands for decimal number.\n\n i stands for integer with base detection.\n\n n stands for number of characters processed so far.\n\n s stops reading at any whitespace character."}],"return":{"type":"mixed","values":[]},"short":"Parses input from a string according to a format","examples":[{"title":"Example #1 sscanf() Example","content":"<?php\n\/\/\u00a0getting\u00a0the\u00a0serial\u00a0number\nlist($serial)\u00a0=\u00a0sscanf(\"SN\/2350001\",\u00a0\"SN\/%d\");\n\/\/\u00a0and\u00a0the\u00a0date\u00a0of\u00a0manufacturing\n$mandate\u00a0=\u00a0\"January\u00a001\u00a02000\";\nlist($month,\u00a0$day,\u00a0$year)\u00a0=\u00a0sscanf($mandate,\u00a0\"%s\u00a0%d\u00a0%d\");\necho\u00a0\"Item\u00a0$serial\u00a0was\u00a0manufactured\u00a0on:\u00a0$year-\"\u00a0.\u00a0substr($month,\u00a00,\u00a03)\u00a0.\u00a0\"-$day\\n\";\n?>"},{"title":"Example #2 sscanf() - using optional parameters","content":"<?php\n\/\/\u00a0get\u00a0author\u00a0info\u00a0and\u00a0generate\u00a0DocBook\u00a0entry\n$auth\u00a0=\u00a0\"24\\tLewis\u00a0Carroll\";\n$n\u00a0=\u00a0sscanf($auth,\u00a0\"%d\\t%s\u00a0%s\",\u00a0$id,\u00a0$first,\u00a0$last);\necho\u00a0\"<author\u00a0id='$id'>\n\u00a0\u00a0\u00a0\u00a0<firstname>$first<\/firstname>\n\u00a0\u00a0\u00a0\u00a0<surname>$last<\/surname>\n<\/author>\\n\";\n?>"}]},"stat":{"name":"stat","parameters":[{"type":"string","name":"$filename","description":"Path to the file."}],"return":{"type":"array","values":["FALSE"]},"short":"Gives information about a file","examples":[{"title":"Example #1 stat() example","content":"<?php\n\/*\u00a0Get\u00a0file\u00a0stat\u00a0*\/\n$stat\u00a0=\u00a0stat('C:\\php\\php.exe');\n\n\/*\n\u00a0*\u00a0Print\u00a0file\u00a0access\u00a0time,\u00a0this\u00a0is\u00a0the\u00a0same\u00a0\n\u00a0*\u00a0as\u00a0calling\u00a0fileatime()\n\u00a0*\/\necho\u00a0'Access\u00a0time:\u00a0'\u00a0.\u00a0$stat['atime'];\n\n\/*\n\u00a0*\u00a0Print\u00a0file\u00a0modification\u00a0time,\u00a0this\u00a0is\u00a0the\u00a0\n\u00a0*\u00a0same\u00a0as\u00a0calling\u00a0filemtime()\n\u00a0*\/\necho\u00a0'Modification\u00a0time:\u00a0'\u00a0.\u00a0$stat['mtime'];\n\n\/*\u00a0Print\u00a0the\u00a0device\u00a0number\u00a0*\/\necho\u00a0'Device\u00a0number:\u00a0'\u00a0.\u00a0$stat['dev'];\n?>"},{"title":"Example #2 Using stat() information together with touch()","content":"<?php\n\/*\u00a0Get\u00a0file\u00a0stat\u00a0*\/\n$stat\u00a0=\u00a0stat('C:\\php\\php.exe');\n\n\/*\u00a0Did\u00a0we\u00a0failed\u00a0to\u00a0get\u00a0stat\u00a0information?\u00a0*\/\nif\u00a0(!$stat)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'stat()\u00a0call\u00a0failed...';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/*\n\u00a0\u00a0\u00a0\u00a0\u00a0*\u00a0We\u00a0want\u00a0the\u00a0access\u00a0time\u00a0to\u00a0be\u00a01\u00a0week\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0*\u00a0after\u00a0the\u00a0current\u00a0access\u00a0time.\n\u00a0\u00a0\u00a0\u00a0\u00a0*\/\n\u00a0\u00a0\u00a0\u00a0$atime\u00a0=\u00a0$stat['atime']\u00a0+\u00a0604800;\n\n\u00a0\u00a0\u00a0\u00a0\/*\u00a0Touch\u00a0the\u00a0file\u00a0*\/\n\u00a0\u00a0\u00a0\u00a0if\u00a0(!touch('some_file.txt',\u00a0time(),\u00a0$atime))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Failed\u00a0to\u00a0touch\u00a0file...';\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'touch()\u00a0returned\u00a0success...';\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"str_getcsv":{"name":"str_getcsv","parameters":[{"type":"string","name":"$input","description":"The string to parse."},{"type":"string","name":"$delimiter","default_value":"\",\"","description":"Set the field delimiter (one character only)."},{"type":"string","name":"$enclosure","default_value":"'\"'","description":"Set the field enclosure character (one character only)."},{"type":"string","name":"$escape","default_value":"\"\\\\\"","description":"Set the escape character (one character only). Defaults as a backslash (\\)\n\nNote:\n Usually an enclosure character is escpaped inside a field by doubling it; however, the escape character can be used as an alternative. So for the default parameter values \"\" and \\\" have the same meaning. Other than allowing to escape the enclosure character the escape character has no special meaning; it isn't even meant to escape itself."}],"return":{"type":"array","values":[]},"short":"\n   Parse a CSV string into an array\n  ","examples":[]},"str_ireplace":{"name":"str_ireplace","parameters":[{"type":"mixed","name":"$search","description":"The value being searched for, otherwise known as the needle.  An array may be used to designate multiple needles."},{"type":"mixed","name":"$replace","description":"The replacement value that replaces found search values. An array may be used to designate multiple replacements."},{"type":"mixed","name":"$subject","description":"The string or array being searched and replaced on, otherwise known as the haystack.\n\nIf subject is an array, then the search and replace is performed with every entry of subject, and the return value is an array as well."}],"return":{"type":"mixed","values":[]},"short":"Case-insensitive version of str_replace()","examples":[{"title":"Example #1 str_ireplace() example","content":"<?php\n$bodytag\u00a0=\u00a0str_ireplace(\"%body%\",\u00a0\"black\",\u00a0\"<body\u00a0text=%BODY%>\");\necho\u00a0$bodytag;\u00a0\/\/\u00a0<body\u00a0text=black>\n?>"}]},"str_pad":{"name":"str_pad","parameters":[{"type":"string","name":"$input","description":"The input string."},{"type":"int","name":"$pad_length","description":"If the value of pad_length is negative, less than, or equal to the length of the input string, no padding takes place, and input will be returned."},{"type":"string","name":"$pad_string","default_value":"\" \"","description":"Note:\n The pad_string may be truncated if the required number of padding characters can't be evenly divided by the pad_string's length."},{"type":"int","name":"$pad_type","default_value":"STR_PAD_RIGHT","description":"Optional argument pad_type can be STR_PAD_RIGHT, STR_PAD_LEFT, or STR_PAD_BOTH. If pad_type is not specified it is assumed to be STR_PAD_RIGHT."}],"return":{"type":"string","values":[]},"short":"Pad a string to a certain length with another string","examples":[{"title":"Example #1 str_pad() example","content":"<?php\n$input\u00a0=\u00a0\"Alien\";\necho\u00a0str_pad($input,\u00a010);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0produces\u00a0\"Alien\u00a0\u00a0\u00a0\u00a0\u00a0\"\necho\u00a0str_pad($input,\u00a010,\u00a0\"-=\",\u00a0STR_PAD_LEFT);\u00a0\u00a0\/\/\u00a0produces\u00a0\"-=-=-Alien\"\necho\u00a0str_pad($input,\u00a010,\u00a0\"_\",\u00a0STR_PAD_BOTH);\u00a0\u00a0\u00a0\/\/\u00a0produces\u00a0\"__Alien___\"\necho\u00a0str_pad($input,\u00a0\u00a06,\u00a0\"___\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0produces\u00a0\"Alien_\"\necho\u00a0str_pad($input,\u00a0\u00a03,\u00a0\"*\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0produces\u00a0\"Alien\"\n?>"}]},"str_repeat":{"name":"str_repeat","parameters":[{"type":"string","name":"$input","description":"The string to be repeated."},{"type":"int","name":"$multiplier","description":"Number of time the input string should be repeated.\n\nmultiplier has to be greater than or equal to 0. If the multiplier is set to 0, the function will return an empty string."}],"return":{"type":"string","values":[]},"short":"Repeat a string","examples":[{"title":"Example #1 str_repeat() example","content":"<?php\necho\u00a0str_repeat(\"-=\",\u00a010);\n?>"}]},"str_replace":{"name":"str_replace","parameters":[{"type":"mixed","name":"$search","description":"The value being searched for, otherwise known as the needle. An array may be used to designate multiple needles."},{"type":"mixed","name":"$replace","description":"The replacement value that replaces found search values. An array may be used to designate multiple replacements."},{"type":"mixed","name":"$subject","description":"The string or array being searched and replaced on, otherwise known as the haystack.\n\nIf subject is an array, then the search and replace is performed with every entry of subject, and the return value is an array as well."}],"return":{"type":"mixed","values":[]},"short":"Replace all occurrences of the search string with the replacement string","examples":[{"title":"Example #1 Basic str_replace() examples","content":"<?php\n\/\/\u00a0Provides:\u00a0<body\u00a0text='black'>\n$bodytag\u00a0=\u00a0str_replace(\"%body%\",\u00a0\"black\",\u00a0\"<body\u00a0text='%body%'>\");\n\n\/\/\u00a0Provides:\u00a0Hll\u00a0Wrld\u00a0f\u00a0PHP\n$vowels\u00a0=\u00a0array(\"a\",\u00a0\"e\",\u00a0\"i\",\u00a0\"o\",\u00a0\"u\",\u00a0\"A\",\u00a0\"E\",\u00a0\"I\",\u00a0\"O\",\u00a0\"U\");\n$onlyconsonants\u00a0=\u00a0str_replace($vowels,\u00a0\"\",\u00a0\"Hello\u00a0World\u00a0of\u00a0PHP\");\n\n\/\/\u00a0Provides:\u00a0You\u00a0should\u00a0eat\u00a0pizza,\u00a0beer,\u00a0and\u00a0ice\u00a0cream\u00a0every\u00a0day\n$phrase\u00a0\u00a0=\u00a0\"You\u00a0should\u00a0eat\u00a0fruits,\u00a0vegetables,\u00a0and\u00a0fiber\u00a0every\u00a0day.\";\n$healthy\u00a0=\u00a0array(\"fruits\",\u00a0\"vegetables\",\u00a0\"fiber\");\n$yummy\u00a0\u00a0\u00a0=\u00a0array(\"pizza\",\u00a0\"beer\",\u00a0\"ice\u00a0cream\");\n\n$newphrase\u00a0=\u00a0str_replace($healthy,\u00a0$yummy,\u00a0$phrase);\n\n\/\/\u00a0Provides:\u00a02\n$str\u00a0=\u00a0str_replace(\"ll\",\u00a0\"\",\u00a0\"good\u00a0golly\u00a0miss\u00a0molly!\",\u00a0$count);\necho\u00a0$count;\n?>"},{"title":"Example #2 Examples of potential str_replace() gotchas","content":"<?php\n\/\/\u00a0Order\u00a0of\u00a0replacement\n$str\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0\"Line\u00a01\\nLine\u00a02\\rLine\u00a03\\r\\nLine\u00a04\\n\";\n$order\u00a0\u00a0\u00a0=\u00a0array(\"\\r\\n\",\u00a0\"\\n\",\u00a0\"\\r\");\n$replace\u00a0=\u00a0'<br\u00a0\/>';\n\n\/\/\u00a0Processes\u00a0\\r\\n's\u00a0first\u00a0so\u00a0they\u00a0aren't\u00a0converted\u00a0twice.\n$newstr\u00a0=\u00a0str_replace($order,\u00a0$replace,\u00a0$str);\n\n\/\/\u00a0Outputs\u00a0F\u00a0because\u00a0A\u00a0is\u00a0replaced\u00a0with\u00a0B,\u00a0then\u00a0B\u00a0is\u00a0replaced\u00a0with\u00a0C,\u00a0and\u00a0so\u00a0on...\n\/\/\u00a0Finally\u00a0E\u00a0is\u00a0replaced\u00a0with\u00a0F,\u00a0because\u00a0of\u00a0left\u00a0to\u00a0right\u00a0replacements.\n$search\u00a0\u00a0=\u00a0array('A',\u00a0'B',\u00a0'C',\u00a0'D',\u00a0'E');\n$replace\u00a0=\u00a0array('B',\u00a0'C',\u00a0'D',\u00a0'E',\u00a0'F');\n$subject\u00a0=\u00a0'A';\necho\u00a0str_replace($search,\u00a0$replace,\u00a0$subject);\n\n\/\/\u00a0Outputs:\u00a0apearpearle\u00a0pear\n\/\/\u00a0For\u00a0the\u00a0same\u00a0reason\u00a0mentioned\u00a0above\n$letters\u00a0=\u00a0array('a',\u00a0'p');\n$fruit\u00a0\u00a0\u00a0=\u00a0array('apple',\u00a0'pear');\n$text\u00a0\u00a0\u00a0\u00a0=\u00a0'a\u00a0p';\n$output\u00a0\u00a0=\u00a0str_replace($letters,\u00a0$fruit,\u00a0$text);\necho\u00a0$output;\n?>"}]},"str_rot13":{"name":"str_rot13","parameters":[{"type":"string","name":"$str","description":"The input string."}],"return":{"type":"string","values":[]},"short":"Perform the rot13 transform on a string","examples":[{"title":"Example #1 str_rot13() example","content":"<?php\n\necho\u00a0str_rot13('PHP\u00a04.3.0');\u00a0\/\/\u00a0CUC\u00a04.3.0\n\n?>"}]},"str_shuffle":{"name":"str_shuffle","parameters":[{"type":"string","name":"$str","description":"The input string."}],"return":{"type":"string","values":[]},"short":"Randomly shuffles a string","examples":[{"title":"Example #1 str_shuffle() example","content":"<?php\n$str\u00a0=\u00a0'abcdef';\n$shuffled\u00a0=\u00a0str_shuffle($str);\n\n\/\/\u00a0This\u00a0will\u00a0echo\u00a0something\u00a0like:\u00a0bfdaec\necho\u00a0$shuffled;\n?>"}]},"str_split":{"name":"str_split","parameters":[{"type":"string","name":"$string","description":"The input string."},{"type":"int","name":"$split_length","default_value":"1","description":"Maximum length of the chunk."}],"return":{"type":"array","values":["FALSE"]},"short":"Convert a string to an array","examples":[{"title":"Example #1 Example uses of str_split()","content":"<?php\n\n$str\u00a0=\u00a0\"Hello\u00a0Friend\";\n\n$arr1\u00a0=\u00a0str_split($str);\n$arr2\u00a0=\u00a0str_split($str,\u00a03);\n\nprint_r($arr1);\nprint_r($arr2);\n\n?>"}]},"str_word_count":{"name":"str_word_count","parameters":[{"type":"string","name":"$string","description":"The string"},{"type":"int","name":"$format","default_value":"0","description":"Specify the return value of this function. The current supported values are:\n\n0 - returns the number of words found\n\n\n\n 1 - returns an array containing all the words found inside the string\n\n\n\n 2 - returns an associative array, where the key is the numeric position of the word inside the string and the value is the actual word itself"},{"type":"string","name":"$charlist","description":"A list of additional characters which will be considered as 'word'"}],"return":{"type":"mixed","values":[]},"short":"\n   Return information about words used in a string\n  ","examples":[{"title":"Example #1 A str_word_count() example","content":"<?php\n\n$str\u00a0=\u00a0\"Hello\u00a0fri3nd,\u00a0you're\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0looking\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0good\u00a0today!\";\n\nprint_r(str_word_count($str,\u00a01));\nprint_r(str_word_count($str,\u00a02));\nprint_r(str_word_count($str,\u00a01,\u00a0'\u00e0\u00e1\u00e3\u00e73'));\n\necho\u00a0str_word_count($str);\n\n?>"}]},"strcasecmp":{"name":"strcasecmp","parameters":[{"type":"string","name":"$str1","description":"The first string"},{"type":"string","name":"$str2","description":"The second string"}],"return":{"type":"int","values":[]},"short":"Binary safe case-insensitive string comparison","examples":[{"title":"Example #1 strcasecmp() example","content":"<?php\n$var1\u00a0=\u00a0\"Hello\";\n$var2\u00a0=\u00a0\"hello\";\nif\u00a0(strcasecmp($var1,\u00a0$var2)\u00a0==\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'$var1\u00a0is\u00a0equal\u00a0to\u00a0$var2\u00a0in\u00a0a\u00a0case-insensitive\u00a0string\u00a0comparison';\n}\n?>"}]},"strchr":{"name":"strchr","parameters":[],"return":{"type":"","values":[]},"short":"Alias of strstr()","examples":[]},"strcmp":{"name":"strcmp","parameters":[{"type":"string","name":"$str1","description":"The first string."},{"type":"string","name":"$str2","description":"The second string."}],"return":{"type":"int","values":[]},"short":"Binary safe string comparison","examples":[{"title":"Example #1 strcmp() example","content":"<?php\n$var1\u00a0=\u00a0\"Hello\";\n$var2\u00a0=\u00a0\"hello\";\nif\u00a0(strcmp($var1,\u00a0$var2)\u00a0!==\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'$var1\u00a0is\u00a0not\u00a0equal\u00a0to\u00a0$var2\u00a0in\u00a0a\u00a0case\u00a0sensitive\u00a0string\u00a0comparison';\n}\n?>"}]},"strcoll":{"name":"strcoll","parameters":[{"type":"string","name":"$str1","description":"The first string."},{"type":"string","name":"$str2","description":"The second string."}],"return":{"type":"int","values":[]},"short":"Locale based string comparison","examples":[]},"strcspn":{"name":"strcspn","parameters":[{"type":"string","name":"$subject","description":"The string to examine."},{"type":"string","name":"$mask","description":"The string containing every disallowed character."},{"type":"int","name":"$start","description":"The position in subject to start searching.\n\nIf start is given and is non-negative, then strcspn() will begin examining subject at the start'th position. For instance, in the string 'abcdef', the character at position 0 is 'a', the character at position 2 is 'c', and so forth.\n\nIf start is given and is negative, then strcspn() will begin examining subject at the start'th position from the end of subject."},{"type":"int","name":"$length","description":"The length of the segment from subject to examine.\n\nIf length is given and is non-negative, then subject will be examined for length characters after the starting position.\n\nIf length is given and is negative, then subject will be examined from the starting position up to length characters from the end of subject."}],"return":{"type":"int","values":[]},"short":"Find length of initial segment not matching mask","examples":[{"title":"Example #1 strcspn() example","content":"<?php\n$a\u00a0=\u00a0strcspn('abcd',\u00a0\u00a0'apple');\n$b\u00a0=\u00a0strcspn('abcd',\u00a0\u00a0'banana');\n$c\u00a0=\u00a0strcspn('hello',\u00a0'l');\n$d\u00a0=\u00a0strcspn('hello',\u00a0'world');\n$e\u00a0=\u00a0strcspn('abcdhelloabcd',\u00a0'abcd',\u00a0-9);\n$f\u00a0=\u00a0strcspn('abcdhelloabcd',\u00a0'abcd',\u00a0-9,\u00a0-5);\n\nvar_dump($a);\nvar_dump($b);\nvar_dump($c);\nvar_dump($d);\nvar_dump($e);\nvar_dump($f);\n?>"}]},"stream_bucket_append":{"name":"stream_bucket_append","parameters":[{"type":"resource","name":"$brigade"},{"type":"object","name":"$bucket"}],"return":{"type":"void","values":[]},"short":"\n   Append bucket to brigade\n  ","examples":[]},"stream_bucket_make_writeable":{"name":"stream_bucket_make_writeable","parameters":[{"type":"resource","name":"$brigade"}],"return":{"type":"object","values":[]},"short":"\n   Return a bucket object from the brigade for operating on\n  ","examples":[]},"stream_bucket_new":{"name":"stream_bucket_new","parameters":[{"type":"resource","name":"$stream"},{"type":"string","name":"$buffer"}],"return":{"type":"object","values":[]},"short":"\n   Create a new bucket for use on the current stream\n  ","examples":[]},"stream_bucket_prepend":{"name":"stream_bucket_prepend","parameters":[{"type":"resource","name":"$brigade","description":"brigade is a resource pointing to a bucket brigade which contains one or more bucket objects."},{"type":"object","name":"$bucket","description":"A bucket object."}],"return":{"type":"void","values":[]},"short":"\n   Prepend bucket to brigade\n  ","examples":[{"title":"Example #1 stream_bucket_prepend() examples","content":"<?php\n\nclass\u00a0foo\u00a0extends\u00a0php_user_filter\u00a0{\n\u00a0\u00a0protected\u00a0$calls\u00a0=\u00a00;\n\u00a0\u00a0public\u00a0function\u00a0filter($in,\u00a0$out,\u00a0&$consumed,\u00a0$closing)\u00a0{\n\u00a0\u00a0\u00a0\u00a0while\u00a0($bucket\u00a0=\u00a0stream_bucket_make_writeable($in))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$consumed\u00a0+=\u00a0$bucket->datalen;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($this->calls++\u00a0==\u00a02)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0This\u00a0bucket\u00a0will\u00a0appear\u00a0again\u00a0before\u00a0any\u00a0other\u00a0bucket.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stream_bucket_prepend($in,\u00a0$bucket);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return\u00a0PSFS_FEED_ME;\n\u00a0\u00a0}\n}\nstream_filter_register('test',\u00a0'foo');\nprint\u00a0\u00a0file_get_contents('php:\/\/filter\/read=test\/resource=foo');\n?>"}]},"stream_context_create":{"name":"stream_context_create","parameters":[{"type":"array","name":"$options","description":"Must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value. Refer to context options for a list of available wrappers and options.\n\nDefault to an empty array."},{"type":"array","name":"$params","description":"Must be an associative array in the format $arr['parameter'] = $value. Refer to context parameters for a listing of standard stream parameters."}],"return":{"type":"resource","values":[]},"short":"Creates a stream context","examples":[{"title":"Example #1 Using stream_context_create()","content":"<?php\n$opts\u00a0=\u00a0array(\n\u00a0\u00a0'http'=>array(\n\u00a0\u00a0\u00a0\u00a0'method'=>\"GET\",\n\u00a0\u00a0\u00a0\u00a0'header'=>\"Accept-language:\u00a0en\\r\\n\"\u00a0.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cookie:\u00a0foo=bar\\r\\n\"\n\u00a0\u00a0)\n);\n\n$context\u00a0=\u00a0stream_context_create($opts);\n\n\/*\u00a0Sends\u00a0an\u00a0http\u00a0request\u00a0to\u00a0www.example.com\n\u00a0\u00a0\u00a0with\u00a0additional\u00a0headers\u00a0shown\u00a0above\u00a0*\/\n$fp\u00a0=\u00a0fopen('http:\/\/www.example.com',\u00a0'r',\u00a0false,\u00a0$context);\nfpassthru($fp);\nfclose($fp);\n?>"}]},"stream_context_get_default":{"name":"stream_context_get_default","parameters":[{"type":"array","name":"$options","description":"options must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value.\n\nNote:\n As of PHP 5.3.0, the stream_context_set_default() function can be used to set the default context."}],"return":{"type":"resource","values":[]},"short":"Retrieve the default stream context","examples":[{"title":"Example #1 Using stream_context_get_default()","content":"<?php\n$default_opts\u00a0=\u00a0array(\n\u00a0\u00a0'http'=>array(\n\u00a0\u00a0\u00a0\u00a0'method'=>\"GET\",\n\u00a0\u00a0\u00a0\u00a0'header'=>\"Accept-language:\u00a0en\\r\\n\"\u00a0.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cookie:\u00a0foo=bar\",\n\u00a0\u00a0\u00a0\u00a0'proxy'=>\"tcp:\/\/10.54.1.39:8000\"\n\u00a0\u00a0)\n);\n\n\n$alternate_opts\u00a0=\u00a0array(\n\u00a0\u00a0'http'=>array(\n\u00a0\u00a0\u00a0\u00a0'method'=>\"POST\",\n\u00a0\u00a0\u00a0\u00a0'header'=>\"Content-type:\u00a0application\/x-www-form-urlencoded\\r\\n\"\u00a0.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Content-length:\u00a0\"\u00a0.\u00a0strlen(\"baz=bomb\"),\n\u00a0\u00a0\u00a0\u00a0'content'=>\"baz=bomb\"\n\u00a0\u00a0)\n);\n\n$default\u00a0=\u00a0stream_context_get_default($default_opts);\n$alternate\u00a0=\u00a0stream_context_create($alternate_opts);\n\n\/*\u00a0Sends\u00a0a\u00a0regular\u00a0GET\u00a0request\u00a0to\u00a0proxy\u00a0server\u00a0at\u00a010.54.1.39\n\u00a0*\u00a0For\u00a0www.example.com\u00a0using\u00a0context\u00a0options\u00a0specified\u00a0in\u00a0$default_opts\n\u00a0*\/\nreadfile('http:\/\/www.example.com');\n\n\/*\u00a0Sends\u00a0a\u00a0POST\u00a0request\u00a0directly\u00a0to\u00a0www.example.com\n\u00a0*\u00a0Using\u00a0context\u00a0options\u00a0specified\u00a0in\u00a0$alternate_opts\n\u00a0*\/\nreadfile('http:\/\/www.example.com',\u00a0false,\u00a0$alternate);\n\n?>"}]},"stream_context_get_options":{"name":"stream_context_get_options","parameters":[{"type":"resource","name":"$stream_or_context","description":"The stream or context to get options from"}],"return":{"type":"array","values":[]},"short":"Retrieve options for a stream\/wrapper\/context","examples":[{"title":"Example #1 stream_context_get_options() example","content":"<?php\n$params\u00a0=\u00a0array(\"method\"\u00a0=>\u00a0\"POST\");\n\nstream_context_set_default(array(\"http\"\u00a0=>\u00a0$params));\n\nvar_dump(stream_context_get_options(stream_context_get_default()));\n\n?>"}]},"stream_context_get_params":{"name":"stream_context_get_params","parameters":[{"type":"resource","name":"$stream_or_context","description":"A stream resource or a context resource"}],"return":{"type":"array","values":[]},"short":"Retrieves parameters from a context","examples":[{"title":"Example #1 stream_context_get_params() example","content":"Basic usage example"}]},"stream_context_set_default":{"name":"stream_context_set_default","parameters":[{"type":"array","name":"$options","description":"The options to set for the default context.\n\nNote:\n options must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value."}],"return":{"type":"resource","values":[]},"short":"Set the default stream context","examples":[{"title":"Example #1 stream_context_set_default() example","content":"<?php\n$default_opts\u00a0=\u00a0array(\n\u00a0\u00a0'http'=>array(\n\u00a0\u00a0\u00a0\u00a0'method'=>\"GET\",\n\u00a0\u00a0\u00a0\u00a0'header'=>\"Accept-language:\u00a0en\\r\\n\"\u00a0.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Cookie:\u00a0foo=bar\",\n\u00a0\u00a0\u00a0\u00a0'proxy'=>\"tcp:\/\/10.54.1.39:8000\"\n\u00a0\u00a0)\n);\n\n$default\u00a0=\u00a0stream_context_set_default($default_opts);\n\n\/*\u00a0Sends\u00a0a\u00a0regular\u00a0GET\u00a0request\u00a0to\u00a0proxy\u00a0server\u00a0at\u00a010.54.1.39\n\u00a0*\u00a0For\u00a0www.example.com\u00a0using\u00a0context\u00a0options\u00a0specified\u00a0in\u00a0$default_opts\n\u00a0*\/\nreadfile('http:\/\/www.example.com');\n?>"}]},"stream_context_set_option":{"name":"stream_context_set_option","parameters":[{"type":"resource","name":"$stream_or_context","description":"The stream or context resource to apply the options to."},{"type":"string","name":"$wrapper"},{"type":"string","name":"$option"},{"type":"mixed","name":"$value"},{"type":"array","name":"$options","description":"The options to set for stream_or_context.\n\nNote:\n options must be an associative array of associative arrays in the format $arr['wrapper']['option'] = $value.\n\n Refer to context options and parameters for a listing of stream options."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sets an option for a stream\/wrapper\/context","examples":[]},"stream_context_set_params":{"name":"stream_context_set_params","parameters":[{"type":"resource","name":"$stream_or_context","description":"The stream or context to apply the parameters too."},{"type":"array","name":"$params","description":"An array of parameters to set.\n\nNote:\n params should be an associative array of the structure: $params['paramname'] = \"paramvalue\";."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set parameters for a stream\/wrapper\/context","examples":[]},"stream_copy_to_stream":{"name":"stream_copy_to_stream","parameters":[{"type":"resource","name":"$source","description":"The source stream"},{"type":"resource","name":"$dest","description":"The destination stream"},{"type":"int","name":"$maxlength","default_value":"-1","description":"Maximum bytes to copy"},{"type":"int","name":"$offset","default_value":"0","description":"The offset where to start to copy data"}],"return":{"type":"int","values":["FALSE"]},"short":"Copies data from one stream to another","examples":[{"title":"Example #1 A stream_copy_to_stream() example","content":"<?php\n$src\u00a0=\u00a0fopen('http:\/\/www.example.com',\u00a0'r');\n$dest1\u00a0=\u00a0fopen('first1k.txt',\u00a0'w');\n$dest2\u00a0=\u00a0fopen('remainder.txt',\u00a0'w');\n\necho\u00a0stream_copy_to_stream($src,\u00a0$dest1,\u00a01024)\u00a0.\u00a0\"\u00a0bytes\u00a0copied\u00a0to\u00a0first1k.txt\\n\";\necho\u00a0stream_copy_to_stream($src,\u00a0$dest2)\u00a0.\u00a0\"\u00a0bytes\u00a0copied\u00a0to\u00a0remainder.txt\\n\";\n\n?>"}]},"stream_filter_append":{"name":"stream_filter_append","parameters":[{"type":"resource","name":"$stream","description":"The target stream."},{"type":"string","name":"$filtername","description":"The filter name."},{"type":"int","name":"$read_write","description":"By default, stream_filter_append() will attach the filter to the read filter chain if the file was opened for reading (i.e. File Mode: r, and\/or +).  The filter will also be attached to the write filter chain if the file was opened for writing (i.e. File Mode: w, a, and\/or +). STREAM_FILTER_READ, STREAM_FILTER_WRITE, and\/or STREAM_FILTER_ALL can also be passed to the read_write parameter to override this behavior."},{"type":"mixed","name":"$params","description":"This filter will be added with the specified params to the end of the list and will therefore be called last during stream operations. To add a filter to the beginning of the list, use stream_filter_prepend()."}],"return":{"type":"resource","values":["FALSE"]},"short":"Attach a filter to a stream","examples":[{"title":"Example #1 Controlling where filters are applied","content":"<?php\n\/*\u00a0Open\u00a0a\u00a0test\u00a0file\u00a0for\u00a0reading\u00a0and\u00a0writing\u00a0*\/\n$fp\u00a0=\u00a0fopen('test.txt',\u00a0'w+');\n\n\/*\u00a0Apply\u00a0the\u00a0ROT13\u00a0filter\u00a0to\u00a0the\n\u00a0*\u00a0write\u00a0filter\u00a0chain,\u00a0but\u00a0not\u00a0the\n\u00a0*\u00a0read\u00a0filter\u00a0chain\u00a0*\/\nstream_filter_append($fp,\u00a0\"string.rot13\",\u00a0STREAM_FILTER_WRITE);\n\n\/*\u00a0Write\u00a0a\u00a0simple\u00a0string\u00a0to\u00a0the\u00a0file\n\u00a0*\u00a0it\u00a0will\u00a0be\u00a0ROT13\u00a0transformed\u00a0on\u00a0the\n\u00a0*\u00a0way\u00a0out\u00a0*\/\nfwrite($fp,\u00a0\"This\u00a0is\u00a0a\u00a0test\\n\");\n\n\/*\u00a0Back\u00a0up\u00a0to\u00a0the\u00a0beginning\u00a0of\u00a0the\u00a0file\u00a0*\/\nrewind($fp);\n\n\/*\u00a0Read\u00a0the\u00a0contents\u00a0of\u00a0the\u00a0file\u00a0back\u00a0out.\n\u00a0*\u00a0Had\u00a0the\u00a0filter\u00a0been\u00a0applied\u00a0to\u00a0the\n\u00a0*\u00a0read\u00a0filter\u00a0chain\u00a0as\u00a0well,\u00a0we\u00a0would\u00a0see\n\u00a0*\u00a0the\u00a0text\u00a0ROT13ed\u00a0back\u00a0to\u00a0its\u00a0original\u00a0state\u00a0*\/\nfpassthru($fp);\n\nfclose($fp);\n\n\/*\u00a0Expected\u00a0Output\n\u00a0\u00a0\u00a0---------------\n\nGuvf\u00a0vf\u00a0n\u00a0grfg\n\n\u00a0*\/\n?>"}]},"stream_filter_prepend":{"name":"stream_filter_prepend","parameters":[{"type":"resource","name":"$stream","description":"The target stream."},{"type":"string","name":"$filtername","description":"The filter name."},{"type":"int","name":"$read_write","description":"By default, stream_filter_prepend() will attach the filter to the read filter chain if the file was opened for reading (i.e. File Mode: r, and\/or +).  The filter will also be attached to the write filter chain if the file was opened for writing (i.e. File Mode: w, a, and\/or +). STREAM_FILTER_READ, STREAM_FILTER_WRITE, and\/or STREAM_FILTER_ALL can also be passed to the read_write parameter to override this behavior. See stream_filter_append() for an example of using this parameter."},{"type":"mixed","name":"$params","description":"This filter will be added with the specified params to the beginning of the list and will therefore be called first during stream operations.  To add a filter to the end of the list, use stream_filter_append()."}],"return":{"type":"resource","values":["FALSE"]},"short":"Attach a filter to a stream","examples":[]},"stream_filter_register":{"name":"stream_filter_register","parameters":[{"type":"string","name":"$filtername","description":"The filter name to be registered."},{"type":"string","name":"$classname","description":"To implement a filter, you need to define a class as an extension of php_user_filter with a number of member functions. When performing read\/write operations on the stream to which your filter is attached, PHP will pass the data through your filter (and any other filters attached to that stream) so that the data may be modified as desired. You must implement the methods exactly as described in php_user_filter - doing otherwise will lead to undefined behaviour."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Register a user defined stream filter","examples":[{"title":"Example #1 Filter for capitalizing characters on foo-bar.txt stream","content":"The example below implements a filter named strtoupper\n     on the foo-bar.txt stream which will capitalize\n     all letter characters written to\/read from that stream."},{"title":"Example #2 Registering a generic filter class to match multiple filter names.","content":"<?php\n\n\/*\u00a0Define\u00a0our\u00a0filter\u00a0class\u00a0*\/\nclass\u00a0string_filter\u00a0extends\u00a0php_user_filter\u00a0{\n\u00a0\u00a0var\u00a0$mode;\n\n\u00a0\u00a0function\u00a0filter($in,\u00a0$out,\u00a0&$consumed,\u00a0$closing)\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0while\u00a0($bucket\u00a0=\u00a0stream_bucket_make_writeable($in))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($this->mode\u00a0==\u00a01)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bucket->data\u00a0=\u00a0strtoupper($bucket->data);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0elseif\u00a0($this->mode\u00a0==\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bucket->data\u00a0=\u00a0strtolower($bucket->data);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$consumed\u00a0+=\u00a0$bucket->datalen;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stream_bucket_append($out,\u00a0$bucket);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return\u00a0PSFS_PASS_ON;\n\u00a0\u00a0}\n\n\u00a0\u00a0function\u00a0onCreate()\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0($this->filtername\u00a0==\u00a0'str.toupper')\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->mode\u00a0=\u00a01;\n\u00a0\u00a0\u00a0\u00a0}\u00a0elseif\u00a0($this->filtername\u00a0==\u00a0'str.tolower')\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->mode\u00a0=\u00a00;\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/*\u00a0Some\u00a0other\u00a0str.*\u00a0filter\u00a0was\u00a0asked\u00a0for,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0report\u00a0failure\u00a0so\u00a0that\u00a0PHP\u00a0will\u00a0keep\u00a0looking\u00a0*\/\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0false;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0return\u00a0true;\n\u00a0\u00a0}\n}\n\n\/*\u00a0Register\u00a0our\u00a0filter\u00a0with\u00a0PHP\u00a0*\/\nstream_filter_register(\"str.*\",\u00a0\"string_filter\")\n\u00a0\u00a0\u00a0\u00a0or\u00a0die(\"Failed\u00a0to\u00a0register\u00a0filter\");\n\n$fp\u00a0=\u00a0fopen(\"foo-bar.txt\",\u00a0\"w\");\n\n\/*\u00a0Attach\u00a0the\u00a0registered\u00a0filter\u00a0to\u00a0the\u00a0stream\u00a0just\u00a0opened\n\u00a0\u00a0\u00a0We\u00a0could\u00a0alternately\u00a0bind\u00a0to\u00a0str.tolower\u00a0here\u00a0*\/\nstream_filter_append($fp,\u00a0\"str.toupper\");\n\nfwrite($fp,\u00a0\"Line1\\n\");\nfwrite($fp,\u00a0\"Word\u00a0-\u00a02\\n\");\nfwrite($fp,\u00a0\"Easy\u00a0As\u00a0123\\n\");\n\nfclose($fp);\n\n\/*\u00a0Read\u00a0the\u00a0contents\u00a0back\u00a0out\n\u00a0*\/\nreadfile(\"foo-bar.txt\");\n?>"}]},"stream_filter_remove":{"name":"stream_filter_remove","parameters":[{"type":"resource","name":"$stream_filter","description":"The stream filter to be removed."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Remove a filter from a stream","examples":[{"title":"Example #1 Dynamicly refiltering a stream","content":"<?php\n\/*\u00a0Open\u00a0a\u00a0test\u00a0file\u00a0for\u00a0reading\u00a0and\u00a0writing\u00a0*\/\n$fp\u00a0=\u00a0fopen(\"test.txt\",\u00a0\"rw\");\n\n$rot13_filter\u00a0=\u00a0stream_filter_append($fp,\u00a0\"string.rot13\",\u00a0STREAM_FILTER_WRITE);\nfwrite($fp,\u00a0\"This\u00a0is\u00a0\");\nstream_filter_remove($rot13_filter);\nfwrite($fp,\u00a0\"a\u00a0test\\n\");\n\nrewind($fp);\nfpassthru($fp);\nfclose($fp);\n\n?>"}]},"stream_get_contents":{"name":"stream_get_contents","parameters":[{"type":"resource","name":"$handle"},{"type":"int","name":"$maxlength","default_value":"-1"},{"type":"int","name":"$offset","default_value":"-1"}],"return":{"type":"string","values":["FALSE"]},"short":"Reads remainder of a stream into a string","examples":[{"title":"Example #1 stream_get_contents() example","content":"<?php\n\nif\u00a0($stream\u00a0=\u00a0fopen('http:\/\/www.example.com',\u00a0'r'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0print\u00a0all\u00a0the\u00a0page\u00a0starting\u00a0at\u00a0the\u00a0offset\u00a010\n\u00a0\u00a0\u00a0\u00a0echo\u00a0stream_get_contents($stream,\u00a0-1,\u00a010);\n\n\u00a0\u00a0\u00a0\u00a0fclose($stream);\n}\n\n\nif\u00a0($stream\u00a0=\u00a0fopen('http:\/\/www.example.net',\u00a0'r'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0print\u00a0the\u00a0first\u00a05\u00a0bytes\n\u00a0\u00a0\u00a0\u00a0echo\u00a0stream_get_contents($stream,\u00a05);\n\n\u00a0\u00a0\u00a0\u00a0fclose($stream);\n}\n\n?>"}]},"stream_get_filters":{"name":"stream_get_filters","parameters":[],"return":{"type":"array","values":[]},"short":"Retrieve list of registered filters","examples":[{"title":"Example #1 Using stream_get_filters()","content":"<?php\n$streamlist\u00a0=\u00a0stream_get_filters();\nprint_r($streamlist);\n?>"}]},"stream_get_line":{"name":"stream_get_line","parameters":[{"type":"resource","name":"$handle","description":"A valid file handle."},{"type":"int","name":"$length","description":"The number of bytes to read from the handle."},{"type":"string","name":"$ending","description":"An optional string delimiter."}],"return":{"type":"string","values":["FALSE"]},"short":"Gets line from stream resource up to a given delimiter","examples":[]},"stream_get_meta_data":{"name":"stream_get_meta_data","parameters":[{"type":"resource","name":"$stream","description":"The stream can be any stream created by fopen(), fsockopen() and pfsockopen()."}],"return":{"type":"array","values":[]},"short":"Retrieves header\/meta data from streams\/file pointers","examples":[{"title":"Example #1 stream_get_meta_data() example","content":"<?php\n$url\u00a0=\u00a0'http:\/\/www.example.com\/';\n\nif\u00a0(!$fp\u00a0=\u00a0fopen($url,\u00a0'r'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0trigger_error(\"Unable\u00a0to\u00a0open\u00a0URL\u00a0($url)\",\u00a0E_USER_ERROR);\n}\n\n$meta\u00a0=\u00a0stream_get_meta_data($fp);\n\nprint_r($meta);\n\nfclose($fp);\n?>"}]},"stream_get_transports":{"name":"stream_get_transports","parameters":[],"return":{"type":"array","values":[]},"short":"Retrieve list of registered socket transports","examples":[{"title":"Example #1 Using stream_get_transports()","content":"<?php\n$xportlist\u00a0=\u00a0stream_get_transports();\nprint_r($xportlist);\n?>"}]},"stream_get_wrappers":{"name":"stream_get_wrappers","parameters":[],"return":{"type":"array","values":[]},"short":"Retrieve list of registered streams","examples":[{"title":"Example #1 stream_get_wrappers() example","content":"<?php\nprint_r(stream_get_wrappers());\n?>"},{"title":"Example #2 Checking for the existence of a stream wrapper","content":"<?php\n\/\/\u00a0check\u00a0for\u00a0the\u00a0existence\u00a0of\u00a0the\u00a0bzip2\u00a0stream\u00a0wrapper\nif\u00a0(in_array('compress.bzip2',\u00a0stream_get_wrappers()))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'compress.bzip2:\/\/\u00a0support\u00a0enabled.';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'compress.bzip2:\/\/\u00a0support\u00a0not\u00a0enabled.';\n}\n?>"}]},"stream_is_local":{"name":"stream_is_local","parameters":[{"type":"mixed","name":"$stream_or_url","description":"The stream resource or URL to check."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Checks if a stream is a local stream","examples":[{"title":"Example #1 stream_is_local() example","content":"Basic usage example."}]},"stream_isatty":{"name":"stream_isatty","parameters":[{"type":"resource","name":"$stream","description":""}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Check if a stream is a TTY","examples":[]},"stream_register_wrapper":{"name":"stream_register_wrapper","parameters":[],"return":{"type":"","values":[]},"short":"Alias of stream_wrapper_register()","examples":[]},"stream_resolve_include_path":{"name":"stream_resolve_include_path","parameters":[{"type":"string","name":"$filename","description":"The filename to resolve."}],"return":{"type":"string","values":["FALSE"]},"short":"\n   Resolve filename against the include path\n  ","examples":[{"title":"Example #1 stream_resolve_include_path() example","content":"Basic usage example."}]},"stream_select":{"name":"stream_select","parameters":[{"type":"int","name":"$tv_sec","description":"The tv_sec and tv_usec together form the timeout parameter, tv_sec specifies the number of seconds while tv_usec the number of microseconds. The timeout is an upper bound on the amount of time that stream_select() will wait before it returns. If tv_sec and tv_usec are both set to 0, stream_select() will not wait for data - instead it will return immediately, indicating the current status of the streams.\n\nIf tv_sec is NULL stream_select() can block indefinitely, returning only when an event on one of the watched streams occurs (or if a signal interrupts the system call).\n\nWarning\n Using a timeout value of 0 allows you to instantaneously poll the status of the streams, however, it is NOT a good idea to use a 0 timeout value in a loop as it will cause your script to consume too much CPU time.\n\n It is much better to specify a timeout value of a few seconds, although if you need to be checking and running other code concurrently, using a timeout value of at least 200000 microseconds will help reduce the CPU usage of your script.\n\n Remember that the timeout value is the maximum time that will elapse; stream_select() will return as soon as the requested streams are ready for use."},{"type":"int","name":"$tv_usec","default_value":"0","description":"See tv_sec description."}],"return":{"type":"int","values":["FALSE"]},"short":"Runs the equivalent of the select() system call on the given\n   arrays of streams with a timeout specified by tv_sec and tv_usec ","examples":[{"title":"Example #1 stream_select() Example","content":"This example checks to see if data has arrived for reading on either\n     $stream1 or $stream2.\n     Since the timeout value is 0 it will return\n     immediately:"}]},"stream_set_blocking":{"name":"stream_set_blocking","parameters":[{"type":"resource","name":"$stream","description":"The stream."},{"type":"bool","name":"$mode","description":"If mode is FALSE, the given stream will be switched to non-blocking mode, and if TRUE, it will be switched to blocking mode.  This affects calls like fgets() and fread() that read from the stream.  In non-blocking mode an fgets() call will always return right away while in blocking mode it will wait for data to become available on the stream."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set blocking\/non-blocking mode on a stream","examples":[]},"stream_set_chunk_size":{"name":"stream_set_chunk_size","parameters":[{"type":"resource","name":"$fp","description":"The target stream."},{"type":"int","name":"$chunk_size","description":"The desired new chunk size."}],"return":{"type":"int","values":["FALSE","PHP_INT_MAX"]},"short":"Set the stream chunk size","examples":[]},"stream_set_read_buffer":{"name":"stream_set_read_buffer","parameters":[{"type":"resource","name":"$stream","description":"The file pointer."},{"type":"int","name":"$buffer","description":"The number of bytes to buffer. If buffer is 0 then read operations are unbuffered.  This ensures that all reads with fread() are completed before other processes are allowed to read from that input stream."}],"return":{"type":"int","values":[]},"short":"Set read file buffering on the given stream","examples":[]},"stream_set_timeout":{"name":"stream_set_timeout","parameters":[{"type":"resource","name":"$stream","description":"The target stream."},{"type":"int","name":"$seconds","description":"The seconds part of the timeout to be set."},{"type":"int","name":"$microseconds","default_value":"0","description":"The microseconds part of the timeout to be set."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set timeout period on a stream","examples":[{"title":"Example #1 stream_set_timeout() example","content":"<?php\n$fp\u00a0=\u00a0fsockopen(\"www.example.com\",\u00a080);\nif\u00a0(!$fp)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unable\u00a0to\u00a0open\\n\";\n}\u00a0else\u00a0{\n\n\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0\"GET\u00a0\/\u00a0HTTP\/1.0\\r\\n\\r\\n\");\n\u00a0\u00a0\u00a0\u00a0stream_set_timeout($fp,\u00a02);\n\u00a0\u00a0\u00a0\u00a0$res\u00a0=\u00a0fread($fp,\u00a02000);\n\n\u00a0\u00a0\u00a0\u00a0$info\u00a0=\u00a0stream_get_meta_data($fp);\n\u00a0\u00a0\u00a0\u00a0fclose($fp);\n\n\u00a0\u00a0\u00a0\u00a0if\u00a0($info['timed_out'])\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0'Connection\u00a0timed\u00a0out!';\n\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0$res;\n\u00a0\u00a0\u00a0\u00a0}\n\n}\n?>"}]},"stream_set_write_buffer":{"name":"stream_set_write_buffer","parameters":[{"type":"resource","name":"$stream","description":"The file pointer."},{"type":"int","name":"$buffer","description":"The number of bytes to buffer. If buffer is 0 then write operations are unbuffered.  This ensures that all writes with fwrite() are completed before other processes are allowed to write to that output stream."}],"return":{"type":"int","values":[]},"short":"Sets write file buffering on the given stream","examples":[{"title":"Example #1 stream_set_write_buffer() example","content":"The following example demonstrates how to use\n     stream_set_write_buffer() to create an unbuffered stream."}]},"stream_socket_accept":{"name":"stream_socket_accept","parameters":[{"type":"resource","name":"$server_socket","description":"The server socket to accept a connection from."},{"type":"float","name":"$timeout","default_value":"ini_get(\"default_socket_timeout\")","description":"Override the default socket accept timeout. Time should be given in seconds."}],"return":{"type":"resource","values":["FALSE"]},"short":"Accept a connection on a socket created by stream_socket_server()","examples":[]},"stream_socket_client":{"name":"stream_socket_client","parameters":[{"type":"string","name":"$remote_socket","description":"Address to the socket to connect to."},{"type":"float","name":"$timeout","default_value":"ini_get(\"default_socket_timeout\")","description":"Number of seconds until the connect() system call should timeout.\n\nNote:\n This parameter only applies when not making asynchronous connection attempts.\n\nNote:\n To set a timeout for reading\/writing data over the socket, use the stream_set_timeout(), as the timeout only applies while making connecting the socket."},{"type":"int","name":"$flags","default_value":"STREAM_CLIENT_CONNECT","description":"Bitmask field which may be set to any combination of connection flags. Currently the select of connection flags is limited to STREAM_CLIENT_CONNECT (default), STREAM_CLIENT_ASYNC_CONNECT and STREAM_CLIENT_PERSISTENT."},{"type":"resource","name":"$context","description":"A valid context resource created with stream_context_create()."}],"return":{"type":"resource","values":["FALSE"]},"short":"Open Internet or Unix domain socket connection","examples":[{"title":"Example #1 stream_socket_client() example","content":"<?php\n$fp\u00a0=\u00a0stream_socket_client(\"tcp:\/\/www.example.com:80\",\u00a0$errno,\u00a0$errstr,\u00a030);\nif\u00a0(!$fp)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$errstr\u00a0($errno)<br\u00a0\/>\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0fwrite($fp,\u00a0\"GET\u00a0\/\u00a0HTTP\/1.0\\r\\nHost:\u00a0www.example.com\\r\\nAccept:\u00a0*\/*\\r\\n\\r\\n\");\n\u00a0\u00a0\u00a0\u00a0while\u00a0(!feof($fp))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0fgets($fp,\u00a01024);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0fclose($fp);\n}\n?>"},{"title":"Example #2 Using UDP connection","content":"Retrieving the day and time from the UDP service \"daytime\" (port 13)\n     on localhost."}]},"stream_socket_enable_crypto":{"name":"stream_socket_enable_crypto","parameters":[{"type":"resource","name":"$stream","description":"The stream resource."},{"type":"bool","name":"$enable","description":"Enable\/disable cryptography on the stream."},{"type":"int","name":"$crypto_type","description":"Setup encryption on the stream. Valid methods are\n\nSTREAM_CRYPTO_METHOD_SSLv2_CLIENT STREAM_CRYPTO_METHOD_SSLv3_CLIENT STREAM_CRYPTO_METHOD_SSLv23_CLIENT STREAM_CRYPTO_METHOD_ANY_CLIENT STREAM_CRYPTO_METHOD_TLS_CLIENT STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT STREAM_CRYPTO_METHOD_SSLv2_SERVER STREAM_CRYPTO_METHOD_SSLv3_SERVER STREAM_CRYPTO_METHOD_SSLv23_SERVER STREAM_CRYPTO_METHOD_ANY_SERVER STREAM_CRYPTO_METHOD_TLS_SERVER STREAM_CRYPTO_METHOD_TLSv1_0_SERVER STREAM_CRYPTO_METHOD_TLSv1_1_SERVER STREAM_CRYPTO_METHOD_TLSv1_2_SERVER\n\nIf omitted, the crypto_type context option on the stream's SSL context will be used instead."},{"type":"resource","name":"$session_stream","description":"Seed the stream with settings from session_stream."}],"return":{"type":"mixed","values":["TRUE","FALSE"]},"short":"Turns encryption on\/off on an already connected socket","examples":[{"title":"Example #1 stream_socket_enable_crypto() example","content":"<?php\n$fp\u00a0=\u00a0stream_socket_client(\"tcp:\/\/myproto.example.com:31337\",\u00a0$errno,\u00a0$errstr,\u00a030);\nif\u00a0(!$fp)\u00a0{\n\u00a0\u00a0\u00a0\u00a0die(\"Unable\u00a0to\u00a0connect:\u00a0$errstr\u00a0($errno)\");\n}\n\n\/*\u00a0Turn\u00a0on\u00a0encryption\u00a0for\u00a0login\u00a0phase\u00a0*\/\nstream_socket_enable_crypto($fp,\u00a0true,\u00a0STREAM_CRYPTO_METHOD_SSLv23_CLIENT);\nfwrite($fp,\u00a0\"USER\u00a0god\\r\\n\");\nfwrite($fp,\u00a0\"PASS\u00a0secret\\r\\n\");\n\n\/*\u00a0Turn\u00a0off\u00a0encryption\u00a0for\u00a0the\u00a0rest\u00a0*\/\nstream_socket_enable_crypto($fp,\u00a0false);\n\nwhile\u00a0($motd\u00a0=\u00a0fgets($fp))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$motd;\n}\n\nfclose($fp);\n?>"}]},"stream_socket_get_name":{"name":"stream_socket_get_name","parameters":[{"type":"resource","name":"$handle","description":"The socket to get the name of."},{"type":"bool","name":"$want_peer","description":"If set to TRUE the remote socket name will be returned, if set to FALSE the local socket name will be returned."}],"return":{"type":"string","values":[]},"short":"Retrieve the name of the local or remote sockets","examples":[]},"stream_socket_pair":{"name":"stream_socket_pair","parameters":[{"type":"int","name":"$domain","description":"The protocol family to be used: STREAM_PF_INET, STREAM_PF_INET6 or STREAM_PF_UNIX"},{"type":"int","name":"$type","description":"The type of communication to be used: STREAM_SOCK_DGRAM, STREAM_SOCK_RAW, STREAM_SOCK_RDM, STREAM_SOCK_SEQPACKET or STREAM_SOCK_STREAM"},{"type":"int","name":"$protocol","description":"The protocol to be used: STREAM_IPPROTO_ICMP, STREAM_IPPROTO_IP, STREAM_IPPROTO_RAW, STREAM_IPPROTO_TCP or STREAM_IPPROTO_UDP"}],"return":{"type":"array","values":["FALSE"]},"short":"\n   Creates a pair of connected, indistinguishable socket streams\n  ","examples":[{"title":"Example #1 A stream_socket_pair() example","content":"This example shows the basic usage of\n     stream_socket_pair() in Inter-Process Comunication."}]},"stream_socket_recvfrom":{"name":"stream_socket_recvfrom","parameters":[{"type":"resource","name":"$socket","description":"The remote socket."},{"type":"int","name":"$length","description":"The number of bytes to receive from the socket."},{"type":"int","name":"$flags","default_value":"0","description":"The value of flags can be any combination of the following:\n\nPossible values for flags\n STREAM_OOB\n Process OOB (out-of-band) data.\n STREAM_PEEK\n Retrieve data from the socket, but do not consume the buffer. Subsequent calls to fread() or stream_socket_recvfrom() will see the same data."}],"return":{"type":"string","values":[]},"short":"Receives data from a socket, connected or not ","examples":[{"title":"Example #1 stream_socket_recvfrom() example","content":"<?php\n\/*\u00a0Open\u00a0a\u00a0server\u00a0socket\u00a0to\u00a0port\u00a01234\u00a0on\u00a0localhost\u00a0*\/\n$server\u00a0=\u00a0stream_socket_server('tcp:\/\/127.0.0.1:1234');\n\n\/*\u00a0Accept\u00a0a\u00a0connection\u00a0*\/\n$socket\u00a0=\u00a0stream_socket_accept($server);\n\n\/*\u00a0Grab\u00a0a\u00a0packet\u00a0(1500\u00a0is\u00a0a\u00a0typical\u00a0MTU\u00a0size)\u00a0of\u00a0OOB\u00a0data\u00a0*\/\necho\u00a0\"Received\u00a0Out-Of-Band:\u00a0'\"\u00a0.\u00a0stream_socket_recvfrom($socket,\u00a01500,\u00a0STREAM_OOB)\u00a0.\u00a0\"'\\n\";\n\n\/*\u00a0Take\u00a0a\u00a0peek\u00a0at\u00a0the\u00a0normal\u00a0in-band\u00a0data,\u00a0but\u00a0don't\u00a0comsume\u00a0it.\u00a0*\/\necho\u00a0\"Data:\u00a0'\"\u00a0.\u00a0stream_socket_recvfrom($socket,\u00a01500,\u00a0STREAM_PEEK)\u00a0.\u00a0\"'\\n\";\n\n\/*\u00a0Get\u00a0the\u00a0exact\u00a0same\u00a0packet\u00a0again,\u00a0but\u00a0remove\u00a0it\u00a0from\u00a0the\u00a0buffer\u00a0this\u00a0time.\u00a0*\/\necho\u00a0\"Data:\u00a0'\"\u00a0.\u00a0stream_socket_recvfrom($socket,\u00a01500)\u00a0.\u00a0\"'\\n\";\n\n\/*\u00a0Close\u00a0it\u00a0up\u00a0*\/\nfclose($socket);\nfclose($server);\n?>"}]},"stream_socket_sendto":{"name":"stream_socket_sendto","parameters":[{"type":"resource","name":"$socket","description":"The socket to send data to."},{"type":"string","name":"$data","description":"The data to be sent."},{"type":"int","name":"$flags","default_value":"0","description":"The value of flags can be any combination of the following:\n\npossible values for flags\n STREAM_OOB\n Process OOB (out-of-band) data."},{"type":"string","name":"$address","description":"The address specified when the socket stream was created will be used unless an alternate address is specified in address.\n\nIf specified, it must be in dotted quad (or [ipv6]) format."}],"return":{"type":"int","values":[]},"short":"Sends a message to a socket, whether it is connected or not ","examples":[{"title":"Example #1 stream_socket_sendto() Example","content":"<?php\n\/*\u00a0Open\u00a0a\u00a0socket\u00a0to\u00a0port\u00a01234\u00a0on\u00a0localhost\u00a0*\/\n$socket\u00a0=\u00a0stream_socket_client('tcp:\/\/127.0.0.1:1234');\n\n\/*\u00a0Send\u00a0ordinary\u00a0data\u00a0via\u00a0ordinary\u00a0channels.\u00a0*\/\nfwrite($socket,\u00a0\"Normal\u00a0data\u00a0transmit.\");\n\n\/*\u00a0Send\u00a0more\u00a0data\u00a0out\u00a0of\u00a0band.\u00a0*\/\nstream_socket_sendto($socket,\u00a0\"Out\u00a0of\u00a0Band\u00a0data.\",\u00a0STREAM_OOB);\n\n\/*\u00a0Close\u00a0it\u00a0up\u00a0*\/\nfclose($socket);\n?>"}]},"stream_socket_server":{"name":"stream_socket_server","parameters":[{"type":"string","name":"$local_socket","description":"The type of socket created is determined by the transport specified using standard URL formatting: transport:\/\/target.\n\nFor Internet Domain sockets (AF_INET) such as TCP and UDP, the target portion of the remote_socket parameter should consist of a hostname or IP address followed by a colon and a port number.  For Unix domain sockets, the target portion should point to the socket file on the filesystem.\n\nDepending on the environment, Unix domain sockets may not be available. A list of available transports can be retrieved using stream_get_transports(). See List of Supported Socket Transports for a list of bulitin transports."},{"type":"int","name":"$flags","default_value":"STREAM_SERVER_BIND | STREAM_SERVER_LISTEN","description":"A bitmask field which may be set to any combination of socket creation flags.\n\nNote:\n For UDP sockets, you must use STREAM_SERVER_BIND as the flags parameter."},{"type":"resource","name":"$context","description":""}],"return":{"type":"resource","values":["FALSE"]},"short":"Create an Internet or Unix domain server socket","examples":[{"title":"Example #1 Using TCP server sockets","content":"<?php\n$socket\u00a0=\u00a0stream_socket_server(\"tcp:\/\/0.0.0.0:8000\",\u00a0$errno,\u00a0$errstr);\nif\u00a0(!$socket)\u00a0{\n\u00a0\u00a0echo\u00a0\"$errstr\u00a0($errno)<br\u00a0\/>\\n\";\n}\u00a0else\u00a0{\n\u00a0\u00a0while\u00a0($conn\u00a0=\u00a0stream_socket_accept($socket))\u00a0{\n\u00a0\u00a0\u00a0\u00a0fwrite($conn,\u00a0'The\u00a0local\u00a0time\u00a0is\u00a0'\u00a0.\u00a0date('n\/j\/Y\u00a0g:i\u00a0a')\u00a0.\u00a0\"\\n\");\n\u00a0\u00a0\u00a0\u00a0fclose($conn);\n\u00a0\u00a0}\n\u00a0\u00a0fclose($socket);\n}\n?>"},{"title":"Example #2 Using UDP server sockets","content":"<?php\n$socket\u00a0=\u00a0stream_socket_server(\"udp:\/\/127.0.0.1:1113\",\u00a0$errno,\u00a0$errstr,\u00a0STREAM_SERVER_BIND);\nif\u00a0(!$socket)\u00a0{\n\u00a0\u00a0\u00a0\u00a0die(\"$errstr\u00a0($errno)\");\n}\n\ndo\u00a0{\n\u00a0\u00a0\u00a0\u00a0$pkt\u00a0=\u00a0stream_socket_recvfrom($socket,\u00a01,\u00a00,\u00a0$peer);\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$peer\\n\";\n\u00a0\u00a0\u00a0\u00a0stream_socket_sendto($socket,\u00a0date(\"D\u00a0M\u00a0j\u00a0H:i:s\u00a0Y\\r\\n\"),\u00a00,\u00a0$peer);\n}\u00a0while\u00a0($pkt\u00a0!==\u00a0false);\n\n?>"}]},"stream_socket_shutdown":{"name":"stream_socket_shutdown","parameters":[{"type":"resource","name":"$stream","description":"An open stream (opened with stream_socket_client(), for example)"},{"type":"int","name":"$how","description":"One of the following constants: STREAM_SHUT_RD (disable further receptions), STREAM_SHUT_WR (disable further transmissions) or STREAM_SHUT_RDWR (disable further receptions and transmissions)."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Shutdown a full-duplex connection","examples":[{"title":"Example #1 A stream_socket_shutdown() example","content":"<?php\n\n$server\u00a0=\u00a0stream_socket_server('tcp:\/\/127.0.0.1:1337');\n$client\u00a0=\u00a0stream_socket_client('tcp:\/\/127.0.0.1:1337');\n\nvar_dump(fputs($client,\u00a0\"hello\"));\n\nstream_socket_shutdown($client,\u00a0STREAM_SHUT_WR);\nvar_dump(fputs($client,\u00a0\"hello\"));\u00a0\/\/\u00a0doesn't\u00a0work\u00a0now\n\n?>"}]},"stream_supports_lock":{"name":"stream_supports_lock","parameters":[{"type":"resource","name":"$stream","description":"The stream to check."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Tells whether the stream supports locking","examples":[]},"stream_wrapper_register":{"name":"stream_wrapper_register","parameters":[{"type":"string","name":"$protocol","description":"The wrapper name to be registered."},{"type":"string","name":"$classname","description":"The classname which implements the protocol."},{"type":"int","name":"$flags","default_value":"0","description":"Should be set to STREAM_IS_URL if protocol is a URL protocol. Default is 0, local stream."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Register a URL wrapper implemented as a PHP class","examples":[{"title":"Example #1 How to register a stream wrapper","content":"<?php\n$existed\u00a0=\u00a0in_array(\"var\",\u00a0stream_get_wrappers());\nif\u00a0($existed)\u00a0{\n\u00a0\u00a0\u00a0\u00a0stream_wrapper_unregister(\"var\");\n}\nstream_wrapper_register(\"var\",\u00a0\"VariableStream\");\n$myvar\u00a0=\u00a0\"\";\n\n$fp\u00a0=\u00a0fopen(\"var:\/\/myvar\",\u00a0\"r+\");\n\nfwrite($fp,\u00a0\"line1\\n\");\nfwrite($fp,\u00a0\"line2\\n\");\nfwrite($fp,\u00a0\"line3\\n\");\n\nrewind($fp);\nwhile\u00a0(!feof($fp))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0fgets($fp);\n}\nfclose($fp);\nvar_dump($myvar);\n\nif\u00a0($existed)\u00a0{\n\u00a0\u00a0\u00a0\u00a0stream_wrapper_restore(\"var\");\n}\n\n?>"}]},"stream_wrapper_restore":{"name":"stream_wrapper_restore","parameters":[{"type":"string","name":"$protocol","description":""}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Restores a previously unregistered built-in wrapper","examples":[]},"stream_wrapper_unregister":{"name":"stream_wrapper_unregister","parameters":[{"type":"string","name":"$protocol","description":""}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Unregister a URL wrapper","examples":[]},"strftime":{"name":"strftime","parameters":[{"type":"string","name":"$format","description":"\n\nThe following characters are recognized in the format parameter string\n format Description Example returned values Day --- --- %a An abbreviated textual representation of the day Sun through Sat %A A full textual representation of the day Sunday through Saturday %d Two-digit day of the month (with leading zeros) 01 to 31 %e\n Day of the month, with a space preceding single digits. Not implemented as described on Windows. See below for more information.\n 1 to 31 %j Day of the year, 3 digits with leading zeros 001 to 366 %u ISO-8601 numeric representation of the day of the week 1 (for Monday) through 7 (for Sunday) %w Numeric representation of the day of the week 0 (for Sunday) through 6 (for Saturday) Week --- --- %U Week number of the given year, starting with the first Sunday as the first week 13 (for the 13th full week of the year) %V ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week 01 through 53 (where 53 accounts for an overlapping week) %W A numeric representation of the week of the year, starting with the first Monday as the first week 46 (for the 46th week of the year beginning with a Monday) Month --- --- %b Abbreviated month name, based on the locale Jan through Dec %B Full month name, based on the locale January through December %h Abbreviated month name, based on the locale (an alias of %b) Jan through Dec %m Two digit representation of the month 01 (for January) through 12 (for December) Year --- --- %C Two digit representation of the century (year divided by 100, truncated to an integer) 19 for the 20th Century %g Two digit representation of the year going by ISO-8601:1988 standards (see %V) Example: 09 for the week of January 6, 2009 %G The full four-digit version of %g Example: 2008 for the week of January 3, 2009 %y Two digit representation of the year Example: 09 for 2009, 79 for 1979 %Y Four digit representation for the year Example: 2038 Time --- --- %H Two digit representation of the hour in 24-hour format 00 through 23 %k Hour in 24-hour format, with a space preceding single digits 0 through 23 %I Two digit representation of the hour in 12-hour format 01 through 12 %l (lower-case 'L') Hour in 12-hour format, with a space preceding single digits 1 through 12 %M Two digit representation of the minute 00 through 59 %p UPPER-CASE 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23 %P lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23 %r Same as \"%I:%M:%S %p\" Example: 09:34:17 PM for 21:34:17 %R Same as \"%H:%M\" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM %S Two digit representation of the second 00 through 59 %T Same as \"%H:%M:%S\" Example: 21:34:17 for 09:34:17 PM %X Preferred time representation based on locale, without the date Example: 03:59:16 or 15:59:16 %z The time zone offset. Not implemented as described on Windows. See below for more information. Example: -0500 for US Eastern Time %Z The time zone abbreviation. Not implemented as described on Windows. See below for more information. Example: EST for Eastern Time Time and Date Stamps --- --- %c Preferred date and time stamp based on locale Example: Tue Feb  5 00:45:10 2009 for February 5, 2009 at 12:45:10 AM %D Same as \"%m\/%d\/%y\" Example: 02\/05\/09 for February 5, 2009 %F Same as \"%Y-%m-%d\" (commonly used in database datestamps) Example: 2009-02-05 for February 5, 2009 %s Unix Epoch Time timestamp (same as the time() function) Example: 305815200 for September 10, 1979 08:40:00 AM %x Preferred date representation based on locale, without the time Example: 02\/05\/09 for February 5, 2009 Miscellaneous --- --- %n A newline character (\"\\n\") --- %t A Tab character (\"\\t\") --- %% A literal percentage character (\"%\") ---\n\nMaximum length of this parameter is 1023 characters.\n\nWarning\n Contrary to ISO-9899:1999, Sun Solaris starts with Sunday as 1.  As a result, %u may not function as described in this manual.\n\nWarning\n Windows only:\n\n The %e modifier is not supported in the Windows implementation of this function. To achieve this value, the %#d modifier can be used instead. The example below illustrates how to write a cross platform compatible function.\n\n The %z and %Z modifiers both return the time zone name instead of the offset or abbreviation.\n\nWarning\n Mac OS X only: The %P modifier is not supported in the Mac OS X implementation of this function."},{"type":"int","name":"$timestamp","default_value":"time()","description":"The optional timestamp parameter is an integer Unix timestamp that defaults to the current local time if a timestamp is not given. In other words, it defaults to the value of time()."}],"return":{"type":"string","values":[]},"short":"Format a local time\/date according to locale settings","examples":[{"title":"Example #1 strftime() locale examples","content":"<?php\nsetlocale(LC_TIME,\u00a0\"C\");\necho\u00a0strftime(\"%A\");\nsetlocale(LC_TIME,\u00a0\"fi_FI\");\necho\u00a0strftime(\"\u00a0in\u00a0Finnish\u00a0is\u00a0%A,\");\nsetlocale(LC_TIME,\u00a0\"fr_FR\");\necho\u00a0strftime(\"\u00a0in\u00a0French\u00a0%A\u00a0and\");\nsetlocale(LC_TIME,\u00a0\"de_DE\");\necho\u00a0strftime(\"\u00a0in\u00a0German\u00a0%A.\\n\");\n?>"},{"title":"Example #2 ISO 8601:1988 week number example","content":"<?php\n\/*\u00a0\u00a0\u00a0\u00a0\u00a0December\u00a02002\u00a0\/\u00a0January\u00a02003\nISOWk\u00a0\u00a0M\u00a0\u00a0\u00a0Tu\u00a0\u00a0W\u00a0\u00a0\u00a0Thu\u00a0F\u00a0\u00a0\u00a0Sa\u00a0\u00a0Su\n-----\u00a0----------------------------\n51\u00a0\u00a0\u00a0\u00a0\u00a016\u00a0\u00a017\u00a0\u00a018\u00a0\u00a019\u00a0\u00a020\u00a0\u00a021\u00a0\u00a022\n52\u00a0\u00a0\u00a0\u00a0\u00a023\u00a0\u00a024\u00a0\u00a025\u00a0\u00a026\u00a0\u00a027\u00a0\u00a028\u00a0\u00a029\n1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a030\u00a0\u00a031\u00a0\u00a0\u00a01\u00a0\u00a0\u00a02\u00a0\u00a0\u00a03\u00a0\u00a0\u00a04\u00a0\u00a0\u00a05\n2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a06\u00a0\u00a0\u00a07\u00a0\u00a0\u00a08\u00a0\u00a0\u00a09\u00a0\u00a010\u00a0\u00a011\u00a0\u00a012\n3\u00a0\u00a0\u00a0\u00a0\u00a0\u00a013\u00a0\u00a014\u00a0\u00a015\u00a0\u00a016\u00a0\u00a017\u00a0\u00a018\u00a0\u00a019\u00a0\u00a0\u00a0*\/\n\n\/\/\u00a0Outputs:\u00a012\/28\/2002\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a052,2002,2002\necho\u00a0\"12\/28\/2002\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",\u00a0strtotime(\"12\/28\/2002\"))\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0Outputs:\u00a012\/30\/2002\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a01,2003,2002\necho\u00a0\"12\/30\/2002\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",\u00a0strtotime(\"12\/30\/2002\"))\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0Outputs:\u00a01\/3\/2003\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a01,2003,2003\necho\u00a0\"1\/3\/2003\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"1\/3\/2003\"))\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0Outputs:\u00a01\/10\/2003\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a02,2003,2003\necho\u00a0\"1\/10\/2003\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"1\/10\/2003\"))\u00a0.\u00a0\"\\n\";\n\n\n\n\/*\u00a0\u00a0\u00a0\u00a0\u00a0December\u00a02004\u00a0\/\u00a0January\u00a02005\nISOWk\u00a0\u00a0M\u00a0\u00a0\u00a0Tu\u00a0\u00a0W\u00a0\u00a0\u00a0Thu\u00a0F\u00a0\u00a0\u00a0Sa\u00a0\u00a0Su\n-----\u00a0----------------------------\n51\u00a0\u00a0\u00a0\u00a0\u00a013\u00a0\u00a014\u00a0\u00a015\u00a0\u00a016\u00a0\u00a017\u00a0\u00a018\u00a0\u00a019\n52\u00a0\u00a0\u00a0\u00a0\u00a020\u00a0\u00a021\u00a0\u00a022\u00a0\u00a023\u00a0\u00a024\u00a0\u00a025\u00a0\u00a026\n53\u00a0\u00a0\u00a0\u00a0\u00a027\u00a0\u00a028\u00a0\u00a029\u00a0\u00a030\u00a0\u00a031\u00a0\u00a0\u00a01\u00a0\u00a0\u00a02\n1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03\u00a0\u00a0\u00a04\u00a0\u00a0\u00a05\u00a0\u00a0\u00a06\u00a0\u00a0\u00a07\u00a0\u00a0\u00a08\u00a0\u00a0\u00a09\n2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a010\u00a0\u00a011\u00a0\u00a012\u00a0\u00a013\u00a0\u00a014\u00a0\u00a015\u00a0\u00a016\u00a0\u00a0\u00a0*\/\n\n\/\/\u00a0Outputs:\u00a012\/23\/2004\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a052,2004,2004\necho\u00a0\"12\/23\/2004\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"12\/23\/2004\"))\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0Outputs:\u00a012\/31\/2004\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a053,2004,2004\necho\u00a0\"12\/31\/2004\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"12\/31\/2004\"))\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0Outputs:\u00a01\/2\/2005\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a053,2004,2005\necho\u00a0\"1\/2\/2005\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"1\/2\/2005\"))\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0Outputs:\u00a01\/3\/2005\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a01,2005,2005\necho\u00a0\"1\/3\/2005\u00a0-\u00a0%V,%G,%Y\u00a0=\u00a0\"\u00a0.\u00a0strftime(\"%V,%G,%Y\",strtotime(\"1\/3\/2005\"))\u00a0.\u00a0\"\\n\";\n\n?>"},{"title":"Example #3 Cross platform compatible example using the %e modifier","content":"<?php\n\n\/\/\u00a0Jan\u00a01:\u00a0results\u00a0in:\u00a0'%e%1%'\u00a0(%%,\u00a0e,\u00a0%%,\u00a0%e,\u00a0%%)\n$format\u00a0=\u00a0'%%e%%%e%%';\n\n\/\/\u00a0Check\u00a0for\u00a0Windows\u00a0to\u00a0find\u00a0and\u00a0replace\u00a0the\u00a0%e\u00a0\n\/\/\u00a0modifier\u00a0correctly\nif\u00a0(strtoupper(substr(PHP_OS,\u00a00,\u00a03))\u00a0==\u00a0'WIN')\u00a0{\n\u00a0\u00a0\u00a0\u00a0$format\u00a0=\u00a0preg_replace('#(?<!%)((?:%%)*)%e#',\u00a0'\\1%#d',\u00a0$format);\n}\n\necho\u00a0strftime($format);\n?>"},{"title":"Example #4 Display all known and unknown formats.","content":"<?php\n\/\/\u00a0Describe\u00a0the\u00a0formats.\n$strftimeFormats\u00a0=\u00a0array(\n\u00a0\u00a0\u00a0\u00a0'A'\u00a0=>\u00a0'A\u00a0full\u00a0textual\u00a0representation\u00a0of\u00a0the\u00a0day',\n\u00a0\u00a0\u00a0\u00a0'B'\u00a0=>\u00a0'Full\u00a0month\u00a0name,\u00a0based\u00a0on\u00a0the\u00a0locale',\n\u00a0\u00a0\u00a0\u00a0'C'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0century\u00a0(year\u00a0divided\u00a0by\u00a0100,\u00a0truncated\u00a0to\u00a0an\u00a0integer)',\n\u00a0\u00a0\u00a0\u00a0'D'\u00a0=>\u00a0'Same\u00a0as\u00a0\"%m\/%d\/%y\"',\n\u00a0\u00a0\u00a0\u00a0'E'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'F'\u00a0=>\u00a0'Same\u00a0as\u00a0\"%Y-%m-%d\"',\n\u00a0\u00a0\u00a0\u00a0'G'\u00a0=>\u00a0'The\u00a0full\u00a0four-digit\u00a0version\u00a0of\u00a0%g',\n\u00a0\u00a0\u00a0\u00a0'H'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0hour\u00a0in\u00a024-hour\u00a0format',\n\u00a0\u00a0\u00a0\u00a0'I'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0hour\u00a0in\u00a012-hour\u00a0format',\n\u00a0\u00a0\u00a0\u00a0'J'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'K'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'L'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'M'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0minute',\n\u00a0\u00a0\u00a0\u00a0'N'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'O'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'P'\u00a0=>\u00a0'lower-case\u00a0\"am\"\u00a0or\u00a0\"pm\"\u00a0based\u00a0on\u00a0the\u00a0given\u00a0time',\n\u00a0\u00a0\u00a0\u00a0'Q'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'R'\u00a0=>\u00a0'Same\u00a0as\u00a0\"%H:%M\"',\n\u00a0\u00a0\u00a0\u00a0'S'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0second',\n\u00a0\u00a0\u00a0\u00a0'T'\u00a0=>\u00a0'Same\u00a0as\u00a0\"%H:%M:%S\"',\n\u00a0\u00a0\u00a0\u00a0'U'\u00a0=>\u00a0'Week\u00a0number\u00a0of\u00a0the\u00a0given\u00a0year,\u00a0starting\u00a0with\u00a0the\u00a0first\u00a0Sunday\u00a0as\u00a0the\u00a0first\u00a0week',\n\u00a0\u00a0\u00a0\u00a0'V'\u00a0=>\u00a0'ISO-8601:1988\u00a0week\u00a0number\u00a0of\u00a0the\u00a0given\u00a0year,\u00a0starting\u00a0with\u00a0the\u00a0first\u00a0week\u00a0of\u00a0the\u00a0year\u00a0with\u00a0at\u00a0least\u00a04\u00a0weekdays,\u00a0with\u00a0Monday\u00a0being\u00a0the\u00a0start\u00a0of\u00a0the\u00a0week',\n\u00a0\u00a0\u00a0\u00a0'W'\u00a0=>\u00a0'A\u00a0numeric\u00a0representation\u00a0of\u00a0the\u00a0week\u00a0of\u00a0the\u00a0year,\u00a0starting\u00a0with\u00a0the\u00a0first\u00a0Monday\u00a0as\u00a0the\u00a0first\u00a0week',\n\u00a0\u00a0\u00a0\u00a0'X'\u00a0=>\u00a0'Preferred\u00a0time\u00a0representation\u00a0based\u00a0on\u00a0locale,\u00a0without\u00a0the\u00a0date',\n\u00a0\u00a0\u00a0\u00a0'Y'\u00a0=>\u00a0'Four\u00a0digit\u00a0representation\u00a0for\u00a0the\u00a0year',\n\u00a0\u00a0\u00a0\u00a0'Z'\u00a0=>\u00a0'The\u00a0time\u00a0zone\u00a0offset\/abbreviation\u00a0option\u00a0NOT\u00a0given\u00a0by\u00a0%z\u00a0(depends\u00a0on\u00a0operating\u00a0system)',\n\u00a0\u00a0\u00a0\u00a0'a'\u00a0=>\u00a0'An\u00a0abbreviated\u00a0textual\u00a0representation\u00a0of\u00a0the\u00a0day',\n\u00a0\u00a0\u00a0\u00a0'b'\u00a0=>\u00a0'Abbreviated\u00a0month\u00a0name,\u00a0based\u00a0on\u00a0the\u00a0locale',\n\u00a0\u00a0\u00a0\u00a0'c'\u00a0=>\u00a0'Preferred\u00a0date\u00a0and\u00a0time\u00a0stamp\u00a0based\u00a0on\u00a0local',\n\u00a0\u00a0\u00a0\u00a0'd'\u00a0=>\u00a0'Two-digit\u00a0day\u00a0of\u00a0the\u00a0month\u00a0(with\u00a0leading\u00a0zeros)',\n\u00a0\u00a0\u00a0\u00a0'e'\u00a0=>\u00a0'Day\u00a0of\u00a0the\u00a0month,\u00a0with\u00a0a\u00a0space\u00a0preceding\u00a0single\u00a0digits',\n\u00a0\u00a0\u00a0\u00a0'f'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'g'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0year\u00a0going\u00a0by\u00a0ISO-8601:1988\u00a0standards\u00a0(see\u00a0%V)',\n\u00a0\u00a0\u00a0\u00a0'h'\u00a0=>\u00a0'Abbreviated\u00a0month\u00a0name,\u00a0based\u00a0on\u00a0the\u00a0locale\u00a0(an\u00a0alias\u00a0of\u00a0%b)',\n\u00a0\u00a0\u00a0\u00a0'i'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'j'\u00a0=>\u00a0'Day\u00a0of\u00a0the\u00a0year,\u00a03\u00a0digits\u00a0with\u00a0leading\u00a0zeros',\n\u00a0\u00a0\u00a0\u00a0'k'\u00a0=>\u00a0'Hour\u00a0in\u00a024-hour\u00a0format,\u00a0with\u00a0a\u00a0space\u00a0preceding\u00a0single\u00a0digits',\n\u00a0\u00a0\u00a0\u00a0'l'\u00a0=>\u00a0'Hour\u00a0in\u00a012-hour\u00a0format,\u00a0with\u00a0a\u00a0space\u00a0preceding\u00a0single\u00a0digits',\n\u00a0\u00a0\u00a0\u00a0'm'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0month',\n\u00a0\u00a0\u00a0\u00a0'n'\u00a0=>\u00a0'A\u00a0newline\u00a0character\u00a0(\"\\n\")',\n\u00a0\u00a0\u00a0\u00a0'o'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'p'\u00a0=>\u00a0'UPPER-CASE\u00a0\"AM\"\u00a0or\u00a0\"PM\"\u00a0based\u00a0on\u00a0the\u00a0given\u00a0time',\n\u00a0\u00a0\u00a0\u00a0'q'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'r'\u00a0=>\u00a0'Same\u00a0as\u00a0\"%I:%M:%S\u00a0%p\"',\n\u00a0\u00a0\u00a0\u00a0's'\u00a0=>\u00a0'Unix\u00a0Epoch\u00a0Time\u00a0timestamp',\n\u00a0\u00a0\u00a0\u00a0't'\u00a0=>\u00a0'A\u00a0Tab\u00a0character\u00a0(\"\\t\")',\n\u00a0\u00a0\u00a0\u00a0'u'\u00a0=>\u00a0'ISO-8601\u00a0numeric\u00a0representation\u00a0of\u00a0the\u00a0day\u00a0of\u00a0the\u00a0week',\n\u00a0\u00a0\u00a0\u00a0'v'\u00a0=>\u00a0'',\n\u00a0\u00a0\u00a0\u00a0'w'\u00a0=>\u00a0'Numeric\u00a0representation\u00a0of\u00a0the\u00a0day\u00a0of\u00a0the\u00a0week',\n\u00a0\u00a0\u00a0\u00a0'x'\u00a0=>\u00a0'Preferred\u00a0date\u00a0representation\u00a0based\u00a0on\u00a0locale,\u00a0without\u00a0the\u00a0time',\n\u00a0\u00a0\u00a0\u00a0'y'\u00a0=>\u00a0'Two\u00a0digit\u00a0representation\u00a0of\u00a0the\u00a0year',\n\u00a0\u00a0\u00a0\u00a0'z'\u00a0=>\u00a0'Either\u00a0the\u00a0time\u00a0zone\u00a0offset\u00a0from\u00a0UTC\u00a0or\u00a0the\u00a0abbreviation\u00a0(depends\u00a0on\u00a0operating\u00a0system)',\n\u00a0\u00a0\u00a0\u00a0'%'\u00a0=>\u00a0'A\u00a0literal\u00a0percentage\u00a0character\u00a0(\"%\")',\n);\n\n\/\/\u00a0Results.\n$strftimeValues\u00a0=\u00a0array();\n\n\/\/\u00a0Evaluate\u00a0the\u00a0formats\u00a0whilst\u00a0suppressing\u00a0any\u00a0errors.\nforeach($strftimeFormats\u00a0as\u00a0$format\u00a0=>\u00a0$description){\n\u00a0\u00a0\u00a0\u00a0if\u00a0(False\u00a0!==\u00a0($value\u00a0=\u00a0@strftime(\"%{$format}\"))){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$strftimeValues[$format]\u00a0=\u00a0$value;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/\u00a0Find\u00a0the\u00a0longest\u00a0value.\n$maxValueLength\u00a0=\u00a02\u00a0+\u00a0max(array_map('strlen',\u00a0$strftimeValues));\n\n\/\/\u00a0Report\u00a0known\u00a0formats.\nforeach($strftimeValues\u00a0as\u00a0$format\u00a0=>\u00a0$value){\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Known\u00a0format\u00a0\u00a0\u00a0:\u00a0'{$format}'\u00a0=\u00a0\",\u00a0str_pad(\"'{$value}'\",\u00a0$maxValueLength),\u00a0\"\u00a0(\u00a0{$strftimeFormats[$format]}\u00a0)\\n\";\n}\n\n\/\/\u00a0Report\u00a0unknown\u00a0formats.\nforeach(array_diff_key($strftimeFormats,\u00a0$strftimeValues)\u00a0as\u00a0$format\u00a0=>\u00a0$description){\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Unknown\u00a0format\u00a0:\u00a0'{$format}'\u00a0\u00a0\u00a0\",\u00a0str_pad('\u00a0',\u00a0$maxValueLength),\u00a0($description\u00a0?\u00a0\"\u00a0(\u00a0{$description}\u00a0)\"\u00a0:\u00a0''),\u00a0\"\\n\";\n}\n?>"}]},"strip_tags":{"name":"strip_tags","parameters":[{"type":"string","name":"$str","description":"The input string."},{"type":"string","name":"$allowable_tags","description":"You can use the optional second parameter to specify tags which should not be stripped.\n\nNote:\n HTML comments and PHP tags are also stripped. This is hardcoded and can not be changed with allowable_tags.\n\nNote:\n In PHP 5.3.4 and later, self-closing XHTML tags are ignored and only non-self-closing tags should be used in allowable_tags. For example, to allow both <br> and <br\/>, you should use:\n\n\n\n <?php strip_tags($input,\u00a0'<br>'); ?>"}],"return":{"type":"string","values":[]},"short":"Strip HTML and PHP tags from a string","examples":[{"title":"Example #1 strip_tags() example","content":"<?php\n$text\u00a0=\u00a0'<p>Test\u00a0paragraph.<\/p><!--\u00a0Comment\u00a0-->\u00a0<a\u00a0href=\"#fragment\">Other\u00a0text<\/a>';\necho\u00a0strip_tags($text);\necho\u00a0\"\\n\";\n\n\/\/\u00a0Allow\u00a0<p>\u00a0and\u00a0<a>\necho\u00a0strip_tags($text,\u00a0'<p><a>');\n?>"}]},"stripcslashes":{"name":"stripcslashes","parameters":[{"type":"string","name":"$str","description":"The string to be unescaped."}],"return":{"type":"string","values":[]},"short":"Un-quote string quoted with addcslashes()","examples":[]},"stripos":{"name":"stripos","parameters":[{"type":"string","name":"$haystack","description":"The string to search in."},{"type":"string","name":"$needle","description":"Note that the needle may be a string of one or more characters.\n\nIf needle is not a string, it is converted to an integer and applied as the ordinal value of a character."},{"type":"int","name":"$offset","default_value":"0","description":"If specified, search will start this number of characters counted from the beginning of the string. If the offset is negative, the search will start this number of characters counted from the end of the string."}],"return":{"type":"int","values":["FALSE"]},"short":"Find the position of the first occurrence of a case-insensitive substring in a string","examples":[{"title":"Example #1 stripos() examples","content":"<?php\n$findme\u00a0\u00a0\u00a0\u00a0=\u00a0'a';\n$mystring1\u00a0=\u00a0'xyz';\n$mystring2\u00a0=\u00a0'ABC';\n\n$pos1\u00a0=\u00a0stripos($mystring1,\u00a0$findme);\n$pos2\u00a0=\u00a0stripos($mystring2,\u00a0$findme);\n\n\/\/\u00a0Nope,\u00a0'a'\u00a0is\u00a0certainly\u00a0not\u00a0in\u00a0'xyz'\nif\u00a0($pos1\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$findme'\u00a0was\u00a0not\u00a0found\u00a0in\u00a0the\u00a0string\u00a0'$mystring1'\";\n}\n\n\/\/\u00a0Note\u00a0our\u00a0use\u00a0of\u00a0===.\u00a0\u00a0Simply\u00a0==\u00a0would\u00a0not\u00a0work\u00a0as\u00a0expected\n\/\/\u00a0because\u00a0the\u00a0position\u00a0of\u00a0'a'\u00a0is\u00a0the\u00a00th\u00a0(first)\u00a0character.\nif\u00a0($pos2\u00a0!==\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"We\u00a0found\u00a0'$findme'\u00a0in\u00a0'$mystring2'\u00a0at\u00a0position\u00a0$pos2\";\n}\n?>"}]},"stripslashes":{"name":"stripslashes","parameters":[{"type":"string","name":"$str","description":"The input string."}],"return":{"type":"string","values":[]},"short":"Un-quotes a quoted string","examples":[{"title":"Example #1 A stripslashes() example","content":"<?php\n$str\u00a0=\u00a0\"Is\u00a0your\u00a0name\u00a0O\\'reilly?\";\n\n\/\/\u00a0Outputs:\u00a0Is\u00a0your\u00a0name\u00a0O'reilly?\necho\u00a0stripslashes($str);\n?>"},{"title":"Example #2 Using stripslashes() on an array","content":"<?php\nfunction\u00a0stripslashes_deep($value)\n{\n\u00a0\u00a0\u00a0\u00a0$value\u00a0=\u00a0is_array($value)\u00a0?\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0array_map('stripslashes_deep',\u00a0$value)\u00a0:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stripslashes($value);\n\n\u00a0\u00a0\u00a0\u00a0return\u00a0$value;\n}\n\n\/\/\u00a0Example\n$array\u00a0=\u00a0array(\"f\\\\'oo\",\u00a0\"b\\\\'ar\",\u00a0array(\"fo\\\\'o\",\u00a0\"b\\\\'ar\"));\n$array\u00a0=\u00a0stripslashes_deep($array);\n\n\/\/\u00a0Output\nprint_r($array);\n?>"}]},"stristr":{"name":"stristr","parameters":[{"type":"string","name":"$haystack","description":"The string to search in"},{"type":"mixed","name":"$needle","description":"If needle is not a string, it is converted to an integer and applied as the ordinal value of a character."},{"type":"bool","name":"$before_needle","default_value":"FALSE","description":"If TRUE, stristr() returns the part of the haystack before the first occurrence of the needle (excluding needle)."}],"return":{"type":"string","values":["FALSE"]},"short":"Case-insensitive strstr()","examples":[{"title":"Example #1 stristr() example","content":"<?php\n\u00a0\u00a0$email\u00a0=\u00a0'USER@EXAMPLE.com';\n\u00a0\u00a0echo\u00a0stristr($email,\u00a0'e');\u00a0\/\/\u00a0outputs\u00a0ER@EXAMPLE.com\n\u00a0\u00a0echo\u00a0stristr($email,\u00a0'e',\u00a0true);\u00a0\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0,\u00a0outputs\u00a0US\n?>"},{"title":"Example #2 Testing if a string is found or not","content":"<?php\n\u00a0\u00a0$string\u00a0=\u00a0'Hello\u00a0World!';\n\u00a0\u00a0if(stristr($string,\u00a0'earth')\u00a0===\u00a0FALSE)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'\"earth\"\u00a0not\u00a0found\u00a0in\u00a0string';\n\u00a0\u00a0}\n\/\/\u00a0outputs:\u00a0\"earth\"\u00a0not\u00a0found\u00a0in\u00a0string\n?>"},{"title":"Example #3 Using a non \"string\" needle","content":"<?php\n\u00a0\u00a0$string\u00a0=\u00a0'APPLE';\n\u00a0\u00a0echo\u00a0stristr($string,\u00a097);\u00a0\/\/\u00a097\u00a0=\u00a0lowercase\u00a0a\n\/\/\u00a0outputs:\u00a0APPLE\n?>"}]},"strlen":{"name":"strlen","parameters":[{"type":"string","name":"$string","description":"The string being measured for length."}],"return":{"type":"int","values":[]},"short":"Get string length","examples":[{"title":"Example #1 A strlen() example","content":"<?php\n$str\u00a0=\u00a0'abcdef';\necho\u00a0strlen($str);\u00a0\/\/\u00a06\n\n$str\u00a0=\u00a0'\u00a0ab\u00a0cd\u00a0';\necho\u00a0strlen($str);\u00a0\/\/\u00a07\n?>"}]},"strnatcasecmp":{"name":"strnatcasecmp","parameters":[{"type":"string","name":"$str1","description":"The first string."},{"type":"string","name":"$str2","description":"The second string."}],"return":{"type":"int","values":[]},"short":"Case insensitive string comparisons using a \"natural order\" algorithm","examples":[]},"strnatcmp":{"name":"strnatcmp","parameters":[{"type":"string","name":"$str1","description":"The first string."},{"type":"string","name":"$str2","description":"The second string."}],"return":{"type":"int","values":[]},"short":"String comparisons using a \"natural order\" algorithm","examples":[]},"strncasecmp":{"name":"strncasecmp","parameters":[{"type":"string","name":"$str1","description":"The first string."},{"type":"string","name":"$str2","description":"The second string."},{"type":"int","name":"$len","description":"The length of strings to be used in the comparison."}],"return":{"type":"int","values":[]},"short":"Binary safe case-insensitive string comparison of the first n characters","examples":[]},"strncmp":{"name":"strncmp","parameters":[{"type":"string","name":"$str1","description":"The first string."},{"type":"string","name":"$str2","description":"The second string."},{"type":"int","name":"$len","description":"Number of characters to use in the comparison."}],"return":{"type":"int","values":[]},"short":"Binary safe string comparison of the first n characters","examples":[]},"strpbrk":{"name":"strpbrk","parameters":[{"type":"string","name":"$haystack","description":"The string where char_list is looked for."},{"type":"string","name":"$char_list","description":"This parameter is case sensitive."}],"return":{"type":"string","values":["FALSE"]},"short":"Search a string for any of a set of characters","examples":[{"title":"Example #1 strpbrk() example","content":"<?php\n\n$text\u00a0=\u00a0'This\u00a0is\u00a0a\u00a0Simple\u00a0text.';\n\n\/\/\u00a0this\u00a0echoes\u00a0\"is\u00a0is\u00a0a\u00a0Simple\u00a0text.\"\u00a0because\u00a0'i'\u00a0is\u00a0matched\u00a0first\necho\u00a0strpbrk($text,\u00a0'mi');\n\n\/\/\u00a0this\u00a0echoes\u00a0\"Simple\u00a0text.\"\u00a0because\u00a0chars\u00a0are\u00a0case\u00a0sensitive\necho\u00a0strpbrk($text,\u00a0'S');\n?>"}]},"strpos":{"name":"strpos","parameters":[{"type":"string","name":"$haystack","description":"The string to search in."},{"type":"mixed","name":"$needle","description":"If needle is not a string, it is converted to an integer and applied as the ordinal value of a character."},{"type":"int","name":"$offset","default_value":"0","description":"If specified, search will start this number of characters counted from the beginning of the string. If the offset is negative, the search will start this number of characters counted from the end of the string."}],"return":{"type":"int","values":["FALSE"]},"short":"Find the position of the first occurrence of a substring in a string","examples":[{"title":"Example #1 Using ===","content":"<?php\n$mystring\u00a0=\u00a0'abc';\n$findme\u00a0\u00a0\u00a0=\u00a0'a';\n$pos\u00a0=\u00a0strpos($mystring,\u00a0$findme);\n\n\/\/\u00a0Note\u00a0our\u00a0use\u00a0of\u00a0===.\u00a0\u00a0Simply\u00a0==\u00a0would\u00a0not\u00a0work\u00a0as\u00a0expected\n\/\/\u00a0because\u00a0the\u00a0position\u00a0of\u00a0'a'\u00a0was\u00a0the\u00a00th\u00a0(first)\u00a0character.\nif\u00a0($pos\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$findme'\u00a0was\u00a0not\u00a0found\u00a0in\u00a0the\u00a0string\u00a0'$mystring'\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$findme'\u00a0was\u00a0found\u00a0in\u00a0the\u00a0string\u00a0'$mystring'\";\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\u00a0and\u00a0exists\u00a0at\u00a0position\u00a0$pos\";\n}\n?>"},{"title":"Example #2 Using !==","content":"<?php\n$mystring\u00a0=\u00a0'abc';\n$findme\u00a0\u00a0\u00a0=\u00a0'a';\n$pos\u00a0=\u00a0strpos($mystring,\u00a0$findme);\n\n\/\/\u00a0The\u00a0!==\u00a0operator\u00a0can\u00a0also\u00a0be\u00a0used.\u00a0\u00a0Using\u00a0!=\u00a0would\u00a0not\u00a0work\u00a0as\u00a0expected\n\/\/\u00a0because\u00a0the\u00a0position\u00a0of\u00a0'a'\u00a0is\u00a00.\u00a0The\u00a0statement\u00a0(0\u00a0!=\u00a0false)\u00a0evaluates\u00a0\n\/\/\u00a0to\u00a0false.\nif\u00a0($pos\u00a0!==\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$findme'\u00a0was\u00a0found\u00a0in\u00a0the\u00a0string\u00a0'$mystring'\";\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\u00a0and\u00a0exists\u00a0at\u00a0position\u00a0$pos\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0'$findme'\u00a0was\u00a0not\u00a0found\u00a0in\u00a0the\u00a0string\u00a0'$mystring'\";\n}\n?>"},{"title":"Example #3 Using an offset","content":"<?php\n\/\/\u00a0We\u00a0can\u00a0search\u00a0for\u00a0the\u00a0character,\u00a0ignoring\u00a0anything\u00a0before\u00a0the\u00a0offset\n$newstring\u00a0=\u00a0'abcdef\u00a0abcdef';\n$pos\u00a0=\u00a0strpos($newstring,\u00a0'a',\u00a01);\u00a0\/\/\u00a0$pos\u00a0=\u00a07,\u00a0not\u00a00\n?>"}]},"strptime":{"name":"strptime","parameters":[{"type":"string","name":"$date"},{"type":"string","name":"$format"}],"return":{"type":"array","values":["FALSE"]},"short":"\n     Parse a time\/date generated with strftime()\n    ","examples":[{"title":"Example #1 strptime() example","content":"<?php\n$format\u00a0=\u00a0'%d\/%m\/%Y\u00a0%H:%M:%S';\n$strf\u00a0=\u00a0strftime($format);\n\necho\u00a0\"$strf\\n\";\n\nprint_r(strptime($strf,\u00a0$format));\n?>"}]},"strrchr":{"name":"strrchr","parameters":[{"type":"string","name":"$haystack","description":"The string to search in"},{"type":"mixed","name":"$needle","description":"If needle contains more than one character, only the first is used. This behavior is different from that of strstr().\n\nIf needle is not a string, it is converted to an integer and applied as the ordinal value of a character."}],"return":{"type":"string","values":["FALSE"]},"short":"Find the last occurrence of a character in a string","examples":[{"title":"Example #1 strrchr() example","content":"<?php\n\/\/\u00a0get\u00a0last\u00a0directory\u00a0in\u00a0$PATH\n$dir\u00a0=\u00a0substr(strrchr($PATH,\u00a0\":\"),\u00a01);\n\n\/\/\u00a0get\u00a0everything\u00a0after\u00a0last\u00a0newline\n$text\u00a0=\u00a0\"Line\u00a01\\nLine\u00a02\\nLine\u00a03\";\n$last\u00a0=\u00a0substr(strrchr($text,\u00a010),\u00a01\u00a0);\n?>"}]},"strrev":{"name":"strrev","parameters":[{"type":"string","name":"$string","description":"The string to be reversed."}],"return":{"type":"string","values":[]},"short":"Reverse a string","examples":[{"title":"Example #1 Reversing a string with strrev()","content":"<?php\necho\u00a0strrev(\"Hello\u00a0world!\");\u00a0\/\/\u00a0outputs\u00a0\"!dlrow\u00a0olleH\"\n?>"}]},"strripos":{"name":"strripos","parameters":[{"type":"string","name":"$haystack","description":"The string to search in."},{"type":"string","name":"$needle","description":"If needle is not a string, it is converted to an integer and applied as the ordinal value of a character."},{"type":"int","name":"$offset","default_value":"0","description":"If specified, search will start this number of characters counted from the beginning of the string. If the value is negative, search will instead start from that many characters from the end of the string, searching backwards."}],"return":{"type":"int","values":["FALSE"]},"short":"Find the position of the last occurrence of a case-insensitive substring in a string","examples":[{"title":"Example #1 A simple strripos() example","content":"<?php\n$haystack\u00a0=\u00a0'ababcd';\n$needle\u00a0\u00a0\u00a0=\u00a0'aB';\n\n$pos\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=\u00a0strripos($haystack,\u00a0$needle);\n\nif\u00a0($pos\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Sorry,\u00a0we\u00a0did\u00a0not\u00a0find\u00a0($needle)\u00a0in\u00a0($haystack)\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Congratulations!\\n\";\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"We\u00a0found\u00a0the\u00a0last\u00a0($needle)\u00a0in\u00a0($haystack)\u00a0at\u00a0position\u00a0($pos)\";\n}\n?>"}]},"strrpos":{"name":"strrpos","parameters":[{"type":"string","name":"$haystack","description":"The string to search in."},{"type":"string","name":"$needle","description":"If needle is not a string, it is converted to an integer and applied as the ordinal value of a character."},{"type":"int","name":"$offset","default_value":"0","description":"If specified, search will start this number of characters counted from the beginning of the string. If the value is negative, search will instead start from that many characters from the end of the string, searching backwards."}],"return":{"type":"int","values":["FALSE"]},"short":"Find the position of the last occurrence of a substring in a string","examples":[{"title":"Example #1 Checking if a needle is in the haystack","content":"It is easy to mistake the return values for \"character found at\n     position 0\" and \"character not found\".  Here's how to detect\n     the difference:"},{"title":"Example #2 Searching with offsets","content":"<?php\n$foo\u00a0=\u00a0\"0123456789a123456789b123456789c\";\n\nvar_dump(strrpos($foo,\u00a0'7',\u00a0-5));\u00a0\u00a0\/\/\u00a0Starts\u00a0looking\u00a0backwards\u00a0five\u00a0positions\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0from\u00a0the\u00a0end.\u00a0Result:\u00a0int(17)\n\nvar_dump(strrpos($foo,\u00a0'7',\u00a020));\u00a0\u00a0\/\/\u00a0Starts\u00a0searching\u00a020\u00a0positions\u00a0into\u00a0the\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0string.\u00a0Result:\u00a0int(27)\n\nvar_dump(strrpos($foo,\u00a0'7',\u00a028));\u00a0\u00a0\/\/\u00a0Result:\u00a0bool(false)\n?>"}]},"strspn":{"name":"strspn","parameters":[{"type":"string","name":"$subject","description":"The string to examine."},{"type":"string","name":"$mask","description":"The list of allowable characters."},{"type":"int","name":"$start","description":"The position in subject to start searching.\n\nIf start is given and is non-negative, then strspn() will begin examining subject at the start'th position. For instance, in the string 'abcdef', the character at position 0 is 'a', the character at position 2 is 'c', and so forth.\n\nIf start is given and is negative, then strspn() will begin examining subject at the start'th position from the end of subject."},{"type":"int","name":"$length","description":"The length of the segment from subject to examine.\n\nIf length is given and is non-negative, then subject will be examined for length characters after the starting position.\n\nIf length is given and is negative, then subject will be examined from the starting position up to length characters from the end of subject."}],"return":{"type":"int","values":[]},"short":"\n   Finds the length of the initial segment of a string consisting\n   entirely of characters contained within a given mask\n  ","examples":[{"title":"Example #1 strspn() example","content":"<?php\n\/\/\u00a0subject\u00a0does\u00a0not\u00a0start\u00a0with\u00a0any\u00a0characters\u00a0from\u00a0mask\nvar_dump(strspn(\"foo\",\u00a0\"o\"));\n\n\/\/\u00a0examine\u00a0two\u00a0characters\u00a0from\u00a0subject\u00a0starting\u00a0at\u00a0offset\u00a01\nvar_dump(strspn(\"foo\",\u00a0\"o\",\u00a01,\u00a02));\n\n\/\/\u00a0examine\u00a0one\u00a0character\u00a0from\u00a0subject\u00a0starting\u00a0at\u00a0offset\u00a01\nvar_dump(strspn(\"foo\",\u00a0\"o\",\u00a01,\u00a01));\n?>"}]},"strstr":{"name":"strstr","parameters":[{"type":"string","name":"$haystack","description":"The input string."},{"type":"mixed","name":"$needle","description":"If needle is not a string, it is converted to an integer and applied as the ordinal value of a character."},{"type":"bool","name":"$before_needle","default_value":"FALSE","description":"If TRUE, strstr() returns the part of the haystack before the first occurrence of the needle (excluding the needle)."}],"return":{"type":"string","values":["FALSE"]},"short":"Find the first occurrence of a string","examples":[{"title":"Example #1 strstr() example","content":"<?php\n$email\u00a0\u00a0=\u00a0'name@example.com';\n$domain\u00a0=\u00a0strstr($email,\u00a0'@');\necho\u00a0$domain;\u00a0\/\/\u00a0prints\u00a0@example.com\n\n$user\u00a0=\u00a0strstr($email,\u00a0'@',\u00a0true);\u00a0\/\/\u00a0As\u00a0of\u00a0PHP\u00a05.3.0\necho\u00a0$user;\u00a0\/\/\u00a0prints\u00a0name\n?>"}]},"strtok":{"name":"strtok","parameters":[{"type":"string","name":"$str","description":"The string being split up into smaller strings (tokens)."},{"type":"string","name":"$token","description":"The delimiter used when splitting up str."}],"return":{"type":"string","values":[]},"short":"Tokenize string","examples":[{"title":"Example #1 strtok() example","content":"<?php\n$string\u00a0=\u00a0\"This\u00a0is\\tan\u00a0example\\nstring\";\n\/*\u00a0Use\u00a0tab\u00a0and\u00a0newline\u00a0as\u00a0tokenizing\u00a0characters\u00a0as\u00a0well\u00a0\u00a0*\/\n$tok\u00a0=\u00a0strtok($string,\u00a0\"\u00a0\\n\\t\");\n\nwhile\u00a0($tok\u00a0!==\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Word=$tok<br\u00a0\/>\";\n\u00a0\u00a0\u00a0\u00a0$tok\u00a0=\u00a0strtok(\"\u00a0\\n\\t\");\n}\n?>"},{"title":"Example #2 strtok() behavior on empty part found","content":"<?php\n$first_token\u00a0\u00a0=\u00a0strtok('\/something',\u00a0'\/');\n$second_token\u00a0=\u00a0strtok('\/');\nvar_dump($first_token,\u00a0$second_token);\n?>"}]},"strtolower":{"name":"strtolower","parameters":[{"type":"string","name":"$string","description":"The input string."}],"return":{"type":"string","values":[]},"short":"Make a string lowercase","examples":[{"title":"Example #1 strtolower() example","content":"<?php\n$str\u00a0=\u00a0\"Mary\u00a0Had\u00a0A\u00a0Little\u00a0Lamb\u00a0and\u00a0She\u00a0LOVED\u00a0It\u00a0So\";\n$str\u00a0=\u00a0strtolower($str);\necho\u00a0$str;\u00a0\/\/\u00a0Prints\u00a0mary\u00a0had\u00a0a\u00a0little\u00a0lamb\u00a0and\u00a0she\u00a0loved\u00a0it\u00a0so\n?>"}]},"strtotime":{"name":"strtotime","parameters":[{"type":"string","name":"$time","description":"A date\/time string. Valid formats are explained in Date and Time Formats."},{"type":"int","name":"$now","default_value":"time()","description":"The timestamp which is used as a base for the calculation of relative dates."}],"return":{"type":"int","values":["FALSE"]},"short":"Parse about any English textual datetime description into a Unix timestamp","examples":[{"title":"Example #1 A strtotime() example","content":"<?php\necho\u00a0strtotime(\"now\"),\u00a0\"\\n\";\necho\u00a0strtotime(\"10\u00a0September\u00a02000\"),\u00a0\"\\n\";\necho\u00a0strtotime(\"+1\u00a0day\"),\u00a0\"\\n\";\necho\u00a0strtotime(\"+1\u00a0week\"),\u00a0\"\\n\";\necho\u00a0strtotime(\"+1\u00a0week\u00a02\u00a0days\u00a04\u00a0hours\u00a02\u00a0seconds\"),\u00a0\"\\n\";\necho\u00a0strtotime(\"next\u00a0Thursday\"),\u00a0\"\\n\";\necho\u00a0strtotime(\"last\u00a0Monday\"),\u00a0\"\\n\";\n?>"},{"title":"Example #2 Checking for failure","content":"<?php\n$str\u00a0=\u00a0'Not\u00a0Good';\n\n\/\/\u00a0previous\u00a0to\u00a0PHP\u00a05.1.0\u00a0you\u00a0would\u00a0compare\u00a0with\u00a0-1,\u00a0instead\u00a0of\u00a0false\nif\u00a0(($timestamp\u00a0=\u00a0strtotime($str))\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0($str)\u00a0is\u00a0bogus\";\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$str\u00a0==\u00a0\"\u00a0.\u00a0date('l\u00a0dS\u00a0\\o\\f\u00a0F\u00a0Y\u00a0h:i:s\u00a0A',\u00a0$timestamp);\n}\n?>"}]},"strtoupper":{"name":"strtoupper","parameters":[{"type":"string","name":"$string","description":"The input string."}],"return":{"type":"string","values":[]},"short":"Make a string uppercase","examples":[{"title":"Example #1 strtoupper() example","content":"<?php\n$str\u00a0=\u00a0\"Mary\u00a0Had\u00a0A\u00a0Little\u00a0Lamb\u00a0and\u00a0She\u00a0LOVED\u00a0It\u00a0So\";\n$str\u00a0=\u00a0strtoupper($str);\necho\u00a0$str;\u00a0\/\/\u00a0Prints\u00a0MARY\u00a0HAD\u00a0A\u00a0LITTLE\u00a0LAMB\u00a0AND\u00a0SHE\u00a0LOVED\u00a0IT\u00a0SO\n?>"}]},"strtr":{"name":"strtr","parameters":[{"type":"string","name":"$str","description":"The string being translated."},{"type":"string","name":"$from","description":"The string being translated to to."},{"type":"string","name":"$to","description":"The string replacing from."},{"type":"array","name":"$replace_pairs","description":"The replace_pairs parameter may be used instead of to and from, in which case it's an array in the form array('from' => 'to', ...)."}],"return":{"type":"string","values":["FALSE","NULL"]},"short":"Translate characters or replace substrings","examples":[{"title":"Example #1 strtr() example","content":"<?php\n\/\/In\u00a0this\u00a0form,\u00a0strtr()\u00a0does\u00a0byte-by-byte\u00a0translation\n\/\/Therefore,\u00a0we\u00a0are\u00a0assuming\u00a0a\u00a0single-byte\u00a0encoding\u00a0here:\n$addr\u00a0=\u00a0strtr($addr,\u00a0\"\u00e4\u00e5\u00f6\",\u00a0\"aao\");\n?>"},{"title":"Example #2 strtr() example with two arguments","content":"<?php\n$trans\u00a0=\u00a0array(\"h\"\u00a0=>\u00a0\"-\",\u00a0\"hello\"\u00a0=>\u00a0\"hi\",\u00a0\"hi\"\u00a0=>\u00a0\"hello\");\necho\u00a0strtr(\"hi\u00a0all,\u00a0I\u00a0said\u00a0hello\",\u00a0$trans);\n?>"},{"title":"Example #3 strtr() behavior comparison","content":"<?php\necho\u00a0strtr(\"baab\",\u00a0\"ab\",\u00a0\"01\"),\"\\n\";\n\n$trans\u00a0=\u00a0array(\"ab\"\u00a0=>\u00a0\"01\");\necho\u00a0strtr(\"baab\",\u00a0$trans);\n?>"}]},"strval":{"name":"strval","parameters":[{"type":"mixed","name":"$var","description":"The variable that is being converted to a string.\n\nvar may be any scalar type or an object that implements the __toString() method. You cannot use strval() on arrays or on objects that do not implement the __toString() method."}],"return":{"type":"string","values":[]},"short":"Get string value of a variable","examples":[{"title":"Example #1 \n     strval() example using PHP 5's magic\n     __toString() method.\n    ","content":"<?php\nclass\u00a0StrValTest\n{\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__toString()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0__CLASS__;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n\/\/\u00a0Prints\u00a0'StrValTest'\necho\u00a0strval(new\u00a0StrValTest);\n?>"}]},"substr":{"name":"substr","parameters":[{"type":"string","name":"$string","description":"The input string. Must be one character or longer."},{"type":"int","name":"$start","description":"If start is non-negative, the returned string will start at the start'th position in string, counting from zero. For instance, in the string 'abcdef', the character at position 0 is 'a', the character at position 2 is 'c', and so forth.\n\nIf start is negative, the returned string will start at the start'th character from the end of string.\n\nIf string is less than start characters long, FALSE will be returned.\n\n\n\nExample #1 Using a negative start\n\n <?php $rest\u00a0=\u00a0substr(\"abcdef\",\u00a0-1);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0\"f\" $rest\u00a0=\u00a0substr(\"abcdef\",\u00a0-2);\u00a0\u00a0\u00a0\u00a0\/\/\u00a0returns\u00a0\"ef\" $rest\u00a0=\u00a0substr(\"abcdef\",\u00a0-3,\u00a01);\u00a0\/\/\u00a0returns\u00a0\"d\" ?>"},{"type":"int","name":"$length","description":"If length is given and is positive, the string returned will contain at most length characters beginning from start (depending on the length of string).\n\nIf length is given and is negative, then that many characters will be omitted from the end of string (after the start position has been calculated when a start is negative).  If start denotes the position of this truncation or beyond, FALSE will be returned.\n\nIf length is given and is 0, FALSE or NULL, an empty string will be returned.\n\nIf length is omitted, the substring starting from start until the end of the string will be returned.\n\nExample #2 Using a negative length\n\n <?php $rest\u00a0=\u00a0substr(\"abcdef\",\u00a00,\u00a0-1);\u00a0\u00a0\/\/\u00a0returns\u00a0\"abcde\" $rest\u00a0=\u00a0substr(\"abcdef\",\u00a02,\u00a0-1);\u00a0\u00a0\/\/\u00a0returns\u00a0\"cde\" $rest\u00a0=\u00a0substr(\"abcdef\",\u00a04,\u00a0-4);\u00a0\u00a0\/\/\u00a0returns\u00a0false $rest\u00a0=\u00a0substr(\"abcdef\",\u00a0-3,\u00a0-1);\u00a0\/\/\u00a0returns\u00a0\"de\" ?>"}],"return":{"type":"string","values":["FALSE"]},"short":"Return part of a string","examples":[{"title":"Example #3 Basic substr() usage","content":"<?php\necho\u00a0substr('abcdef',\u00a01);\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0bcdef\necho\u00a0substr('abcdef',\u00a01,\u00a03);\u00a0\u00a0\/\/\u00a0bcd\necho\u00a0substr('abcdef',\u00a00,\u00a04);\u00a0\u00a0\/\/\u00a0abcd\necho\u00a0substr('abcdef',\u00a00,\u00a08);\u00a0\u00a0\/\/\u00a0abcdef\necho\u00a0substr('abcdef',\u00a0-1,\u00a01);\u00a0\/\/\u00a0f\n\n\/\/\u00a0Accessing\u00a0single\u00a0characters\u00a0in\u00a0a\u00a0string\n\/\/\u00a0can\u00a0also\u00a0be\u00a0achieved\u00a0using\u00a0\"square\u00a0brackets\"\n$string\u00a0=\u00a0'abcdef';\necho\u00a0$string[0];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0a\necho\u00a0$string[3];\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0d\necho\u00a0$string[strlen($string)-1];\u00a0\/\/\u00a0f\n\n?>"},{"title":"Example #4 substr() casting behaviour","content":"<?php\nclass\u00a0apple\u00a0{\n\u00a0\u00a0\u00a0\u00a0public\u00a0function\u00a0__toString()\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0\"green\";\n\u00a0\u00a0\u00a0\u00a0}\n}\n\necho\u00a0\"1)\u00a0\".var_export(substr(\"pear\",\u00a00,\u00a02),\u00a0true).PHP_EOL;\necho\u00a0\"2)\u00a0\".var_export(substr(54321,\u00a00,\u00a02),\u00a0true).PHP_EOL;\necho\u00a0\"3)\u00a0\".var_export(substr(new\u00a0apple(),\u00a00,\u00a02),\u00a0true).PHP_EOL;\necho\u00a0\"4)\u00a0\".var_export(substr(true,\u00a00,\u00a01),\u00a0true).PHP_EOL;\necho\u00a0\"5)\u00a0\".var_export(substr(false,\u00a00,\u00a01),\u00a0true).PHP_EOL;\necho\u00a0\"6)\u00a0\".var_export(substr(\"\",\u00a00,\u00a01),\u00a0true).PHP_EOL;\necho\u00a0\"7)\u00a0\".var_export(substr(1.2e3,\u00a00,\u00a04),\u00a0true).PHP_EOL;\n?>"}]},"substr_compare":{"name":"substr_compare","parameters":[{"type":"string","name":"$main_str","description":"The main string being compared."},{"type":"string","name":"$str","description":"The secondary string being compared."},{"type":"int","name":"$offset","description":"The start position for the comparison. If negative, it starts counting from the end of the string."},{"type":"int","name":"$length","description":"The length of the comparison. The default value is the largest of the length of the str compared to the length of main_str less the offset."},{"type":"bool","name":"$case_insensitivity","default_value":"FALSE","description":"If case_insensitivity is TRUE, comparison is case insensitive."}],"return":{"type":"int","values":["FALSE"]},"short":"Binary safe comparison of two strings from an offset, up to length characters","examples":[{"title":"Example #1 A substr_compare() example","content":"<?php\necho\u00a0substr_compare(\"abcde\",\u00a0\"bc\",\u00a01,\u00a02);\u00a0\/\/\u00a00\necho\u00a0substr_compare(\"abcde\",\u00a0\"de\",\u00a0-2,\u00a02);\u00a0\/\/\u00a00\necho\u00a0substr_compare(\"abcde\",\u00a0\"bcg\",\u00a01,\u00a02);\u00a0\/\/\u00a00\necho\u00a0substr_compare(\"abcde\",\u00a0\"BC\",\u00a01,\u00a02,\u00a0true);\u00a0\/\/\u00a00\necho\u00a0substr_compare(\"abcde\",\u00a0\"bc\",\u00a01,\u00a03);\u00a0\/\/\u00a01\necho\u00a0substr_compare(\"abcde\",\u00a0\"cd\",\u00a01,\u00a02);\u00a0\/\/\u00a0-1\necho\u00a0substr_compare(\"abcde\",\u00a0\"abc\",\u00a05,\u00a01);\u00a0\/\/\u00a0warning\n?>"}]},"substr_count":{"name":"substr_count","parameters":[{"type":"string","name":"$haystack","description":"The string to search in"},{"type":"string","name":"$needle","description":"The substring to search for"},{"type":"int","name":"$offset","default_value":"0","description":"The offset where to start counting. If the offset is negative, counting starts from the end of the string."},{"type":"int","name":"$length","description":"The maximum length after the specified offset to search for the substring. It outputs a warning if the offset plus the length is greater than the haystack length. A negative length counts from the end of haystack."}],"return":{"type":"int","values":[]},"short":"Count the number of substring occurrences","examples":[{"title":"Example #1 A substr_count() example","content":"<?php\n$text\u00a0=\u00a0'This\u00a0is\u00a0a\u00a0test';\necho\u00a0strlen($text);\u00a0\/\/\u00a014\n\necho\u00a0substr_count($text,\u00a0'is');\u00a0\/\/\u00a02\n\n\/\/\u00a0the\u00a0string\u00a0is\u00a0reduced\u00a0to\u00a0's\u00a0is\u00a0a\u00a0test',\u00a0so\u00a0it\u00a0prints\u00a01\necho\u00a0substr_count($text,\u00a0'is',\u00a03);\n\n\/\/\u00a0the\u00a0text\u00a0is\u00a0reduced\u00a0to\u00a0's\u00a0i',\u00a0so\u00a0it\u00a0prints\u00a00\necho\u00a0substr_count($text,\u00a0'is',\u00a03,\u00a03);\n\n\/\/\u00a0generates\u00a0a\u00a0warning\u00a0because\u00a05+10\u00a0>\u00a014\necho\u00a0substr_count($text,\u00a0'is',\u00a05,\u00a010);\n\n\n\/\/\u00a0prints\u00a0only\u00a01,\u00a0because\u00a0it\u00a0doesn't\u00a0count\u00a0overlapped\u00a0substrings\n$text2\u00a0=\u00a0'gcdgcdgcd';\necho\u00a0substr_count($text2,\u00a0'gcdgcd');\n?>"}]},"substr_replace":{"name":"substr_replace","parameters":[{"type":"mixed","name":"$string","description":"The input string.\n\nAn array of strings can be provided, in which case the replacements will occur on each string in turn. In this case, the replacement, start and length parameters may be provided either as scalar values to be applied to each input string in turn, or as arrays, in which case the corresponding array element will be used for each input string."},{"type":"mixed","name":"$replacement","description":"The replacement string."},{"type":"mixed","name":"$start","description":"If start is non-negative, the replacing will begin at the start'th offset into string.\n\nIf start is negative, the replacing will begin at the start'th character from the end of string."},{"type":"mixed","name":"$length","description":"If given and is positive, it represents the length of the portion of string which is to be replaced. If it is negative, it represents the number of characters from the end of string at which to stop replacing. If it is not given, then it will default to strlen( string ); i.e. end the replacing at the end of string. Of course, if length is zero then this function will have the effect of inserting replacement into string at the given start offset."}],"return":{"type":"mixed","values":[]},"short":"Replace text within a portion of a string","examples":[{"title":"Example #1 Simple substr_replace() examples","content":"<?php\n$var\u00a0=\u00a0'ABCDEFGH:\/MNRPQR\/';\necho\u00a0\"Original:\u00a0$var<hr\u00a0\/>\\n\";\n\n\/*\u00a0These\u00a0two\u00a0examples\u00a0replace\u00a0all\u00a0of\u00a0$var\u00a0with\u00a0'bob'.\u00a0*\/\necho\u00a0substr_replace($var,\u00a0'bob',\u00a00)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\necho\u00a0substr_replace($var,\u00a0'bob',\u00a00,\u00a0strlen($var))\u00a0.\u00a0\"<br\u00a0\/>\\n\";\n\n\/*\u00a0Insert\u00a0'bob'\u00a0right\u00a0at\u00a0the\u00a0beginning\u00a0of\u00a0$var.\u00a0*\/\necho\u00a0substr_replace($var,\u00a0'bob',\u00a00,\u00a00)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\n\n\/*\u00a0These\u00a0next\u00a0two\u00a0replace\u00a0'MNRPQR'\u00a0in\u00a0$var\u00a0with\u00a0'bob'.\u00a0*\/\necho\u00a0substr_replace($var,\u00a0'bob',\u00a010,\u00a0-1)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\necho\u00a0substr_replace($var,\u00a0'bob',\u00a0-7,\u00a0-1)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\n\n\/*\u00a0Delete\u00a0'MNRPQR'\u00a0from\u00a0$var.\u00a0*\/\necho\u00a0substr_replace($var,\u00a0'',\u00a010,\u00a0-1)\u00a0.\u00a0\"<br\u00a0\/>\\n\";\n?>"},{"title":"Example #2 \n     Using substr_replace() to replace multiple strings at\n     once\n    ","content":"<?php\n$input\u00a0=\u00a0array('A:\u00a0XXX',\u00a0'B:\u00a0XXX',\u00a0'C:\u00a0XXX');\n\n\/\/\u00a0A\u00a0simple\u00a0case:\u00a0replace\u00a0XXX\u00a0in\u00a0each\u00a0string\u00a0with\u00a0YYY.\necho\u00a0implode(';\u00a0',\u00a0substr_replace($input,\u00a0'YYY',\u00a03,\u00a03)).\"\\n\";\n\n\/\/\u00a0A\u00a0more\u00a0complicated\u00a0case\u00a0where\u00a0each\u00a0replacement\u00a0is\u00a0different.\n$replace\u00a0=\u00a0array('AAA',\u00a0'BBB',\u00a0'CCC');\necho\u00a0implode(';\u00a0',\u00a0substr_replace($input,\u00a0$replace,\u00a03,\u00a03)).\"\\n\";\n\n\/\/\u00a0Replace\u00a0a\u00a0different\u00a0number\u00a0of\u00a0characters\u00a0each\u00a0time.\n$length\u00a0=\u00a0array(1,\u00a02,\u00a03);\necho\u00a0implode(';\u00a0',\u00a0substr_replace($input,\u00a0$replace,\u00a03,\u00a0$length)).\"\\n\";\n?>"}]},"symlink":{"name":"symlink","parameters":[{"type":"string","name":"$target","description":"Target of the link."},{"type":"string","name":"$link","description":"The link name."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Creates a symbolic link","examples":[{"title":"Example #1 Create a symbolic link","content":"<?php\n$target\u00a0=\u00a0'uploads.php';\n$link\u00a0=\u00a0'uploads';\nsymlink($target,\u00a0$link);\n\necho\u00a0readlink($link);\n?>"}]},"sys_get_temp_dir":{"name":"sys_get_temp_dir","parameters":[],"return":{"type":"string","values":[]},"short":"Returns directory path used for temporary files","examples":[{"title":"Example #1 sys_get_temp_dir() example","content":"<?php\n\/\/\u00a0Create\u00a0a\u00a0temporary\u00a0file\u00a0in\u00a0the\u00a0temporary\u00a0\n\/\/\u00a0files\u00a0directory\u00a0using\u00a0sys_get_temp_dir()\n$temp_file\u00a0=\u00a0tempnam(sys_get_temp_dir(),\u00a0'Tux');\n\necho\u00a0$temp_file;\n?>"}]},"sys_getloadavg":{"name":"sys_getloadavg","parameters":[],"return":{"type":"array","values":[]},"short":"Gets system load average","examples":[{"title":"Example #1 A sys_getloadavg() example","content":"<?php\n$load\u00a0=\u00a0sys_getloadavg();\nif\u00a0($load[0]\u00a0>\u00a00.80)\u00a0{\n\u00a0\u00a0\u00a0\u00a0header('HTTP\/1.1\u00a0503\u00a0Too\u00a0busy,\u00a0try\u00a0again\u00a0later');\n\u00a0\u00a0\u00a0\u00a0die('Server\u00a0too\u00a0busy.\u00a0Please\u00a0try\u00a0again\u00a0later.');\n}\n?>"}]},"syslog":{"name":"syslog","parameters":[{"type":"int","name":"$priority","description":"priority is a combination of the facility and the level. Possible values are:\n\nsyslog() Priorities (in descending order)\n Constant Description LOG_EMERG system is unusable LOG_ALERT action must be taken immediately LOG_CRIT critical conditions LOG_ERR error conditions LOG_WARNING warning conditions LOG_NOTICE normal, but significant, condition LOG_INFO informational message LOG_DEBUG debug-level message"},{"type":"string","name":"$message","description":"The message to send, except that the two characters %m will be replaced by the error message string (strerror) corresponding to the present value of errno."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Generate a system log message","examples":[{"title":"Example #1 Using syslog()","content":"<?php\n\/\/\u00a0open\u00a0syslog,\u00a0include\u00a0the\u00a0process\u00a0ID\u00a0and\u00a0also\u00a0send\n\/\/\u00a0the\u00a0log\u00a0to\u00a0standard\u00a0error,\u00a0and\u00a0use\u00a0a\u00a0user\u00a0defined\n\/\/\u00a0logging\u00a0mechanism\nopenlog(\"myScriptLog\",\u00a0LOG_PID\u00a0|\u00a0LOG_PERROR,\u00a0LOG_LOCAL0);\n\n\/\/\u00a0some\u00a0code\n\nif\u00a0(authorized_client())\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0do\u00a0something\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0unauthorized\u00a0client!\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0log\u00a0the\u00a0attempt\n\u00a0\u00a0\u00a0\u00a0$access\u00a0=\u00a0date(\"Y\/m\/d\u00a0H:i:s\");\n\u00a0\u00a0\u00a0\u00a0syslog(LOG_WARNING,\u00a0\"Unauthorized\u00a0client:\u00a0$access\u00a0{$_SERVER['REMOTE_ADDR']}\u00a0({$_SERVER['HTTP_USER_AGENT']})\");\n}\n\ncloselog();\n?>"}]},"system":{"name":"system","parameters":[{"type":"string","name":"$command","description":"The command that will be executed."}],"return":{"type":"string","values":["FALSE"]},"short":"Execute an external program and display the output","examples":[{"title":"Example #1 system() example","content":"<?php\necho\u00a0'<pre>';\n\n\/\/\u00a0Outputs\u00a0all\u00a0the\u00a0result\u00a0of\u00a0shellcommand\u00a0\"ls\",\u00a0and\u00a0returns\n\/\/\u00a0the\u00a0last\u00a0output\u00a0line\u00a0into\u00a0$last_line.\u00a0Stores\u00a0the\u00a0return\u00a0value\n\/\/\u00a0of\u00a0the\u00a0shell\u00a0command\u00a0in\u00a0$retval.\n$last_line\u00a0=\u00a0system('ls',\u00a0$retval);\n\n\/\/\u00a0Printing\u00a0additional\u00a0info\necho\u00a0'\n<\/pre>\n<hr\u00a0\/>Last\u00a0line\u00a0of\u00a0the\u00a0output:\u00a0'\u00a0.\u00a0$last_line\u00a0.\u00a0'\n<hr\u00a0\/>Return\u00a0value:\u00a0'\u00a0.\u00a0$retval;\n?>"}]},"tan":{"name":"tan","parameters":[{"type":"float","name":"$arg","description":"The argument to process in radians"}],"return":{"type":"float","values":[]},"short":"Tangent","examples":[{"title":"Example #1 tan() example","content":"<?php\n\necho\u00a0tan(M_PI_4);\u00a0\/\/\u00a01\n\n?>"}]},"tanh":{"name":"tanh","parameters":[{"type":"float","name":"$arg","description":"The argument to process"}],"return":{"type":"float","values":[]},"short":"Hyperbolic tangent","examples":[]},"tempnam":{"name":"tempnam","parameters":[{"type":"string","name":"$dir","description":"The directory where the temporary filename will be created."},{"type":"string","name":"$prefix","description":"The prefix of the generated temporary filename.\n\nNote:\n Windows uses only the first three characters of prefix."}],"return":{"type":"string","values":["FALSE"]},"short":"Create file with unique file name","examples":[{"title":"Example #1 tempnam() example","content":"<?php\n$tmpfname\u00a0=\u00a0tempnam(\"\/tmp\",\u00a0\"FOO\");\n\n$handle\u00a0=\u00a0fopen($tmpfname,\u00a0\"w\");\nfwrite($handle,\u00a0\"writing\u00a0to\u00a0tempfile\");\nfclose($handle);\n\n\/\/\u00a0do\u00a0here\u00a0something\n\nunlink($tmpfname);\n?>"}]},"textdomain":{"name":"textdomain","parameters":[{"type":"string","name":"$text_domain","default_value":"NULL","description":"The new message domain, or NULL to get the current setting without changing it"}],"return":{"type":"string","values":[]},"short":"Sets the default domain","examples":[]},"time":{"name":"time","parameters":[],"return":{"type":"int","values":[]},"short":"Return current Unix timestamp","examples":[{"title":"Example #1 time() example","content":"<?php\n$nextWeek\u00a0=\u00a0time()\u00a0+\u00a0(7\u00a0*\u00a024\u00a0*\u00a060\u00a0*\u00a060);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a07\u00a0days;\u00a024\u00a0hours;\u00a060\u00a0mins;\u00a060\u00a0secs\necho\u00a0'Now:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'.\u00a0date('Y-m-d')\u00a0.\"\\n\";\necho\u00a0'Next\u00a0Week:\u00a0'.\u00a0date('Y-m-d',\u00a0$nextWeek)\u00a0.\"\\n\";\n\/\/\u00a0or\u00a0using\u00a0strtotime():\necho\u00a0'Next\u00a0Week:\u00a0'.\u00a0date('Y-m-d',\u00a0strtotime('+1\u00a0week'))\u00a0.\"\\n\";\n?>"}]},"time_nanosleep":{"name":"time_nanosleep","parameters":[{"type":"int","name":"$seconds","description":"Must be a non-negative integer."},{"type":"int","name":"$nanoseconds","description":"Must be a non-negative integer less than 1 billion."}],"return":{"type":"mixed","values":["TRUE","FALSE"]},"short":"Delay for a number of seconds and nanoseconds","examples":[{"title":"Example #1 time_nanosleep() example","content":"<?php\n\/\/\u00a0Careful!\u00a0This\u00a0won't\u00a0work\u00a0as\u00a0expected\u00a0if\u00a0an\u00a0array\u00a0is\u00a0returned\nif\u00a0(time_nanosleep(0,\u00a0500000000))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Slept\u00a0for\u00a0half\u00a0a\u00a0second.\\n\";\n}\n\n\/\/\u00a0This\u00a0is\u00a0better:\nif\u00a0(time_nanosleep(0,\u00a0500000000)\u00a0===\u00a0true)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Slept\u00a0for\u00a0half\u00a0a\u00a0second.\\n\";\n}\n\n\/\/\u00a0And\u00a0this\u00a0is\u00a0the\u00a0best:\n$nano\u00a0=\u00a0time_nanosleep(2,\u00a0100000);\n\nif\u00a0($nano\u00a0===\u00a0true)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Slept\u00a0for\u00a02\u00a0seconds,\u00a0100\u00a0microseconds.\\n\";\n}\u00a0elseif\u00a0($nano\u00a0===\u00a0false)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Sleeping\u00a0failed.\\n\";\n}\u00a0elseif\u00a0(is_array($nano))\u00a0{\n\u00a0\u00a0\u00a0\u00a0$seconds\u00a0=\u00a0$nano['seconds'];\n\u00a0\u00a0\u00a0\u00a0$nanoseconds\u00a0=\u00a0$nano['nanoseconds'];\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Interrupted\u00a0by\u00a0a\u00a0signal.\\n\";\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Time\u00a0remaining:\u00a0$seconds\u00a0seconds,\u00a0$nanoseconds\u00a0nanoseconds.\";\n}\n?>"}]},"time_sleep_until":{"name":"time_sleep_until","parameters":[{"type":"float","name":"$timestamp","description":"The timestamp when the script should wake."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Make the script sleep until the specified time\n  ","examples":[{"title":"Example #1 A time_sleep_until() example","content":"<?php\n\n\/\/returns\u00a0false\u00a0and\u00a0generates\u00a0a\u00a0warning\nvar_dump(time_sleep_until(time()-1));\n\n\/\/\u00a0may\u00a0only\u00a0work\u00a0on\u00a0faster\u00a0computers,\u00a0will\u00a0sleep\u00a0up\u00a0to\u00a00.2\u00a0seconds\nvar_dump(time_sleep_until(microtime(true)+0.2));\n\n?>"}]},"timezone_abbreviations_list":{"name":"timezone_abbreviations_list","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTimeZone::listAbbreviations()","examples":[]},"timezone_identifiers_list":{"name":"timezone_identifiers_list","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTimeZone::listIdentifiers()","examples":[]},"timezone_location_get":{"name":"timezone_location_get","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTimeZone::getLocation()","examples":[]},"timezone_name_from_abbr":{"name":"timezone_name_from_abbr","parameters":[{"type":"string","name":"$abbr","description":"Time zone abbreviation."},{"type":"int","name":"$gmtOffset","default_value":"-1","description":"Offset from GMT in seconds. Defaults to -1 which means that first found time zone corresponding to abbr is returned. Otherwise exact offset is searched and only if not found then the first time zone with any offset is returned."},{"type":"int","name":"$isdst","default_value":"-1","description":"Daylight saving time indicator. Defaults to -1, which means that whether the time zone has daylight saving or not is not taken into consideration when searching. If this is set to 1, then the gmtOffset is assumed to be an offset with daylight saving in effect; if 0, then gmtOffset is assumed to be an offset without daylight saving in effect. If abbr doesn't exist then the time zone is searched solely by the gmtOffset and isdst."}],"return":{"type":"string","values":["FALSE"]},"short":"Returns the timezone name from abbreviation","examples":[{"title":"Example #1 A timezone_name_from_abbr() example","content":"<?php\necho\u00a0timezone_name_from_abbr(\"CET\")\u00a0.\u00a0\"\\n\";\necho\u00a0timezone_name_from_abbr(\"\",\u00a03600,\u00a00)\u00a0.\u00a0\"\\n\";\n?>"}]},"timezone_name_get":{"name":"timezone_name_get","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTimeZone::getName()","examples":[]},"timezone_offset_get":{"name":"timezone_offset_get","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTimeZone::getOffset()","examples":[]},"timezone_open":{"name":"timezone_open","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTimeZone::__construct()","examples":[]},"timezone_transitions_get":{"name":"timezone_transitions_get","parameters":[],"return":{"type":"","values":[]},"short":"Alias of DateTimeZone::getTransitions()","examples":[]},"timezone_version_get":{"name":"timezone_version_get","parameters":[],"return":{"type":"string","values":[]},"short":"\n   Gets the version of the timezonedb\n  ","examples":[{"title":"Example #1 Getting the timezonedb version","content":"<?php\necho\u00a0timezone_version_get();\n?>"}]},"tmpfile":{"name":"tmpfile","parameters":[],"return":{"type":"resource","values":["FALSE"]},"short":"Creates a temporary file","examples":[{"title":"Example #1 tmpfile() example","content":"<?php\n$temp\u00a0=\u00a0tmpfile();\nfwrite($temp,\u00a0\"writing\u00a0to\u00a0tempfile\");\nfseek($temp,\u00a00);\necho\u00a0fread($temp,\u00a01024);\nfclose($temp);\u00a0\/\/\u00a0this\u00a0removes\u00a0the\u00a0file\n?>"}]},"token_get_all":{"name":"token_get_all","parameters":[{"type":"string","name":"$source","description":"The PHP source to parse."},{"type":"int","name":"$flags","default_value":"0","description":"Valid flags:\n\nTOKEN_PARSE - Recognises the ability to use reserved words in specific contexts."}],"return":{"type":"array","values":[]},"short":"Split given source into PHP tokens","examples":[{"title":"Example #1 token_get_all() example","content":"<?php\n$tokens\u00a0=\u00a0token_get_all('<?php\u00a0echo;\u00a0?>');\n\nforeach\u00a0($tokens\u00a0as\u00a0$token)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(is_array($token))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Line\u00a0{$token[2]}:\u00a0\",\u00a0token_name($token[0]),\u00a0\"\u00a0('{$token[1]}')\",\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"},{"title":"Example #2 token_get_all() incorrect usage example","content":"<?php\n$tokens\u00a0=\u00a0token_get_all('\/*\u00a0comment\u00a0*\/');\n\nforeach\u00a0($tokens\u00a0as\u00a0$token)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(is_array($token))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0\"Line\u00a0{$token[2]}:\u00a0\",\u00a0token_name($token[0]),\u00a0\"\u00a0('{$token[1]}')\",\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"},{"title":"Example #3 \n     token_get_all() on a class using a reserved word example\n    ","content":"<?php\n\n$source\u00a0=\u00a0<<<'code'\n<?php\n\nclass\u00a0A\n{\n\u00a0\u00a0\u00a0\u00a0const\u00a0PUBLIC\u00a0=\u00a01;\n}\ncode;\n\n$tokens\u00a0=\u00a0token_get_all($source,\u00a0TOKEN_PARSE);\n\nforeach\u00a0($tokens\u00a0as\u00a0$token)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0(is_array($token))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0echo\u00a0token_name($token[0])\u00a0,\u00a0PHP_EOL;\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"token_name":{"name":"token_name","parameters":[{"type":"int","name":"$token","description":"The token value."}],"return":{"type":"string","values":[]},"short":"Get the symbolic name of a given PHP token","examples":[{"title":"Example #1 token_name() example","content":"<?php\n\/\/\u00a0260\u00a0is\u00a0the\u00a0token\u00a0value\u00a0for\u00a0the\u00a0T_EVAL\u00a0token\necho\u00a0token_name(260);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0->\u00a0\"T_EVAL\"\n\n\/\/\u00a0a\u00a0token\u00a0constant\u00a0maps\u00a0to\u00a0its\u00a0own\u00a0name\necho\u00a0token_name(T_FUNCTION);\u00a0\/\/\u00a0->\u00a0\"T_FUNCTION\"\n?>"}]},"touch":{"name":"touch","parameters":[{"type":"string","name":"$filename","description":"The name of the file being touched."},{"type":"int","name":"$time","default_value":"time()","description":"The touch time. If time is not supplied, the current system time is used."},{"type":"int","name":"$atime","description":"If present, the access time of the given filename is set to the value of atime. Otherwise, it is set to the value passed to the time parameter. If neither are present, the current system time is used."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sets access and modification time of file","examples":[{"title":"Example #1 touch() example","content":"<?php\nif\u00a0(touch($filename))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$filename\u00a0.\u00a0'\u00a0modification\u00a0time\u00a0has\u00a0been\u00a0changed\u00a0to\u00a0present\u00a0time';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Sorry,\u00a0could\u00a0not\u00a0change\u00a0modification\u00a0time\u00a0of\u00a0'\u00a0.\u00a0$filename;\n}\n?>"},{"title":"Example #2 touch() using the time parameter","content":"<?php\n\/\/\u00a0This\u00a0is\u00a0the\u00a0touch\u00a0time,\u00a0we'll\u00a0set\u00a0it\u00a0to\u00a0one\u00a0hour\u00a0in\u00a0the\u00a0past.\n$time\u00a0=\u00a0time()\u00a0-\u00a03600;\n\n\/\/\u00a0Touch\u00a0the\u00a0file\nif\u00a0(!touch('some_file.txt',\u00a0$time))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Whoops,\u00a0something\u00a0went\u00a0wrong...';\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'Touched\u00a0file\u00a0with\u00a0success';\n}\n?>"}]},"trait_exists":{"name":"trait_exists","parameters":[{"type":"string","name":"$traitname","description":"Name of the trait to check"},{"type":"bool","name":"$autoload","description":"Whether to autoload if not already loaded."}],"return":{"type":"bool","values":["TRUE","FALSE","NULL"]},"short":"Checks if the trait exists","examples":[]},"trigger_error":{"name":"trigger_error","parameters":[{"type":"string","name":"$error_msg","description":"The designated error message for this error. It's limited to 1024 bytes in length. Any additional characters beyond 1024 bytes will be truncated."},{"type":"int","name":"$error_type","default_value":"E_USER_NOTICE","description":"The designated error type for this error. It only works with the E_USER family of constants, and will default to E_USER_NOTICE."}],"return":{"type":"bool","values":["FALSE","TRUE"]},"short":"Generates a user-level error\/warning\/notice message","examples":[{"title":"Example #1 trigger_error() example","content":"See set_error_handler() for a more extensive example."}]},"trim":{"name":"trim","parameters":[{"type":"string","name":"$str","description":"The string that will be trimmed."},{"type":"string","name":"$character_mask","default_value":"\" \\t\\n\\r\\0\\x0B\"","description":"Optionally, the stripped characters can also be specified using the character_mask parameter. Simply list all characters that you want to be stripped. With .. you can specify a range of characters."}],"return":{"type":"string","values":[]},"short":"Strip whitespace (or other characters) from the beginning and end of a string","examples":[{"title":"Example #1 Usage example of trim()","content":"<?php\n\n$text\u00a0\u00a0\u00a0=\u00a0\"\\t\\tThese\u00a0are\u00a0a\u00a0few\u00a0words\u00a0:)\u00a0...\u00a0\u00a0\";\n$binary\u00a0=\u00a0\"\\x09Example\u00a0string\\x0A\";\n$hello\u00a0\u00a0=\u00a0\"Hello\u00a0World\";\nvar_dump($text,\u00a0$binary,\u00a0$hello);\n\nprint\u00a0\"\\n\";\n\n$trimmed\u00a0=\u00a0trim($text);\nvar_dump($trimmed);\n\n$trimmed\u00a0=\u00a0trim($text,\u00a0\"\u00a0\\t.\");\nvar_dump($trimmed);\n\n$trimmed\u00a0=\u00a0trim($hello,\u00a0\"Hdle\");\nvar_dump($trimmed);\n\n$trimmed\u00a0=\u00a0trim($hello,\u00a0'HdWr');\nvar_dump($trimmed);\n\n\/\/\u00a0trim\u00a0the\u00a0ASCII\u00a0control\u00a0characters\u00a0at\u00a0the\u00a0beginning\u00a0and\u00a0end\u00a0of\u00a0$binary\n\/\/\u00a0(from\u00a00\u00a0to\u00a031\u00a0inclusive)\n$clean\u00a0=\u00a0trim($binary,\u00a0\"\\x00..\\x1F\");\nvar_dump($clean);\n\n?>"},{"title":"Example #2 Trimming array values with trim()","content":"<?php\nfunction\u00a0trim_value(&$value)\u00a0\n{\u00a0\n\u00a0\u00a0\u00a0\u00a0$value\u00a0=\u00a0trim($value);\u00a0\n}\n\n$fruit\u00a0=\u00a0array('apple','banana\u00a0',\u00a0'\u00a0cranberry\u00a0');\nvar_dump($fruit);\n\narray_walk($fruit,\u00a0'trim_value');\nvar_dump($fruit);\n\n?>"}]},"uasort":{"name":"uasort","parameters":[{"type":"callable","name":"$value_compare_func","description":"See usort() and uksort() for examples of user-defined comparison functions."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array with a user-defined comparison function and maintain index association","examples":[{"title":"Example #1 Basic uasort() example","content":"<?php\n\/\/\u00a0Comparison\u00a0function\nfunction\u00a0cmp($a,\u00a0$b)\u00a0{\n\u00a0\u00a0\u00a0\u00a0if\u00a0($a\u00a0==\u00a0$b)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return\u00a0($a\u00a0<\u00a0$b)\u00a0?\u00a0-1\u00a0:\u00a01;\n}\n\n\/\/\u00a0Array\u00a0to\u00a0be\u00a0sorted\n$array\u00a0=\u00a0array('a'\u00a0=>\u00a04,\u00a0'b'\u00a0=>\u00a08,\u00a0'c'\u00a0=>\u00a0-1,\u00a0'd'\u00a0=>\u00a0-9,\u00a0'e'\u00a0=>\u00a02,\u00a0'f'\u00a0=>\u00a05,\u00a0'g'\u00a0=>\u00a03,\u00a0'h'\u00a0=>\u00a0-4);\nprint_r($array);\n\n\/\/\u00a0Sort\u00a0and\u00a0print\u00a0the\u00a0resulting\u00a0array\nuasort($array,\u00a0'cmp');\nprint_r($array);\n?>"}]},"ucfirst":{"name":"ucfirst","parameters":[{"type":"string","name":"$str","description":"The input string."}],"return":{"type":"string","values":[]},"short":"Make a string's first character uppercase","examples":[{"title":"Example #1 ucfirst() example","content":"<?php\n$foo\u00a0=\u00a0'hello\u00a0world!';\n$foo\u00a0=\u00a0ucfirst($foo);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Hello\u00a0world!\n\n$bar\u00a0=\u00a0'HELLO\u00a0WORLD!';\n$bar\u00a0=\u00a0ucfirst($bar);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0HELLO\u00a0WORLD!\n$bar\u00a0=\u00a0ucfirst(strtolower($bar));\u00a0\/\/\u00a0Hello\u00a0world!\n?>"}]},"ucwords":{"name":"ucwords","parameters":[{"type":"string","name":"$str","description":"The input string."},{"type":"string","name":"$delimiters","default_value":"\" \\t\\r\\n\\f\\v\"","description":"The optional delimiters contains the word separator characters."}],"return":{"type":"string","values":[]},"short":"Uppercase the first character of each word in a string","examples":[{"title":"Example #1 ucwords() example","content":"<?php\n$foo\u00a0=\u00a0'hello\u00a0world!';\n$foo\u00a0=\u00a0ucwords($foo);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Hello\u00a0World!\n\n$bar\u00a0=\u00a0'HELLO\u00a0WORLD!';\n$bar\u00a0=\u00a0ucwords($bar);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0HELLO\u00a0WORLD!\n$bar\u00a0=\u00a0ucwords(strtolower($bar));\u00a0\/\/\u00a0Hello\u00a0World!\n?>"},{"title":"Example #2 ucwords() example with custom delimiter","content":"<?php\n$foo\u00a0=\u00a0'hello|world!';\n$bar\u00a0=\u00a0ucwords($foo);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Hello|world!\n\n$baz\u00a0=\u00a0ucwords($foo,\u00a0\"|\");\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0Hello|World!\n?>"}]},"uksort":{"name":"uksort","parameters":[{"type":"callable","name":"$key_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )"}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array by keys using a user-defined comparison function","examples":[{"title":"Example #1 uksort() example","content":"<?php\nfunction\u00a0cmp($a,\u00a0$b)\n{\n\u00a0\u00a0\u00a0\u00a0$a\u00a0=\u00a0preg_replace('@^(a|an|the)\u00a0@',\u00a0'',\u00a0$a);\n\u00a0\u00a0\u00a0\u00a0$b\u00a0=\u00a0preg_replace('@^(a|an|the)\u00a0@',\u00a0'',\u00a0$b);\n\u00a0\u00a0\u00a0\u00a0return\u00a0strcasecmp($a,\u00a0$b);\n}\n\n$a\u00a0=\u00a0array(\"John\"\u00a0=>\u00a01,\u00a0\"the\u00a0Earth\"\u00a0=>\u00a02,\u00a0\"an\u00a0apple\"\u00a0=>\u00a03,\u00a0\"a\u00a0banana\"\u00a0=>\u00a04);\n\nuksort($a,\u00a0\"cmp\");\n\nforeach\u00a0($a\u00a0as\u00a0$key\u00a0=>\u00a0$value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key:\u00a0$value\\n\";\n}\n?>"}]},"umask":{"name":"umask","parameters":[{"type":"int","name":"$mask","description":"The new umask."}],"return":{"type":"int","values":[]},"short":"Changes the current umask","examples":[{"title":"Example #1 umask() example","content":"<?php\n$old\u00a0=\u00a0umask(0);\nchmod(\"\/path\/some_dir\/some_file.txt\",\u00a00755);\numask($old);\n\n\/\/\u00a0Checking\nif\u00a0($old\u00a0!=\u00a0umask())\u00a0{\n\u00a0\u00a0\u00a0\u00a0die('An\u00a0error\u00a0occurred\u00a0while\u00a0changing\u00a0back\u00a0the\u00a0umask');\n}\n?>"}]},"uniqid":{"name":"uniqid","parameters":[{"type":"string","name":"$prefix","default_value":"\"\"","description":"Can be useful, for instance, if you generate identifiers simultaneously on several hosts that might happen to generate the identifier at the same microsecond.\n\nWith an empty prefix, the returned string will be 13 characters long.  If more_entropy is TRUE, it will be 23 characters."},{"type":"bool","name":"$more_entropy","default_value":"FALSE","description":"If set to TRUE, uniqid() will add additional entropy (using the combined linear congruential generator) at the end of the return value, which increases the likelihood that the result will be unique."}],"return":{"type":"string","values":[]},"short":"Generate a unique ID","examples":[{"title":"Example #1 uniqid() Example","content":"<?php\n\/*\u00a0A\u00a0uniqid,\u00a0like:\u00a04b3403665fea6\u00a0*\/\nprintf(\"uniqid():\u00a0%s\\r\\n\",\u00a0uniqid());\n\n\/*\u00a0We\u00a0can\u00a0also\u00a0prefix\u00a0the\u00a0uniqid,\u00a0this\u00a0the\u00a0same\u00a0as\u00a0\n\u00a0*\u00a0doing:\n\u00a0*\n\u00a0*\u00a0$uniqid\u00a0=\u00a0$prefix\u00a0.\u00a0uniqid();\n\u00a0*\u00a0$uniqid\u00a0=\u00a0uniqid($prefix);\n\u00a0*\/\nprintf(\"uniqid('php_'):\u00a0%s\\r\\n\",\u00a0uniqid('php_'));\n\n\/*\u00a0We\u00a0can\u00a0also\u00a0activate\u00a0the\u00a0more_entropy\u00a0parameter,\u00a0which\u00a0is\u00a0\n\u00a0*\u00a0required\u00a0on\u00a0some\u00a0systems,\u00a0like\u00a0Cygwin.\u00a0This\u00a0makes\u00a0uniqid()\n\u00a0*\u00a0produce\u00a0a\u00a0value\u00a0like:\u00a04b340550242239.64159797\n\u00a0*\/\nprintf(\"uniqid('',\u00a0true):\u00a0%s\\r\\n\",\u00a0uniqid('',\u00a0true));\n?>"}]},"unixtojd":{"name":"unixtojd","parameters":[{"type":"int","name":"$timestamp","default_value":"time()","description":"A unix timestamp to convert."}],"return":{"type":"int","values":[]},"short":"Convert Unix timestamp to Julian Day","examples":[]},"unlink":{"name":"unlink","parameters":[{"type":"string","name":"$filename","description":"Path to the file."},{"type":"resource","name":"$context","description":"Note: Context support was added with PHP 5.0.0. For a description of contexts, refer to Streams."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Deletes a file","examples":[{"title":"Example #1 Basic unlink() usage","content":"<?php\n$fh\u00a0=\u00a0fopen('test.html',\u00a0'a');\nfwrite($fh,\u00a0'<h1>Hello\u00a0world!<\/h1>');\nfclose($fh);\n\nunlink('test.html');\n?>"}]},"unpack":{"name":"unpack","parameters":[{"type":"string","name":"$format","description":"See pack() for an explanation of the format codes."},{"type":"string","name":"$data","description":"The packed data."},{"type":"int","name":"$offset","default_value":"0","description":"The offset to begin unpacking from."}],"return":{"type":"array","values":[]},"short":"Unpack data from binary string","examples":[{"title":"Example #1 unpack() example","content":"<?php\n$binarydata\u00a0=\u00a0\"\\x04\\x00\\xa0\\x00\";\n$array\u00a0=\u00a0unpack(\"cchars\/nint\",\u00a0$binarydata);\nprint_r($array);\n?>"},{"title":"Example #2 unpack() example with a repeater","content":"<?php\n$binarydata\u00a0=\u00a0\"\\x04\\x00\\xa0\\x00\";\n$array\u00a0=\u00a0unpack(\"c2chars\/nint\",\u00a0$binarydata);\nprint_r($array);\n?>"}]},"unregister_tick_function":{"name":"unregister_tick_function","parameters":[{"type":"string","name":"$function_name","description":"The function name, as a string."}],"return":{"type":"void","values":[]},"short":"De-register a function for execution on each tick","examples":[]},"unserialize":{"name":"unserialize","parameters":[{"type":"string","name":"$str","description":"The serialized string.\n\nIf the variable being unserialized is an object, after successfully reconstructing the object PHP will automatically attempt to call the __wakeup() member function (if it exists).\n\n\n\nNote: unserialize_callback_func directive\n It's possible to set a callback-function which will be called, if an undefined class should be instantiated during unserializing. (to prevent getting an incomplete object \"__PHP_Incomplete_Class\".) Use your php.ini, ini_set() or .htaccess to define unserialize_callback_func. Everytime an undefined class should be instantiated, it'll be called.  To disable this feature just empty this setting."},{"type":"array","name":"$options","description":"Any options to be provided to unserialize(), as an associative array.\n\nValid options\n Name Type Description allowed_classes mixed\n\n Either an array of class names which should be accepted, FALSE to accept no classes, or TRUE to accept all classes. If this option is defined and unserialize() encounters an object of a class that isn't to be accepted, then the object will be instantiated as __PHP_Incomplete_Class instead.\n\n Omitting this option is the same as defining it as TRUE: PHP will attempt to instantiate objects of any class."}],"return":{"type":"mixed","values":["FALSE","E_NOTICE"]},"short":"\n   Creates a PHP value from a stored representation\n  ","examples":[{"title":"Example #1 unserialize() example","content":"<?php\n\/\/\u00a0Here,\u00a0we\u00a0use\u00a0unserialize()\u00a0to\u00a0load\u00a0session\u00a0data\u00a0to\u00a0the\n\/\/\u00a0$session_data\u00a0array\u00a0from\u00a0the\u00a0string\u00a0selected\u00a0from\u00a0a\u00a0database.\n\/\/\u00a0This\u00a0example\u00a0complements\u00a0the\u00a0one\u00a0described\u00a0with\u00a0serialize().\n\n$conn\u00a0=\u00a0odbc_connect(\"webdb\",\u00a0\"php\",\u00a0\"chicken\");\n$stmt\u00a0=\u00a0odbc_prepare($conn,\u00a0\"SELECT\u00a0data\u00a0FROM\u00a0sessions\u00a0WHERE\u00a0id\u00a0=\u00a0?\");\n$sqldata\u00a0=\u00a0array($_SERVER['PHP_AUTH_USER']);\nif\u00a0(!odbc_execute($stmt,\u00a0$sqldata)\u00a0||\u00a0!odbc_fetch_into($stmt,\u00a0$tmp))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0if\u00a0the\u00a0execute\u00a0or\u00a0fetch\u00a0fails,\u00a0initialize\u00a0to\u00a0empty\u00a0array\n\u00a0\u00a0\u00a0\u00a0$session_data\u00a0=\u00a0array();\n}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0we\u00a0should\u00a0now\u00a0have\u00a0the\u00a0serialized\u00a0data\u00a0in\u00a0$tmp[0].\n\u00a0\u00a0\u00a0\u00a0$session_data\u00a0=\u00a0unserialize($tmp[0]);\n\u00a0\u00a0\u00a0\u00a0if\u00a0(!is_array($session_data))\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0something\u00a0went\u00a0wrong,\u00a0initialize\u00a0to\u00a0empty\u00a0array\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$session_data\u00a0=\u00a0array();\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"},{"title":"Example #2 unserialize_callback_func example","content":"<?php\n$serialized_object='O:1:\"a\":1:{s:5:\"value\";s:3:\"100\";}';\n\nini_set('unserialize_callback_func',\u00a0'mycallback');\u00a0\/\/\u00a0set\u00a0your\u00a0callback_function\n\nfunction\u00a0mycallback($classname)\u00a0\n{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0just\u00a0include\u00a0a\u00a0file\u00a0containing\u00a0your\u00a0classdefinition\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0you\u00a0get\u00a0$classname\u00a0to\u00a0figure\u00a0out\u00a0which\u00a0classdefinition\u00a0is\u00a0required\n}\n?>"}]},"urldecode":{"name":"urldecode","parameters":[{"type":"string","name":"$str","description":"The string to be decoded."}],"return":{"type":"string","values":[]},"short":"Decodes URL-encoded string","examples":[{"title":"Example #1 urldecode() example","content":"<?php\n$query\u00a0=\u00a0\"my=apples&are=green+and+red\";\n\nforeach\u00a0(explode('&',\u00a0$query)\u00a0as\u00a0$chunk)\u00a0{\n\u00a0\u00a0\u00a0\u00a0$param\u00a0=\u00a0explode(\"=\",\u00a0$chunk);\n\n\u00a0\u00a0\u00a0\u00a0if\u00a0($param)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0printf(\"Value\u00a0for\u00a0parameter\u00a0\\\"%s\\\"\u00a0is\u00a0\\\"%s\\\"<br\/>\\n\",\u00a0urldecode($param[0]),\u00a0urldecode($param[1]));\n\u00a0\u00a0\u00a0\u00a0}\n}\n?>"}]},"urlencode":{"name":"urlencode","parameters":[{"type":"string","name":"$str","description":"The string to be encoded."}],"return":{"type":"string","values":[]},"short":"URL-encodes string","examples":[{"title":"Example #1 urlencode() example","content":"<?php\necho\u00a0'<a\u00a0href=\"mycgi?foo=',\u00a0urlencode($userinput),\u00a0'\">';\n?>"},{"title":"Example #2 urlencode() and htmlentities() example","content":"<?php\n$query_string\u00a0=\u00a0'foo='\u00a0.\u00a0urlencode($foo)\u00a0.\u00a0'&bar='\u00a0.\u00a0urlencode($bar);\necho\u00a0'<a\u00a0href=\"mycgi?'\u00a0.\u00a0htmlentities($query_string)\u00a0.\u00a0'\">';\n?>"}]},"user_error":{"name":"user_error","parameters":[],"return":{"type":"","values":[]},"short":"Alias of trigger_error()","examples":[]},"usleep":{"name":"usleep","parameters":[{"type":"int","name":"$micro_seconds","description":"Halt time in microseconds. A microsecond is one millionth of a second."}],"return":{"type":"void","values":[]},"short":"Delay execution in microseconds","examples":[{"title":"Example #1 usleep() example","content":"<?php\n\n\/\/\u00a0Current\u00a0time\necho\u00a0date('h:i:s')\u00a0.\u00a0\"\\n\";\n\n\/\/\u00a0wait\u00a0for\u00a02\u00a0seconds\nusleep(2000000);\n\n\/\/\u00a0back!\necho\u00a0date('h:i:s')\u00a0.\u00a0\"\\n\";\n\n?>"}]},"usort":{"name":"usort","parameters":[{"type":"callable","name":"$value_compare_func","description":"The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.\n\nint callback ( mixed $a, mixed $b )\n\nCaution\n Returning non-integer values from the comparison function, such as float, will result in an internal cast to integer of the callback's return value. So values such as 0.99 and 0.1 will both be cast to an integer value of 0, which will compare such values as equal."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Sort an array by values using a user-defined comparison function","examples":[{"title":"Example #1 usort() example","content":"<?php\nfunction\u00a0cmp($a,\u00a0$b)\n{\n\u00a0\u00a0\u00a0\u00a0if\u00a0($a\u00a0==\u00a0$b)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return\u00a0($a\u00a0<\u00a0$b)\u00a0?\u00a0-1\u00a0:\u00a01;\n}\n\n$a\u00a0=\u00a0array(3,\u00a02,\u00a05,\u00a06,\u00a01);\n\nusort($a,\u00a0\"cmp\");\n\nforeach\u00a0($a\u00a0as\u00a0$key\u00a0=>\u00a0$value)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"$key:\u00a0$value\\n\";\n}\n?>"},{"title":"Example #2 \n     usort() example using multi-dimensional array\n    ","content":"<?php\nfunction\u00a0cmp($a,\u00a0$b)\n{\n\u00a0\u00a0\u00a0\u00a0return\u00a0strcmp($a[\"fruit\"],\u00a0$b[\"fruit\"]);\n}\n\n$fruits[0][\"fruit\"]\u00a0=\u00a0\"lemons\";\n$fruits[1][\"fruit\"]\u00a0=\u00a0\"apples\";\n$fruits[2][\"fruit\"]\u00a0=\u00a0\"grapes\";\n\nusort($fruits,\u00a0\"cmp\");\n\nwhile\u00a0(list($key,\u00a0$value)\u00a0=\u00a0each($fruits))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0\"\\$fruits[$key]:\u00a0\"\u00a0.\u00a0$value[\"fruit\"]\u00a0.\u00a0\"\\n\";\n}\n?>"},{"title":"Example #3 \n     usort() example using a member function of an object\n    ","content":"<?php\nclass\u00a0TestObj\u00a0{\n\u00a0\u00a0\u00a0\u00a0var\u00a0$name;\n\n\u00a0\u00a0\u00a0\u00a0function\u00a0TestObj($name)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->name\u00a0=\u00a0$name;\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\/*\u00a0This\u00a0is\u00a0the\u00a0static\u00a0comparing\u00a0function:\u00a0*\/\n\u00a0\u00a0\u00a0\u00a0static\u00a0function\u00a0cmp_obj($a,\u00a0$b)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$al\u00a0=\u00a0strtolower($a->name);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$bl\u00a0=\u00a0strtolower($b->name);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($al\u00a0==\u00a0$bl)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a00;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0($al\u00a0>\u00a0$bl)\u00a0?\u00a0+1\u00a0:\u00a0-1;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$a[]\u00a0=\u00a0new\u00a0TestObj(\"c\");\n$a[]\u00a0=\u00a0new\u00a0TestObj(\"b\");\n$a[]\u00a0=\u00a0new\u00a0TestObj(\"d\");\n\nusort($a,\u00a0array(\"TestObj\",\u00a0\"cmp_obj\"));\n\nforeach\u00a0($a\u00a0as\u00a0$item)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$item->name\u00a0.\u00a0\"\\n\";\n}\n?>"},{"title":"Example #4 \n     usort() example using a closure\n     to sort a multi-dimensional array\n    ","content":"<?php\n$array[0]\u00a0=\u00a0array('key_a'\u00a0=>\u00a0'z',\u00a0'key_b'\u00a0=>\u00a0'c');\n$array[1]\u00a0=\u00a0array('key_a'\u00a0=>\u00a0'x',\u00a0'key_b'\u00a0=>\u00a0'b');\n$array[2]\u00a0=\u00a0array('key_a'\u00a0=>\u00a0'y',\u00a0'key_b'\u00a0=>\u00a0'a');\n\nfunction\u00a0build_sorter($key)\u00a0{\n\u00a0\u00a0\u00a0\u00a0return\u00a0function\u00a0($a,\u00a0$b)\u00a0use\u00a0($key)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0strnatcmp($a[$key],\u00a0$b[$key]);\n\u00a0\u00a0\u00a0\u00a0};\n}\n\nusort($array,\u00a0build_sorter('key_b'));\n\nforeach\u00a0($array\u00a0as\u00a0$item)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0$item['key_a']\u00a0.\u00a0',\u00a0'\u00a0.\u00a0$item['key_b']\u00a0.\u00a0\"\\n\";\n}\n?>"}]},"utf8_decode":{"name":"utf8_decode","parameters":[{"type":"string","name":"$data","description":"A UTF-8 encoded string."}],"return":{"type":"string","values":[]},"short":"\n   Converts a string with ISO-8859-1 characters encoded with UTF-8\n   to single-byte ISO-8859-1\n  ","examples":[]},"utf8_encode":{"name":"utf8_encode","parameters":[{"type":"string","name":"$data","description":"An ISO-8859-1 string."}],"return":{"type":"string","values":[]},"short":"Encodes an ISO-8859-1 string to UTF-8","examples":[]},"var_dump":{"name":"var_dump","parameters":[{"type":"mixed","name":"$expression","description":"The variable you want to dump."},{"type":"mixed","name":"$..."}],"return":{"type":"void","values":[]},"short":"Dumps information about a variable","examples":[{"title":"Example #1 var_dump() example","content":"<?php\n$a\u00a0=\u00a0array(1,\u00a02,\u00a0array(\"a\",\u00a0\"b\",\u00a0\"c\"));\nvar_dump($a);\n?>"}]},"var_export":{"name":"var_export","parameters":[{"type":"mixed","name":"$expression","description":"The variable you want to export."},{"type":"bool","name":"$return","default_value":"FALSE","description":"If used and set to TRUE, var_export() will return the variable representation instead of outputting it."}],"return":{"type":"mixed","values":["TRUE","NULL"]},"short":"Outputs or returns a parsable string representation of a variable","examples":[{"title":"Example #1 var_export() Examples","content":"<?php\n$a\u00a0=\u00a0array\u00a0(1,\u00a02,\u00a0array\u00a0(\"a\",\u00a0\"b\",\u00a0\"c\"));\nvar_export($a);\n?>"},{"title":"Example #2 Exporting classes since PHP 5.1.0","content":"<?php\nclass\u00a0A\u00a0{\u00a0public\u00a0$var;\u00a0}\n$a\u00a0=\u00a0new\u00a0A;\n$a->var\u00a0=\u00a05;\nvar_export($a);\n?>"},{"title":"Example #3 Using __set_state() (since PHP 5.1.0)","content":"<?php\nclass\u00a0A\n{\n\u00a0\u00a0\u00a0\u00a0public\u00a0$var1;\n\u00a0\u00a0\u00a0\u00a0public\u00a0$var2;\n\n\u00a0\u00a0\u00a0\u00a0public\u00a0static\u00a0function\u00a0__set_state($an_array)\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$obj\u00a0=\u00a0new\u00a0A;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$obj->var1\u00a0=\u00a0$an_array['var1'];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$obj->var2\u00a0=\u00a0$an_array['var2'];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0$obj;\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$a\u00a0=\u00a0new\u00a0A;\n$a->var1\u00a0=\u00a05;\n$a->var2\u00a0=\u00a0'foo';\n\neval('$b\u00a0=\u00a0'\u00a0.\u00a0var_export($a,\u00a0true)\u00a0.\u00a0';');\u00a0\/\/\u00a0$b\u00a0=\u00a0A::__set_state(array(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0\u00a0\u00a0\u00a0'var1'\u00a0=>\u00a05,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0\u00a0\u00a0\u00a0'var2'\u00a0=>\u00a0'foo',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0));\nvar_dump($b);\n?>"}]},"version_compare":{"name":"version_compare","parameters":[{"type":"string","name":"$version1","description":"First version number."},{"type":"string","name":"$version2","description":"Second version number."},{"type":"string","name":"$operator","description":"If the third optional operator argument is specified, test for a particular relationship. The possible operators are: <, lt, <=, le, >, gt, >=, ge, ==, =, eq, !=, <>, ne respectively.\n\nThis parameter is case-sensitive, values should be lowercase."}],"return":{"type":"int","values":["TRUE","FALSE"]},"short":"Compares two \"PHP-standardized\" version number strings","examples":[{"title":"Example #1 version_compare() examples","content":"<?php\nif\u00a0(version_compare(PHP_VERSION,\u00a0'7.0.0')\u00a0>=\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'I\u00a0am\u00a0at\u00a0least\u00a0PHP\u00a0version\u00a07.0.0,\u00a0my\u00a0version:\u00a0'\u00a0.\u00a0PHP_VERSION\u00a0.\u00a0\"\\n\";\n}\n\nif\u00a0(version_compare(PHP_VERSION,\u00a0'5.3.0')\u00a0>=\u00a00)\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'I\u00a0am\u00a0at\u00a0least\u00a0PHP\u00a0version\u00a05.3.0,\u00a0my\u00a0version:\u00a0'\u00a0.\u00a0PHP_VERSION\u00a0.\u00a0\"\\n\";\n}\n\nif\u00a0(version_compare(PHP_VERSION,\u00a0'5.0.0',\u00a0'>='))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'I\u00a0am\u00a0at\u00a0least\u00a0PHP\u00a0version\u00a05.0.0,\u00a0my\u00a0version:\u00a0'\u00a0.\u00a0PHP_VERSION\u00a0.\u00a0\"\\n\";\n}\n\nif\u00a0(version_compare(PHP_VERSION,\u00a0'5.0.0',\u00a0'<'))\u00a0{\n\u00a0\u00a0\u00a0\u00a0echo\u00a0'I\u00a0am\u00a0still\u00a0PHP\u00a04,\u00a0my\u00a0version:\u00a0'\u00a0.\u00a0PHP_VERSION\u00a0.\u00a0\"\\n\";\n}\n?>"}]},"vfprintf":{"name":"vfprintf","parameters":[{"type":"resource","name":"$handle","description":""},{"type":"string","name":"$format","description":"See sprintf() for a description of format."},{"type":"array","name":"$args","description":""}],"return":{"type":"int","values":[]},"short":"Write a formatted string to a stream","examples":[{"title":"Example #1 vfprintf(): zero-padded integers","content":"<?php\nif\u00a0(!($fp\u00a0=\u00a0fopen('date.txt',\u00a0'w')))\n\u00a0\u00a0\u00a0\u00a0return;\n\nvfprintf($fp,\u00a0\"%04d-%02d-%02d\",\u00a0array($year,\u00a0$month,\u00a0$day));\n\/\/\u00a0will\u00a0write\u00a0the\u00a0formatted\u00a0ISO\u00a0date\u00a0to\u00a0date.txt\n?>"}]},"vprintf":{"name":"vprintf","parameters":[{"type":"string","name":"$format","description":"See sprintf() for a description of format."},{"type":"array","name":"$args","description":""}],"return":{"type":"int","values":[]},"short":"Output a formatted string","examples":[{"title":"Example #1 vprintf(): zero-padded integers","content":"<?php\nvprintf(\"%04d-%02d-%02d\",\u00a0explode('-',\u00a0'1988-8-1'));\u00a0\/\/\u00a01988-08-01\n?>"}]},"vsprintf":{"name":"vsprintf","parameters":[{"type":"string","name":"$format","description":"See sprintf() for a description of format."},{"type":"array","name":"$args","description":""}],"return":{"type":"string","values":[]},"short":"Return a formatted string","examples":[{"title":"Example #1 vsprintf(): zero-padded integers","content":"<?php\nprint\u00a0vsprintf(\"%04d-%02d-%02d\",\u00a0explode('-',\u00a0'1988-8-1'));\u00a0\/\/\u00a01988-08-01\n?>"}]},"wddx_add_vars":{"name":"wddx_add_vars","parameters":[{"type":"resource","name":"$packet_id","description":"A WDDX packet, returned by wddx_packet_start()."},{"type":"mixed","name":"$var_name","description":"Can be either a string naming a variable or an array containing strings naming the variables or another array, etc."},{"type":"mixed","name":"$...","description":""}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Add variables to a WDDX packet with the specified ID","examples":[]},"wddx_deserialize":{"name":"wddx_deserialize","parameters":[{"type":"string","name":"$packet","description":"A WDDX packet, as a string or stream."}],"return":{"type":"mixed","values":[]},"short":"Unserializes a WDDX packet","examples":[]},"wddx_packet_end":{"name":"wddx_packet_end","parameters":[{"type":"resource","name":"$packet_id","description":"A WDDX packet, returned by wddx_packet_start()."}],"return":{"type":"string","values":[]},"short":"Ends a WDDX packet with the specified ID","examples":[]},"wddx_packet_start":{"name":"wddx_packet_start","parameters":[{"type":"string","name":"$comment","description":"An optional comment string."}],"return":{"type":"resource","values":["FALSE"]},"short":"Starts a new WDDX packet with structure inside it","examples":[]},"wddx_serialize_value":{"name":"wddx_serialize_value","parameters":[{"type":"mixed","name":"$var","description":"The value to be serialized"},{"type":"string","name":"$comment","description":"An optional comment string that appears in the packet header."}],"return":{"type":"string","values":["FALSE"]},"short":"Serialize a single value into a WDDX packet","examples":[]},"wddx_serialize_vars":{"name":"wddx_serialize_vars","parameters":[{"type":"mixed","name":"$var_name","description":"Can be either a string naming a variable or an array containing strings naming the variables or another array, etc."},{"type":"mixed","name":"$...","description":""}],"return":{"type":"string","values":["FALSE"]},"short":"Serialize variables into a WDDX packet","examples":[{"title":"Example #1 wddx_serialize_vars() example","content":"<?php\n$a\u00a0=\u00a01;\n$b\u00a0=\u00a05.5;\n$c\u00a0=\u00a0array(\"blue\",\u00a0\"orange\",\u00a0\"violet\");\n$d\u00a0=\u00a0\"colors\";\n\n$clvars\u00a0=\u00a0array(\"c\",\u00a0\"d\");\necho\u00a0wddx_serialize_vars(\"a\",\u00a0\"b\",\u00a0$clvars);\n?>"}]},"wordwrap":{"name":"wordwrap","parameters":[{"type":"string","name":"$str","description":"The input string."},{"type":"int","name":"$width","default_value":"75","description":"The number of characters at which the string will be wrapped."},{"type":"string","name":"$break","default_value":"\"\\n\"","description":"The line is broken using the optional break parameter."},{"type":"bool","name":"$cut","default_value":"FALSE","description":"If the cut is set to TRUE, the string is always wrapped at or before the specified width.  So if you have a word that is larger than the given width, it is broken apart. (See second example). When FALSE the function does not split the word even if the width is smaller than the word width."}],"return":{"type":"string","values":[]},"short":"Wraps a string to a given number of characters","examples":[{"title":"Example #1 wordwrap() example","content":"<?php\n$text\u00a0=\u00a0\"The\u00a0quick\u00a0brown\u00a0fox\u00a0jumped\u00a0over\u00a0the\u00a0lazy\u00a0dog.\";\n$newtext\u00a0=\u00a0wordwrap($text,\u00a020,\u00a0\"<br\u00a0\/>\\n\");\n\necho\u00a0$newtext;\n?>"},{"title":"Example #2 wordwrap() example","content":"<?php\n$text\u00a0=\u00a0\"A\u00a0very\u00a0long\u00a0woooooooooooord.\";\n$newtext\u00a0=\u00a0wordwrap($text,\u00a08,\u00a0\"\\n\",\u00a0true);\n\necho\u00a0\"$newtext\\n\";\n?>"},{"title":"Example #3 wordwrap() example","content":"<?php\n$text\u00a0=\u00a0\"A\u00a0very\u00a0long\u00a0woooooooooooooooooord.\u00a0and\u00a0something\";\n$newtext\u00a0=\u00a0wordwrap($text,\u00a08,\u00a0\"\\n\",\u00a0false);\n\necho\u00a0\"$newtext\\n\";\n?>"}]},"xdebug_break":{"name":"xdebug_break","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_call_class":{"name":"xdebug_call_class","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_call_file":{"name":"xdebug_call_file","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_call_function":{"name":"xdebug_call_function","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_call_line":{"name":"xdebug_call_line","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_clear_aggr_profiling_data":{"name":"xdebug_clear_aggr_profiling_data","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_code_coverage_started":{"name":"xdebug_code_coverage_started","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_debug_zval":{"name":"xdebug_debug_zval","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_debug_zval_stdout":{"name":"xdebug_debug_zval_stdout","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_disable":{"name":"xdebug_disable","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_dump_aggr_profiling_data":{"name":"xdebug_dump_aggr_profiling_data","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_dump_superglobals":{"name":"xdebug_dump_superglobals","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_enable":{"name":"xdebug_enable","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_code_coverage":{"name":"xdebug_get_code_coverage","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_collected_errors":{"name":"xdebug_get_collected_errors","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_declared_vars":{"name":"xdebug_get_declared_vars","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_formatted_function_stack":{"name":"xdebug_get_formatted_function_stack","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_function_count":{"name":"xdebug_get_function_count","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_function_stack":{"name":"xdebug_get_function_stack","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_gc_run_count":{"name":"xdebug_get_gc_run_count","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_gc_total_collected_roots":{"name":"xdebug_get_gc_total_collected_roots","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_gcstats_filename":{"name":"xdebug_get_gcstats_filename","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_headers":{"name":"xdebug_get_headers","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_monitored_functions":{"name":"xdebug_get_monitored_functions","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_profiler_filename":{"name":"xdebug_get_profiler_filename","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_stack_depth":{"name":"xdebug_get_stack_depth","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_get_tracefile_name":{"name":"xdebug_get_tracefile_name","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_is_debugger_active":{"name":"xdebug_is_debugger_active","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_is_enabled":{"name":"xdebug_is_enabled","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_memory_usage":{"name":"xdebug_memory_usage","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_peak_memory_usage":{"name":"xdebug_peak_memory_usage","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_print_function_stack":{"name":"xdebug_print_function_stack","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_set_filter":{"name":"xdebug_set_filter","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_start_code_coverage":{"name":"xdebug_start_code_coverage","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_start_error_collection":{"name":"xdebug_start_error_collection","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_start_function_monitor":{"name":"xdebug_start_function_monitor","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_start_gcstats":{"name":"xdebug_start_gcstats","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_start_trace":{"name":"xdebug_start_trace","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_stop_code_coverage":{"name":"xdebug_stop_code_coverage","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_stop_error_collection":{"name":"xdebug_stop_error_collection","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_stop_function_monitor":{"name":"xdebug_stop_function_monitor","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_stop_gcstats":{"name":"xdebug_stop_gcstats","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_stop_trace":{"name":"xdebug_stop_trace","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_time_index":{"name":"xdebug_time_index","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xdebug_var_dump":{"name":"xdebug_var_dump","parameters":[],"return":{"type":"","values":[]},"short":"","examples":[]},"xml_error_string":{"name":"xml_error_string","parameters":[{"type":"int","name":"$code","description":"An error code from xml_get_error_code()."}],"return":{"type":"string","values":["FALSE"]},"short":"Get XML parser error string","examples":[]},"xml_get_current_byte_index":{"name":"xml_get_current_byte_index","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to get byte index from."}],"return":{"type":"int","values":["FALSE"]},"short":"Get current byte index for an XML parser","examples":[]},"xml_get_current_column_number":{"name":"xml_get_current_column_number","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to get column number from."}],"return":{"type":"int","values":["FALSE"]},"short":"\n   Get current column number for an XML parser\n  ","examples":[]},"xml_get_current_line_number":{"name":"xml_get_current_line_number","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to get line number from."}],"return":{"type":"int","values":["FALSE"]},"short":"Get current line number for an XML parser","examples":[]},"xml_get_error_code":{"name":"xml_get_error_code","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to get error code from."}],"return":{"type":"int","values":["FALSE"]},"short":"Get XML parser error code","examples":[]},"xml_parse":{"name":"xml_parse","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to use."},{"type":"string","name":"$data","description":"Chunk of data to parse.  A document may be parsed piece-wise by calling xml_parse() several times with new data, as long as the is_final parameter is set and TRUE when the last data is parsed."},{"type":"bool","name":"$is_final","default_value":"FALSE","description":"If set and TRUE, data is the last piece of data sent in this parse."}],"return":{"type":"int","values":[]},"short":"Start parsing an XML document","examples":[]},"xml_parse_into_struct":{"name":"xml_parse_into_struct","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser."},{"type":"string","name":"$data","description":"A string containing the XML data."}],"return":{"type":"int","values":["FALSE","TRUE"]},"short":"Parse XML data into an array structure","examples":[{"title":"Example #1 xml_parse_into_struct() example","content":"<?php\n$simple\u00a0=\u00a0\"<para><note>simple\u00a0note<\/note><\/para>\";\n$p\u00a0=\u00a0xml_parser_create();\nxml_parse_into_struct($p,\u00a0$simple,\u00a0$vals,\u00a0$index);\nxml_parser_free($p);\necho\u00a0\"Index\u00a0array\\n\";\nprint_r($index);\necho\u00a0\"\\nVals\u00a0array\\n\";\nprint_r($vals);\n?>"},{"title":"Example #2 moldb.xml - small database of molecular information","content":"<?xml version=\"1.0\"?>\n<moldb>\n\n  <molecule>\n      <name>Alanine<\/name>\n      <symbol>ala<\/symbol>\n      <code>A<\/code>\n      <type>hydrophobic<\/type>\n  <\/molecule>\n\n  <molecule>\n      <name>Lysine<\/name>\n      <symbol>lys<\/symbol>\n      <code>K<\/code>\n      <type>charged<\/type>\n  <\/molecule>\n\n<\/moldb>"},{"title":"Example #3 \n     parsemoldb.php - parses moldb.xml into an array of\n     molecular objects\n    ","content":"<?php\n\nclass\u00a0AminoAcid\u00a0{\n\u00a0\u00a0\u00a0\u00a0var\u00a0$name;\u00a0\u00a0\/\/\u00a0aa\u00a0name\n\u00a0\u00a0\u00a0\u00a0var\u00a0$symbol;\u00a0\u00a0\u00a0\u00a0\/\/\u00a0three\u00a0letter\u00a0symbol\n\u00a0\u00a0\u00a0\u00a0var\u00a0$code;\u00a0\u00a0\/\/\u00a0one\u00a0letter\u00a0code\n\u00a0\u00a0\u00a0\u00a0var\u00a0$type;\u00a0\u00a0\/\/\u00a0hydrophobic,\u00a0charged\u00a0or\u00a0neutral\n\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0function\u00a0AminoAcid\u00a0($aa)\u00a0\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0foreach\u00a0($aa\u00a0as\u00a0$k=>$v)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->$k\u00a0=\u00a0$aa[$k];\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nfunction\u00a0readDatabase($filename)\u00a0\n{\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0read\u00a0the\u00a0XML\u00a0database\u00a0of\u00a0aminoacids\n\u00a0\u00a0\u00a0\u00a0$data\u00a0=\u00a0implode(\"\",\u00a0file($filename));\n\u00a0\u00a0\u00a0\u00a0$parser\u00a0=\u00a0xml_parser_create();\n\u00a0\u00a0\u00a0\u00a0xml_parser_set_option($parser,\u00a0XML_OPTION_CASE_FOLDING,\u00a00);\n\u00a0\u00a0\u00a0\u00a0xml_parser_set_option($parser,\u00a0XML_OPTION_SKIP_WHITE,\u00a01);\n\u00a0\u00a0\u00a0\u00a0xml_parse_into_struct($parser,\u00a0$data,\u00a0$values,\u00a0$tags);\n\u00a0\u00a0\u00a0\u00a0xml_parser_free($parser);\n\n\u00a0\u00a0\u00a0\u00a0\/\/\u00a0loop\u00a0through\u00a0the\u00a0structures\n\u00a0\u00a0\u00a0\u00a0foreach\u00a0($tags\u00a0as\u00a0$key=>$val)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if\u00a0($key\u00a0==\u00a0\"molecule\")\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$molranges\u00a0=\u00a0$val;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0each\u00a0contiguous\u00a0pair\u00a0of\u00a0array\u00a0entries\u00a0are\u00a0the\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/\/\u00a0lower\u00a0and\u00a0upper\u00a0range\u00a0for\u00a0each\u00a0molecule\u00a0definition\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for\u00a0($i=0;\u00a0$i\u00a0<\u00a0count($molranges);\u00a0$i+=2)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$offset\u00a0=\u00a0$molranges[$i]\u00a0+\u00a01;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$len\u00a0=\u00a0$molranges[$i\u00a0+\u00a01]\u00a0-\u00a0$offset;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$tdb[]\u00a0=\u00a0parseMol(array_slice($values,\u00a0$offset,\u00a0$len));\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\u00a0else\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0continue;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return\u00a0$tdb;\n}\n\nfunction\u00a0parseMol($mvalues)\u00a0\n{\n\u00a0\u00a0\u00a0\u00a0for\u00a0($i=0;\u00a0$i\u00a0<\u00a0count($mvalues);\u00a0$i++)\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$mol[$mvalues[$i][\"tag\"]]\u00a0=\u00a0$mvalues[$i][\"value\"];\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return\u00a0new\u00a0AminoAcid($mol);\n}\n\n$db\u00a0=\u00a0readDatabase(\"moldb.xml\");\necho\u00a0\"**\u00a0Database\u00a0of\u00a0AminoAcid\u00a0objects:\\n\";\nprint_r($db);\n\n?>"}]},"xml_parser_create":{"name":"xml_parser_create","parameters":[{"type":"string","name":"$encoding","description":"The optional encoding specifies the character encoding for the input\/output in PHP 4. Starting from PHP 5, the input encoding is automatically detected, so that the encoding parameter specifies only the output encoding. In PHP 4, the default output encoding is the same as the input charset. If empty string is passed, the parser attempts to identify which encoding the document is encoded in by looking at the heading 3 or 4 bytes. In PHP 5.0.0 and 5.0.1, the default output charset is ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported encodings are ISO-8859-1, UTF-8 and US-ASCII."}],"return":{"type":"resource","values":[]},"short":"Create an XML parser","examples":[]},"xml_parser_create_ns":{"name":"xml_parser_create_ns","parameters":[{"type":"string","name":"$encoding","description":"The input encoding is automatically detected, so that the encoding parameter specifies only the output encoding. In PHP 5.0.0 and 5.0.1, the default output charset is ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported encodings are ISO-8859-1, UTF-8 and US-ASCII."},{"type":"string","name":"$separator","default_value":"\":\"","description":"With a namespace aware parser tag parameters passed to the various handler functions will consist of namespace and tag name separated by the string specified in separator."}],"return":{"type":"resource","values":[]},"short":"Create an XML parser with namespace support","examples":[]},"xml_parser_free":{"name":"xml_parser_free","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to free."}],"return":{"type":"bool","values":["FALSE","TRUE"]},"short":"Free an XML parser","examples":[]},"xml_parser_get_option":{"name":"xml_parser_get_option","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to get an option from."},{"type":"int","name":"$option","description":"Which option to fetch. XML_OPTION_CASE_FOLDING and XML_OPTION_TARGET_ENCODING are available. See xml_parser_set_option() for their description."}],"return":{"type":"mixed","values":["FALSE","E_WARNING"]},"short":"Get options from an XML parser","examples":[]},"xml_parser_set_option":{"name":"xml_parser_set_option","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to set an option in."},{"type":"int","name":"$option","description":"Which option to set.  See below.\n\nThe following options are available:\n\nXML parser options\n Option constant Data type Description XML_OPTION_CASE_FOLDING integer\n Controls whether case-folding is enabled for this XML parser.  Enabled by default.\n XML_OPTION_SKIP_TAGSTART integer\n Specify how many characters should be skipped in the beginning of a tag name.\n XML_OPTION_SKIP_WHITE integer\n Whether to skip values consisting of whitespace characters.\n XML_OPTION_TARGET_ENCODING string\n Sets which target encoding to use in this XML parser.By default, it is set to the same as the source encoding used by xml_parser_create(). Supported target encodings are ISO-8859-1, US-ASCII and UTF-8."},{"type":"mixed","name":"$value","description":"The option's new value."}],"return":{"type":"bool","values":["FALSE","TRUE"]},"short":"Set options in an XML parser","examples":[]},"xml_set_character_data_handler":{"name":"xml_set_character_data_handler","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to set up character data handler function."},{"type":"callable","name":"$handler","description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser.\n\nThe function named by handler must accept two parameters:\n\nhandler ( resource $parser , string $data )\n\nparser\n\n\n\n The first parameter, parser, is a reference to the XML parser calling the handler.\n\n\n\n\n\n data\n\n\n\n The second parameter, data, contains the character data as a string.\n\nCharacter data handler is called for every piece of a text in the XML document. It can be called multiple times inside each fragment (e.g. for non-ASCII strings).\n\nIf a handler function is set to an empty string, or FALSE, the handler in question is disabled.\n\nNote: Instead of a function name, an array containing an object reference and a method name can also be supplied."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set up character data handler","examples":[]},"xml_set_default_handler":{"name":"xml_set_default_handler","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to set up default handler function."},{"type":"callable","name":"$handler","description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser.\n\nThe function named by handler must accept two parameters:\n\nhandler ( resource $parser , string $data )\n\nparser\n\n\n\n\n The first parameter, parser, is a reference to the XML parser calling the handler.\n\n\n\n\n\n\n data\n\n\n\n\n The second parameter, data, contains the character data.This may be the XML declaration, document type declaration, entities or other data for which no other handler exists.\n\nIf a handler function is set to an empty string, or FALSE, the handler in question is disabled.\n\nNote: Instead of a function name, an array containing an object reference and a method name can also be supplied."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set up default handler","examples":[]},"xml_set_element_handler":{"name":"xml_set_element_handler","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to set up start and end element handler functions."},{"type":"callable","name":"$start_element_handler","description":"The function named by start_element_handler must accept three parameters:\n\nstart_element_handler ( resource $parser , string $name , array $attribs )\n\nparser\n\n\n\n The first parameter, parser, is a reference to the XML parser calling the handler.\n\n\n\n\n\n name\n\n\n\n The second parameter, name, contains the name of the element for which this handler is called.If case-folding is in effect for this parser, the element name will be in uppercase letters.\n\n\n\n\n\n attribs\n\n\n\n The third parameter, attribs, contains an associative array with the element's attributes (if any).The keys of this array are the attribute names, the values are the attribute values.Attribute names are case-folded on the same criteria as element names.Attribute values are not case-folded.\n\n The original order of the attributes can be retrieved by walking through attribs the normal way, using each().The first key in the array was the first attribute, and so on.\n\nNote: Instead of a function name, an array containing an object reference and a method name can also be supplied."},{"type":"callable","name":"$end_element_handler","description":"The function named by end_element_handler must accept two parameters:\n\nend_element_handler ( resource $parser , string $name )\n\nparser\n\n\n\n The first parameter, parser, is a reference to the XML parser calling the handler.\n\n\n\n\n\n name\n\n\n\n The second parameter, name, contains the name of the element for which this handler is called.If case-folding is in effect for this parser, the element name will be in uppercase letters.\n\nIf a handler function is set to an empty string, or FALSE, the handler in question is disabled."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set up start and end element handlers","examples":[]},"xml_set_end_namespace_decl_handler":{"name":"xml_set_end_namespace_decl_handler","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser."},{"type":"callable","name":"$handler","description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser.\n\nThe function named by handler must accept two parameters, and should return an integer value. If the value returned from the handler is FALSE (which it will be if no value is returned), the XML parser will stop parsing and xml_get_error_code() will return XML_ERROR_EXTERNAL_ENTITY_HANDLING.\n\nhandler ( resource $parser , string $prefix )\n\nparser\n\n\n\n The first parameter, parser, is a reference to the XML parser calling the handler.\n\n\n\n\n\n prefix\n\n\n\n The prefix is a string used to reference the namespace within an XML object.\n\nIf a handler function is set to an empty string, or FALSE, the handler in question is disabled.\n\nNote: Instead of a function name, an array containing an object reference and a method name can also be supplied."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set up end namespace declaration handler","examples":[]},"xml_set_external_entity_ref_handler":{"name":"xml_set_external_entity_ref_handler","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to set up external entity reference handler function."},{"type":"callable","name":"$handler","description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser.\n\nThe function named by handler must accept five parameters, and should return an integer value.If the value returned from the handler is FALSE (which it will be if no value is returned), the XML parser will stop parsing and xml_get_error_code() will return XML_ERROR_EXTERNAL_ENTITY_HANDLING.\n\nhandler ( resource $parser , string $open_entity_names , string $base , string $system_id , string $public_id )\n\nparser\n\n\n\n The first parameter, parser, is a reference to the XML parser calling the handler.\n\n\n\n\n\n open_entity_names\n\n\n\n The second parameter, open_entity_names, is a space-separated list of the names of the entities that are open for the parse of this entity (including the name of the referenced entity).\n\n\n\n\n\n base\n\n\n\n This is the base for resolving the system identifier (system_id) of the external entity.Currently this parameter will always be set to an empty string.\n\n\n\n\n\n system_id\n\n\n\n The fourth parameter, system_id, is the system identifier as specified in the entity declaration.\n\n\n\n\n\n public_id\n\n\n\n The fifth parameter, public_id, is the public identifier as specified in the entity declaration, or an empty string if none was specified; the whitespace in the public identifier will have been normalized as required by the XML spec.\n\nIf a handler function is set to an empty string, or FALSE, the handler in question is disabled.\n\nNote: Instead of a function name, an array containing an object reference and a method name can also be supplied."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set up external entity reference handler","examples":[]},"xml_set_notation_decl_handler":{"name":"xml_set_notation_decl_handler","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to set up notation declaration handler function."},{"type":"callable","name":"$handler","description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser.\n\nThe function named by handler must accept five parameters:\n\nhandler ( resource $parser , string $notation_name , string $base , string $system_id , string $public_id )\n\nparser\n\n\n\n\n The first parameter, parser, is a reference to the XML parser calling the handler.\n\n\n\n\n\n notation_name\n\n\n\n This is the notation's name, as per the notation format described above.\n\n\n\n\n\n\n base\n\n\n\n\n This is the base for resolving the system identifier (system_id) of the notation declaration. Currently this parameter will always be set to an empty string.\n\n\n\n\n\n system_id\n\n\n\n System identifier of the external notation declaration.\n\n\n\n\n\n\n public_id\n\n\n\n\n Public identifier of the external notation declaration.\n\nIf a handler function is set to an empty string, or FALSE, the handler in question is disabled.\n\nNote: Instead of a function name, an array containing an object reference and a method name can also be supplied."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set up notation declaration handler","examples":[]},"xml_set_object":{"name":"xml_set_object","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to use inside the object."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Use XML Parser within an object","examples":[{"title":"Example #1 xml_set_object() example","content":"<?php\nclass\u00a0XMLParser\n{\n\u00a0\u00a0\u00a0\u00a0private\u00a0$parser;\n\n\u00a0\u00a0\u00a0\u00a0function\u00a0__construct()\u00a0\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$this->parser\u00a0=\u00a0xml_parser_create();\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xml_set_object($this->parser,\u00a0$this);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xml_set_element_handler($this->parser,\u00a0\"tag_open\",\u00a0\"tag_close\");\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xml_set_character_data_handler($this->parser,\u00a0\"cdata\");\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0function\u00a0__destruct()\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xml_parser_free($this->parser);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unset($this->parser);\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0function\u00a0parse($data)\u00a0\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xml_parse($this->parser,\u00a0$data);\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0function\u00a0tag_open($parser,\u00a0$tag,\u00a0$attributes)\u00a0\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($tag,\u00a0$attributes);\u00a0\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0function\u00a0cdata($parser,\u00a0$cdata)\u00a0\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($cdata);\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0function\u00a0tag_close($parser,\u00a0$tag)\u00a0\n\u00a0\u00a0\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var_dump($tag);\n\u00a0\u00a0\u00a0\u00a0}\n}\n\n$xml_parser\u00a0=\u00a0new\u00a0XMLParser();\n$xml_parser->parse(\"<A\u00a0ID='hallo'>PHP<\/A>\");\n?>"}]},"xml_set_processing_instruction_handler":{"name":"xml_set_processing_instruction_handler","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to set up processing instruction (PI) handler function."},{"type":"callable","name":"$handler","description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser.\n\nThe function named by handler must accept three parameters:\n\nhandler ( resource $parser , string $target , string $data )\n\nparser\n\n\n\n The first parameter, parser, is a reference to the XML parser calling the handler.\n\n\n\n\n\n target\n\n\n\n The second parameter, target, contains the PI target.\n\n\n\n\n\n data\n\n\n\n The third parameter, data, contains the PI data.\n\nIf a handler function is set to an empty string, or FALSE, the handler in question is disabled.\n\nNote: Instead of a function name, an array containing an object reference and a method name can also be supplied."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Set up processing instruction (PI) handler\n  ","examples":[]},"xml_set_start_namespace_decl_handler":{"name":"xml_set_start_namespace_decl_handler","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser."},{"type":"callable","name":"$handler","description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser.\n\nThe function named by handler must accept three parameters, and should return an integer value. If the value returned from the handler is FALSE (which it will be if no value is returned), the XML parser will stop parsing and xml_get_error_code() will return XML_ERROR_EXTERNAL_ENTITY_HANDLING.\n\nhandler ( resource $parser , string $prefix , string $uri )\n\nparser\n\n\n\n The first parameter, parser, is a reference to the XML parser calling the handler.\n\n\n\n\n\n prefix\n\n\n\n The prefix is a string used to reference the namespace within an XML object.\n\n\n\n\n\n uri\n\n\n\n Uniform Resource Identifier (URI) of namespace.\n\nIf a handler function is set to an empty string, or FALSE, the handler in question is disabled.\n\nNote: Instead of a function name, an array containing an object reference and a method name can also be supplied."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Set up start namespace declaration handler\n  ","examples":[]},"xml_set_unparsed_entity_decl_handler":{"name":"xml_set_unparsed_entity_decl_handler","parameters":[{"type":"resource","name":"$parser","description":"A reference to the XML parser to set up unparsed entity declaration handler function."},{"type":"callable","name":"$handler","description":"handler is a string containing the name of a function that must exist when xml_parse() is called for parser.\n\nThe function named by handler must accept six parameters:\n\nhandler ( resource $parser , string $entity_name , string $base , string $system_id , string $public_id , string $notation_name )\n\nparser\n\n\n\n The first parameter, parser, is a reference to the XML parser calling the handler.\n\n\n\n\n\n entity_name\n\n\n\n The name of the entity that is about to be defined.\n\n\n\n\n\n base\n\n\n\n This is the base for resolving the system identifier (systemId) of the external entity.Currently this parameter will always be set to an empty string.\n\n\n\n\n\n system_id\n\n\n\n System identifier for the external entity.\n\n\n\n\n\n public_id\n\n\n\n Public identifier for the external entity.\n\n\n\n\n\n notation_name\n\n\n\n Name of the notation of this entity (see xml_set_notation_decl_handler()).\n\nIf a handler function is set to an empty string, or FALSE, the handler in question is disabled.\n\nNote: Instead of a function name, an array containing an object reference and a method name can also be supplied."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"\n   Set up unparsed entity declaration handler\n  ","examples":[]},"xmlwriter_end_attribute":{"name":"xmlwriter_end_attribute","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"End attribute","examples":[]},"xmlwriter_end_cdata":{"name":"xmlwriter_end_cdata","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"End current CDATA","examples":[]},"xmlwriter_end_comment":{"name":"xmlwriter_end_comment","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create end comment","examples":[]},"xmlwriter_end_document":{"name":"xmlwriter_end_document","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"End current document","examples":[]},"xmlwriter_end_dtd":{"name":"xmlwriter_end_dtd","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"End current DTD","examples":[]},"xmlwriter_end_dtd_attlist":{"name":"xmlwriter_end_dtd_attlist","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"End current DTD AttList","examples":[]},"xmlwriter_end_dtd_element":{"name":"xmlwriter_end_dtd_element","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"End current DTD element","examples":[]},"xmlwriter_end_dtd_entity":{"name":"xmlwriter_end_dtd_entity","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"End current DTD Entity","examples":[]},"xmlwriter_end_element":{"name":"xmlwriter_end_element","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"End current element","examples":[]},"xmlwriter_end_pi":{"name":"xmlwriter_end_pi","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"End current PI","examples":[]},"xmlwriter_flush":{"name":"xmlwriter_flush","parameters":[{"type":"bool","name":"$empty","default_value":"TRUE","description":"Whether to empty the buffer or not. Default is TRUE."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"mixed","values":[]},"short":"Flush current buffer","examples":[]},"xmlwriter_full_end_element":{"name":"xmlwriter_full_end_element","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"End current element","examples":[]},"xmlwriter_open_memory":{"name":"xmlwriter_open_memory","parameters":[],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create new xmlwriter using memory for string output","examples":[]},"xmlwriter_open_uri":{"name":"xmlwriter_open_uri","parameters":[{"type":"string","name":"$uri","description":"The URI of the resource for the output."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create new xmlwriter using source uri for output","examples":[]},"xmlwriter_output_memory":{"name":"xmlwriter_output_memory","parameters":[{"type":"bool","name":"$flush","default_value":"TRUE","description":"Whether to flush the output buffer or not. Default is TRUE."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"string","values":[]},"short":"Returns current buffer","examples":[]},"xmlwriter_set_indent":{"name":"xmlwriter_set_indent","parameters":[{"type":"bool","name":"$indent","description":"Whether indentation is enabled."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Toggle indentation on\/off","examples":[]},"xmlwriter_set_indent_string":{"name":"xmlwriter_set_indent_string","parameters":[{"type":"string","name":"$indentString","description":"The indentation string."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Set string used for indenting","examples":[]},"xmlwriter_start_attribute":{"name":"xmlwriter_start_attribute","parameters":[{"type":"string","name":"$name","description":"The attribute name."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start attribute","examples":[]},"xmlwriter_start_attribute_ns":{"name":"xmlwriter_start_attribute_ns","parameters":[{"type":"string","name":"$prefix","description":"The namespace prefix."},{"type":"string","name":"$name","description":"The attribute name."},{"type":"string","name":"$uri","description":"The namespace URI."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start namespaced attribute","examples":[]},"xmlwriter_start_cdata":{"name":"xmlwriter_start_cdata","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start CDATA tag","examples":[]},"xmlwriter_start_comment":{"name":"xmlwriter_start_comment","parameters":[{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start comment","examples":[]},"xmlwriter_start_document":{"name":"xmlwriter_start_document","parameters":[{"type":"string","name":"$version","default_value":"1.0","description":"The version number of the document as part of the XML declaration."},{"type":"string","name":"$encoding","default_value":"NULL","description":"The encoding of the document as part of the XML declaration."},{"type":"string","name":"$standalone","description":"yes or no."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create document tag","examples":[]},"xmlwriter_start_dtd":{"name":"xmlwriter_start_dtd","parameters":[{"type":"string","name":"$qualifiedName","description":"The qualified name of the document type to create."},{"type":"string","name":"$publicId","description":"The external subset public identifier."},{"type":"string","name":"$systemId","description":"The external subset system identifier."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start DTD tag","examples":[]},"xmlwriter_start_dtd_attlist":{"name":"xmlwriter_start_dtd_attlist","parameters":[{"type":"string","name":"$name","description":"The attribute list name."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start DTD AttList","examples":[]},"xmlwriter_start_dtd_element":{"name":"xmlwriter_start_dtd_element","parameters":[{"type":"string","name":"$qualifiedName","description":"The qualified name of the document type to create."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start DTD element","examples":[]},"xmlwriter_start_dtd_entity":{"name":"xmlwriter_start_dtd_entity","parameters":[{"type":"string","name":"$name","description":"The name of the entity."},{"type":"bool","name":"$isparam","description":""},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start DTD Entity","examples":[]},"xmlwriter_start_element":{"name":"xmlwriter_start_element","parameters":[{"type":"string","name":"$name","description":"The element name."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start element tag","examples":[]},"xmlwriter_start_element_ns":{"name":"xmlwriter_start_element_ns","parameters":[{"type":"string","name":"$prefix","description":"The namespace prefix."},{"type":"string","name":"$name","description":"The element name."},{"type":"string","name":"$uri","description":"The namespace URI."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start namespaced element tag","examples":[]},"xmlwriter_start_pi":{"name":"xmlwriter_start_pi","parameters":[{"type":"string","name":"$target","description":"The target of the processing instruction."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Create start PI tag","examples":[]},"xmlwriter_text":{"name":"xmlwriter_text","parameters":[{"type":"string","name":"$content","description":"The contents of the text."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write text","examples":[]},"xmlwriter_write_attribute":{"name":"xmlwriter_write_attribute","parameters":[{"type":"string","name":"$name","description":"The name of the attribute."},{"type":"string","name":"$value","description":"The value of the attribute."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write full attribute","examples":[]},"xmlwriter_write_attribute_ns":{"name":"xmlwriter_write_attribute_ns","parameters":[{"type":"string","name":"$prefix","description":"The namespace prefix."},{"type":"string","name":"$name","description":"The attribute name."},{"type":"string","name":"$uri","description":"The namespace URI."},{"type":"string","name":"$content","description":"The attribute value."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write full namespaced attribute","examples":[]},"xmlwriter_write_cdata":{"name":"xmlwriter_write_cdata","parameters":[{"type":"string","name":"$content","description":"The contents of the CDATA."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write full CDATA tag","examples":[]},"xmlwriter_write_comment":{"name":"xmlwriter_write_comment","parameters":[{"type":"string","name":"$content","description":"The contents of the comment."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write full comment tag","examples":[]},"xmlwriter_write_dtd":{"name":"xmlwriter_write_dtd","parameters":[{"type":"string","name":"$name","description":"The DTD name."},{"type":"string","name":"$publicId","description":"The external subset public identifier."},{"type":"string","name":"$systemId","description":"The external subset system identifier."},{"type":"string","name":"$subset","description":"The content of the DTD."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write full DTD tag","examples":[]},"xmlwriter_write_dtd_attlist":{"name":"xmlwriter_write_dtd_attlist","parameters":[{"type":"string","name":"$name","description":"The name of the DTD attribute list."},{"type":"string","name":"$content","description":"The content of the DTD attribute list."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write full DTD AttList tag","examples":[]},"xmlwriter_write_dtd_element":{"name":"xmlwriter_write_dtd_element","parameters":[{"type":"string","name":"$name","description":"The name of the DTD element."},{"type":"string","name":"$content","description":"The content of the element."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write full DTD element tag","examples":[]},"xmlwriter_write_dtd_entity":{"name":"xmlwriter_write_dtd_entity","parameters":[{"type":"string","name":"$name","description":"The name of the entity."},{"type":"string","name":"$content","description":"The content of the entity."},{"type":"bool","name":"$pe"},{"type":"string","name":"$pubid"},{"type":"string","name":"$sysid"},{"type":"string","name":"$ndataid"},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write full DTD Entity tag","examples":[]},"xmlwriter_write_element":{"name":"xmlwriter_write_element","parameters":[{"type":"string","name":"$name","description":"The element name."},{"type":"string","name":"$content","description":"The element contents."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write full element tag","examples":[]},"xmlwriter_write_element_ns":{"name":"xmlwriter_write_element_ns","parameters":[{"type":"string","name":"$prefix","description":"The namespace prefix."},{"type":"string","name":"$name","description":"The element name."},{"type":"string","name":"$uri","description":"The namespace URI."},{"type":"string","name":"$content","description":"The element contents."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write full namespaced element tag","examples":[]},"xmlwriter_write_pi":{"name":"xmlwriter_write_pi","parameters":[{"type":"string","name":"$target","description":"The target of the processing instruction."},{"type":"string","name":"$content","description":"The content of the processing instruction."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Writes a PI","examples":[]},"xmlwriter_write_raw":{"name":"xmlwriter_write_raw","parameters":[{"type":"string","name":"$content","description":"The text string to write."},{"type":"resource","name":"$xmlwriter","description":"Only for procedural calls. The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory()."}],"return":{"type":"bool","values":["TRUE","FALSE"]},"short":"Write a raw XML text","examples":[]},"zend_version":{"name":"zend_version","parameters":[],"return":{"type":"string","values":[]},"short":"Gets the version of the current Zend engine","examples":[{"title":"Example #1 zend_version() example","content":"<?php\necho\u00a0\"Zend\u00a0engine\u00a0version:\u00a0\"\u00a0.\u00a0zend_version();\n?>"}]},"zlib_decode":{"name":"zlib_decode","parameters":[{"type":"string","name":"$data","description":""},{"type":"string","name":"$max_decoded_len","description":""}],"return":{"type":"string","values":["FALSE"]},"short":"Uncompress any raw\/gzip\/zlib encoded data","examples":[]},"zlib_encode":{"name":"zlib_encode","parameters":[{"type":"string","name":"$data","description":"The data to compress."},{"type":"int","name":"$encoding","description":"The compression algorithm. Either ZLIB_ENCODING_RAW, ZLIB_ENCODING_DEFLATE or ZLIB_ENCODING_GZIP."},{"type":"int","name":"$level","default_value":"-1","description":""}],"return":{"type":"string","values":[]},"short":"Compress data with the specified encoding","examples":[{"title":"Example #1 zlib_encode() example","content":"<?php\n$str\u00a0=\u00a0'hello\u00a0world';\n$enc\u00a0=\u00a0zlib_encode($str,\u00a0ZLIB_ENCODING_DEFLATE);\necho\u00a0bin2hex($enc);\n?>"}]},"zlib_get_coding_type":{"name":"zlib_get_coding_type","parameters":[],"return":{"type":"string","values":["FALSE"]},"short":"Returns the coding type used for output compression","examples":[]}}